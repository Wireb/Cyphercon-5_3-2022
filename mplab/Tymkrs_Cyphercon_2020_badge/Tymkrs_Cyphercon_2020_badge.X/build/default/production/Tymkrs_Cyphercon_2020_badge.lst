MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;#######################################################################################################
                            ##################################################
                      00002 ;Copyright (c) 2020 Peter Shabino
                      00003 ;
                      00004 ;Permission is hereby granted, free of charge, to any person obtaining a copy of this hardware, software
                            , and associated documentation files 
                      00005 ;(the "Product"), to deal in the Product without restriction, including without limitation the rights to
                             use, copy, modify, merge, publish, 
                      00006 ;distribute, sublicense, and/or sell copies of the Product, and to permit persons to whom the Product is
                             furnished to do so, subject to the 
                      00007 ;following conditions:
                      00008 ;
                      00009 ;The above copyright notice and this permission notice shall be included in all copies or substantial po
                            rtions of the Product.
                      00010 ;
                      00011 ;THE PRODUCT IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LI
                            MITED TO THE WARRANTIES OF 
                      00012 ;MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
                             COPYRIGHT HOLDERS BE LIABLE 
                      00013 ;FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
                             FROM, OUT OF OR IN CONNECTION 
                      00014 ;WITH THE PRODUCT OR THE USE OR OTHER DEALINGS IN THE PRODUCT.
                      00015 ;#######################################################################################################
                            ##################################################
                      00016 ; 12JAN2020 V0 PJS New 
                      00017 ; 09Mar2020 V1 PJS power draw too high swap over to alternate Logo LED patterns 
                      00018 ; 28Mar2021 V2 PJS swapped the oLED init and EEPROM check so we can selfcheck oLED with blank EEPROMs
                      00019 ; 25Jun2021 V3 PJS split the oled init and eeprom check so can init oled before led self test
                      00020 ; 14Mar2022 V4 PJS added code to disable the SPI corrupt led blink when RA0 is shorted to ground (pins 2
                             and 3 on pickit connector) This resolves the SPI programming corruption I was seeing programing
                      00021 ; 29Mar2022 V5 PJS changed code to allow llamas/founders to rez badges as well as necrollamacons 
                      00022         
                      00023         ; use all language settings.... 4 space per indent, tab size 4, right margine 80, no expand spac
                            es
                      00024 
                      00025         
                      00026 #define CODE_VER_STRING "Peter Shabino 29Mar2022 code for tymkrs Cyphercon 2020 badge V5 www.wire2wire.o
                            rg!" ;Just in ROM !!! update vars below with true level!!
  00000000            00027 ver             equ     0x00
                      00028 
                      00029 ; enable debug code TODO comment out all before final build
                      00030 ;#define debug
                      00031 ;#define proto
                      00032 ;#define SKIP_EEPROM_TEST
                      00033                 
                      00034 ; NOTES
                      00035 ; SAF is high endurance flash (128 words) at the end of flash. Not usable as program space when enabled 
                            in config words 
                      00036 ; http://ww1.microchip.com/downloads/en/DeviceDoc/PIC16(L)F15354_55%20Data%20Sheet%2040001853C.pdf      
                      00037 
                      00038 ;****************************************************************************************
                      00039 ; port list [SOIC20]
                      00040 ; Vss(20)
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00041 ; Vdd(1)
                      00042 ; RA0(19)       [ICSPDAT]
                      00043 ; RA1(18)       [ISPCLK]
                      00044 ; RA2(17)       Board ID 0      
                      00045 ; RA3(4)        [MCLR]          button in
                      00046 ; RA4(3)        Board ID 1
                      00047 ; RA5(2)        Board ID 2
                      00048 ; RB4(13)       SCL
                      00049 ; RB5(12)       SDA
                      00050 ; RB6(11)       IR_IN
                      00051 ; RB7(10)       IR_OUT
                      00052 ; RC0(16)       MISO
                      00053 ; RC1(15)       MOSI
                      00054 ; RC2(14)       Sclk
                      00055 ; RC3(7)        oLED_Reset
                      00056 ; RC4(6)        oLED_DC
                      00057 ; RC5(5)        EEPROM_CS
                      00058 ; RC6(8)        oLED_CS
                      00059 ; RC7(9)        Post_CON
                      00060 ;****************************************************************************************
                      00061 
                      00062 
                      00063 ; PIC16F15345 Configuration Bit Settings 
                      00064 #include "p16f15345.inc"
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ; Build date : Jan 06 2020
                      00005 ;  MPASM PIC16F15345 processor include
                      00006 ; 
                      00007 ;  (c) Copyright 1999-2020 Microchip Technology, All rights reserved
                      00008 ;==========================================================================
                      00009 
                      03813         LIST
                      00065 ; CONFIG1
                      00066 ; __config 0xFF8C
8007   3F8C           00067  __CONFIG _CONFIG1, _FEXTOSC_OFF & _RSTOSC_HFINT32 & _CLKOUTEN_OFF & _CSWEN_ON & _FCMEN_ON
                      00068 ; CONFIG2
                      00069 ; __config 0xF7DC
                      00070 ; __CONFIG _CONFIG2, _MCLRE_OFF & _PWRTE_ON & _LPBOREN_ON & _BOREN_ON & _BORV_LO & _ZCD_OFF & _PPS1WAY_O
                            FF & _STVREN_ON
8008   37DE           00071  __CONFIG _CONFIG2, _MCLRE_OFF & _PWRTE_OFF & _LPBOREN_ON & _BOREN_ON & _BORV_LO & _ZCD_OFF & _PPS1WAY_O
                            FF & _STVREN_ON
                      00072 ; CONFIG3
                      00073 ; __config 0xFF9F
8009   3F9F           00074  __CONFIG _CONFIG3, _WDTCPS_WDTCPS_31 & _WDTE_OFF & _WDTCWS_WDTCWS_7 & _WDTCCS_SC
                      00075 ; CONFIG4
                      00076 ; __config 0xDFEF
800A   1FEF           00077  __CONFIG _CONFIG4, _BBSIZE_BB512 & _BBEN_OFF & _SAFEN_ON & _WRTAPP_OFF & _WRTB_OFF & _WRTC_OFF & _WRTSA
                            F_OFF & _LVP_OFF
                      00078 ; CONFIG5
                      00079 ; __config 0xFFFE
                      00080 #ifdef debug
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00081  __CONFIG _CONFIG5, _CP_OFF
                      00082 #else
800B   3FFE           00083  __CONFIG _CONFIG5, _CP_ON
                      00084 #endif 
                      00085  errorlevel 0      ; all messages
                      00086  errorlevel -302    ; Hide the useless bank switch warnings as every non bank 0 register will generate o
                            ne even if you use banksel or movlb properly beofore it or not. 
                      00087  
                      00088  
                      00089 ;------------------
                      00090 ; constants
                      00091 ;------------------     
  00000015            00092 IR_PULSE_WIDTH  equ 0x15                ; pulse width set to 10% (0x69 = 50%, 0x35 = 25%, 0x15 = 10%, 0x
                            0A = 5%)
                      00093 ; Default USER ID to load (2 bytes)
                      00094 UserID  code 0x8000
8000   0000           00095     dw 0x0000
                      00096 
                      00097 ; key storage 
  00009F70            00098 start_key       equ 0x9F70      ; address of logical (INDF) flash start (note flash address + 0x8000)   
                             
                      00099     org 0x1F70 ; 32 bytes to store counters and flags
1F70   0001 0002 0003 00100         de 0x01,0x02,0x03,0x04,0x05,0xF0,0xE0,0xD0, 0xC0,0xA0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF    
       0004 0005 00F0 
       00E0 00D0 00C0 
       00A0 00FF 00FF 
       00FF 00FF 00FF 
       00FF 
                      00101     
                      00102     
                      00103 ; test code for load from flash storage / test modes
  00009F80            00104 start_eeprom    equ 0x9F80      ; address of logical (INDF) flash start (note flash address + 0x8000)   
  00001F80            00105 start_eeprom_p  equ 0x1F80      ; address of physical flash start       
                      00106     org 0x1F80 ; 32 bytes to store counters and flags
                      00107 #ifdef debug
                      00108         de 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF, 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
                      00109         de 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF, 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
                      00110         ; 96 bytes to store found objects (max 768 badges)
                      00111         de 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF, 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
                      00112         de 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF, 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF     
                      00113         de 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF, 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
                      00114         de 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF, 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
                      00115         de 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF, 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
                      00116         de 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF, 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
                      00117 #else
1F80   00FF 00FF 00FF 00118         de 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF, 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
       00FF 00FF 00FF 
       00FF 00FF 00FF 
       00FF 00FF 00FF 
       00FF 00FF 00FF 
       00FF 
1F90   00FF 00FF 00FF 00119         de 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF, 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
       00FF 00FF 00FF 
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

       00FF 00FF 00FF 
       00FF 00FF 00FF 
       00FF 00FF 00FF 
       00FF 
                      00120         ; 96 bytes to store found objects (max 768 badges)
1FA0   00FF 00FF 00FF 00121         de 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF, 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
       00FF 00FF 00FF 
       00FF 00FF 00FF 
       00FF 00FF 00FF 
       00FF 00FF 00FF 
       00FF 
1FB0   00FF 00FF 00FF 00122         de 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF, 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF     
       00FF 00FF 00FF 
       00FF 00FF 00FF 
       00FF 00FF 00FF 
       00FF 00FF 00FF 
       00FF 
1FC0   00FF 00FF 00FF 00123         de 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF, 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
       00FF 00FF 00FF 
       00FF 00FF 00FF 
       00FF 00FF 00FF 
       00FF 00FF 00FF 
       00FF 
1FD0   00FF 00FF 00FF 00124         de 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF, 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
       00FF 00FF 00FF 
       00FF 00FF 00FF 
       00FF 00FF 00FF 
       00FF 00FF 00FF 
       00FF 
1FE0   00FF 00FF 00FF 00125         de 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF, 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
       00FF 00FF 00FF 
       00FF 00FF 00FF 
       00FF 00FF 00FF 
       00FF 00FF 00FF 
       00FF 
1FF0   00FF 00FF 00FF 00126         de 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF, 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF     
       00FF 00FF 00FF 
       00FF 00FF 00FF 
       00FF 00FF 00FF 
       00FF 00FF 00FF 
       00FF 
                      00127 #endif 
  00002370            00128 start_buffer            equ 0x2370      ; address of start of ram buffer in the linear address map. (IND
                            F)
  00000080            00129 buffer_length           equ d'128'      ; size of buffer
  00002370            00130 ram_status              equ 0x2370
  00002371            00131 ram_spent               equ 0x2371
  00002373            00132 ram_sickID              equ 0x2373
  00002375            00133 ram_eggID               equ 0x2375
  00002377            00134 ram_button              equ 0x2377
  0000237A            00135 ram_sleep               equ 0x237A
  0000237D            00136 ram_active              equ 0x237D
  00002380            00137 ram_hyper               equ 0x2380
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00002383            00138 ram_prego               equ 0x2383
  00002386            00139 ram_died                equ 0x2386
  00002388            00140 ram_food                equ 0x2388
  0000238A            00141 ram_poops               equ 0x238A
  0000238C            00142 ram_knocked             equ 0x238C
  0000238E            00143 ram_questID             equ 0x238E
  00002390            00144 start_buffer_objs       equ 0x2390      ; address of start of ram buffer in the linear address map. (IND
                            F)
  00000060            00145 objs_length             equ d'96'       ; number of bytes in opject buffer
                      00146                         
  00002320            00147 start_rx_buffer         equ 0x2320      ; address of start of ram buffer in the linear address map. (IND
                            F)
                      00148 
  000022D0            00149 start_spi_buffer        equ 0x22D0      ; address of start of ram buffer in the linear address map. (IND
                            F)
                      00150                 
  00000032            00151 pink_eye_limit          equ d'50'       ; if flags is greater than this value trigger pink eye          
                      00152 
                      00153 ; start of badge ID ranges
  00000000            00154 standard_badge          equ 0x0000
  00000200            00155 speaker_badge           equ 0x0200
  00000240            00156 founder_badge           equ 0x0240
  00000280            00157 vendor_badge            equ 0x0280
  000002A0            00158 outhouse                        equ 0x02A0
  000002C0            00159 snake_oil                       equ 0x02C0
  000002E0            00160 necrollamacon           equ 0x02E0
  000002EF            00161 start_button            equ 0x02EF
  000002FF            00162 vendo                           equ 0x02FF
                      00163                                 
  0000001A            00164 crypto_rounds           equ d'26'
  00000005            00165 crypto_wbytes           equ d'5'
  0000000A            00166 crypto_bbytes           equ d'10'
                      00167                                 
                      00168 ; game mech
  0000012C            00169 hyper_to_active         equ d'300'      ; seconds
  00000258            00170 active_to_sleep         equ d'600'      ; seconds
  0000002D            00171 game_tick_time          equ d'45'       ; seconds
  00000004            00172 food_hyper                      equ d'4'        ; food per tick
  00000001            00173 food_active                     equ d'1'        ; food per tick
  00000006            00174 food_hyper_sick         equ d'6'        ; food per tick
  00000002            00175 food_active_sick        equ d'2'        ; food per tick
  000000FF            00176 food_startup            equ d'255'      ; food units
  00000000            00177 poo_startup                     equ d'0'        ; poo units
  00000051            00178 food_warn                       equ d'81'       ; food units
  00000080            00179 poo_warn                        equ d'128'      ; poo units
  00000003            00180 food2poop                       equ d'3'        ; how many food units needed to create a poop 
                      00181                 
                      00182 ; LED settings
  000000FF            00183 icon_pwms                       equ 0xff        ; pwm setting for 3 icon leds
  0000001F            00184 heart_led_sleep         equ 0x1F        ; off time (in TMR0 tics minus ~4)
  0000000F            00185 heart_led_active        equ 0x0F        ; off time (in TMR0 tics minus ~4)
  00000004            00186 heart_led_hyper         equ 0x04        ; off time (in TMR0 tics minus ~4)
  000002FF            00187 LOGO_SPEED                      equ 0x2FF       ; how many mainloops before update in non uber mode     
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  000000FF            00188 POSTCON_MODE_TIME       equ 0xFF        ; how many 1/4s to wait before changing postcon display
                      00189         
                      00190 ; animation vars
  0000000D            00191 Hyr0n_animation             equ d'13'               ; last in the set
  0000000C            00192 LAST_PRE_Hyr0n_animation    equ (Hyr0n_animation - 1)
                      00193     
                      00194         
                      00195 ;------------------
                      00196 ; vars (0x20 - 0x6f) bank 0
                      00197 ;------------------
  00000020            00198 temp                    equ     0x20            ; use set or variable instead?
  00000021            00199 temp1                   equ 0x21
  00000022            00200 i2c_off                 equ 0x22
  00000023            00201 i2c_dat0                equ 0x23
  00000024            00202 seq_cnt                 equ     0x24
  00000025            00203 offset                  equ 0x25        
  00000026            00204 countL                  equ     0x26
  00000027            00205 countH                  equ 0x27
  00000028            00206 time_phase              equ     0x28
  00000029            00207 delay_downH             equ     0x29
  0000002A            00208 delay_downL             equ 0x2A
  0000002B            00209 time_passed             equ 0x2B
  0000002C            00210 badge_status    equ     0x2C            ; bit 0,1 = 0 dead, 1 sleep, 2 active, 3 hyper; bit 2 = egg led 
                            state; bit 3 = stomach led state; bit 4 = amber dir; bit 5 = red dir; bit 6 = green dir; bit 7 =
  0000002D            00211 heart_seq               equ 0x2D
  0000002E            00212 logo_r                  equ 0x2E
  0000002F            00213 logo_g                  equ 0x2F
  00000030            00214 logo_b                  equ     0x30
  00000031            00215 logo_a                  equ 0x31
  00000032            00216 LFSR_0                  equ     0x32            
  00000033            00217 LFSR_1                  equ     0x33            
  00000034            00218 LFSR_2                  equ     0x34            
  00000035            00219 LFSR_3                  equ     0x35
  00000036            00220 LFSR_count              equ     0x36    
  00000037            00221 sparkle_last    equ 0x37        
  00000038            00222 sparkle_skip    equ 0x38
  00000039            00223 badge_ctrl              equ 0x39                ; bit 0 = logo tick , bit 1 = poo led, bit 2 = postcon m
                            ode, bit 3 = egg up/down
  0000003A            00224 button_up               equ 0x3A
  0000003B            00225 food_cnt                equ     0x3B
  0000003C            00226 poo_cnt                 equ     0x3C
  0000003D            00227 game_tick               equ     0x3D    
  0000003E            00228 logo_cntL               equ 0x3E
  0000003F            00229 logo_cntH               equ 0x3F
  00000040            00230 poo_temp                equ 0x40
  00000041            00231 oLED_phase              equ     0x41
  00000042            00232 oLED_delay              equ     0x42
  00000043            00233 oLED_set                equ     0x43
  00000044            00234 oLED_dt                 equ 0x44                ; delay temp
  00000045            00235 oLED_seq_cnt    equ     0x45
  00000046            00236 oLED_seq_addr0  equ     0x46
  00000047            00237 oLED_seq_addr1  equ     0x47
  00000048            00238 oLED_seq_addr2  equ     0x48
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000049            00239 oLED_ctrl               equ     0x49            ; bit 0 = one shot start, 1 = one shot done
  0000004A            00240 oLED_last               equ     0x4A
  0000004B            00241 egg_breath              equ 0x4B                
  0000004C            00242 egg_delay               equ 0x4C        
  0000004D            00243 logo_seq                equ     0x4D            
                      00244         
                      00245         
                      00246 ;------------------
                      00247 ; vars (0xA0 - 0xef) bank 1
                      00248 ;------------------
                      00249 
                      00250 ;------------------
                      00251 ; vars (0x120 - 0x16f) bank 2
                      00252 ;------------------
  00000120            00253 ir_rx_seq               equ 0x120
  00000121            00254 ir_rx_chksum    equ 0x121               
  00000122            00255 rx_status               equ 0x122       
  00000123            00256 rx_type                 equ 0x123
  00000124            00257 rx_data_seq             equ 0x124                       
  00000125            00258 rx_idH                  equ 0x125
  00000126            00259 rx_idL                  equ 0x126
  00000127            00260 ir_tx_seq               equ 0x127               
  00000128            00261 ir_tx_chksum    equ 0x128               
  00000129            00262 tx_status               equ 0x129
  0000012A            00263 tx_type                 equ 0x12A
  0000012B            00264 badge_idL               equ 0x12B
  0000012C            00265 badge_idH               equ 0x12C       
  0000012D            00266 ir_offset               equ 0x12D
  0000012E            00267 ir_temp                 equ 0x12E
  0000012F            00268 ir_temp1                equ 0x12F
  00000130            00269 tx_data                 equ 0x130               
  00000131            00270 tx_delay                equ 0x131
  00000132            00271 tx_delay2               equ 0x132       
  00000133            00272 loop_i                  equ 0x133
  00000134            00273 k0                              equ 0x134
  00000135            00274 loop_j                  equ 0x135
  00000136            00275 crypt_cnt               equ 0x136               
  00000137            00276 c0                              equ 0x137
  00000138            00277 ak                              equ 0x138
  00000139            00278 ak1                             equ 0x139
  0000013A            00279 ak2                             equ 0x13A
  0000013B            00280 ak3                             equ 0x13B
  0000013C            00281 ac                              equ 0x13C
  0000013D            00282 ac1                             equ 0x13D
  0000013E            00283 ac2                             equ 0x13E
  0000013F            00284 ac3                             equ 0x13F                                               
  00000140            00285 temp_key0               set 0x140               
  00000141            00286 temp_key1               equ 0x141               
  00000142            00287 temp_key2               equ 0x142               
  00000143            00288 temp_key3               equ 0x143               
  00000144            00289 temp_key4               equ 0x144               
  00000145            00290 temp_key5               equ 0x145               
  00000146            00291 temp_key6               equ 0x146               
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000147            00292 temp_key7               equ 0x147               
  00000148            00293 temp_key8               equ 0x148               
  00000149            00294 temp_key9               equ 0x149
  0000014A            00295 onceH                   equ     0x14A           
  0000014B            00296 onceL                   equ     0x14B   
  0000014C            00297 Hyr0nH                  equ     0x14C
  0000014D            00298 Hyr0nL                  equ     0x14D
                      00299                         
  00000150            00300 temp_crypt0             set 0x150               
  00000151            00301 temp_crypt1             equ 0x151               
  00000152            00302 temp_crypt2             equ 0x152               
  00000153            00303 temp_crypt3             equ 0x153               
  00000154            00304 temp_crypt4             equ 0x154               
  00000155            00305 temp_crypt5             equ 0x155               
  00000156            00306 temp_crypt6             equ 0x156               
  00000157            00307 temp_crypt7             equ 0x157               
  00000158            00308 temp_crypt8             equ 0x158               
  00000159            00309 temp_crypt9             equ 0x159
                      00310                 
                      00311                 
                      00312 ;------------------
                      00313 ; vars (0x1A0 - 0x1ef) bank 3
                      00314 ;------------------
                      00315 
                      00316 ;------------------
                      00317 ; vars (0x220 - 0x26f) bank 4
                      00318 ;------------------
                      00319 
                      00320 ;------------------
                      00321 ; vars (0x2A0 - 02xef) bank 5
                      00322 ;------------------
                      00323 
                      00324 ;------------------
                      00325 ; vars (0x320 - 0x32F) bank 6 
                      00326 ;------------------
                      00327                 
                      00328 ;------------------
                      00329 ; vars (0x70 - 0x7F) global regs
                      00330 ;------------------
  00000070            00331 g_temp                  equ 0x70
  00000071            00332 g_flags                 equ 0x71                ; bit 0 = update flash, bit 1 = force stomach off, bit 2
                             = force poo off, bit 3 = enable TX delay, bit 4 = Hyron badge ID set, bit 5 = undead
  00000072            00333 current_bsr             equ 0x72                        
  00000073            00334 delay_cnt               equ 0x73
                      00335                 
                      00336                 
                      00337 
                      00338 
                      00339                 
                      00340                 
                      00341                         
                      00342 ;put the following at address 0000h
                      00343         org     0000h
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0000   2???           00344         goto    START                       ;vector to initialization sequence
                      00345 
                      00346 ;#######################################################################################################
                            ####################
                      00347 ; intrupt routine
                      00348 ;#######################################################################################################
                            ####################
                      00349         ;put the following at address 0004h
                      00350         org     0004h   
                      00351         ; following regs are autosaved
                      00352         ; W
                      00353         ; STATUS (except TO and PD)
                      00354         ; BSR
                      00355         ; FSR
                      00356         ; PCLATH
                      00357 
                      00358         
0004   3180           00359         movlp   0x00                            ; clear out the PCLATH so jumps in the IRQ do not go to 
                            la la land... 
                      00360         
                      00361         ;******************************************************************
                      00362         ; check if TMR0 IRQ
                      00363         ;******************************************************************
                      00364         ;------------------
0005   014E           00365         movlb   d'14'
                      00366         ;------------------     
0006   1E8C           00367         btfss   PIR0, TMR0IF
0007   2???           00368         goto    IRQ_not_TMR0
0008   128C           00369         bcf             PIR0, TMR0IF
                      00370 
                      00371         ; if the delay_cnt is not 0 subtract 1
0009   08F3           00372         movf    delay_cnt, F
000A   1D03           00373         btfss   STATUS, Z
000B   03F3           00374         decf    delay_cnt, F
                      00375         
                      00376         ;------------------
000C   0140           00377         movlb   d'0'
                      00378         ;------------------     
000D   1439           00379         bsf     badge_ctrl, 0                   ; set the badge tick bit (used for logo timeing) 
                      00380         ; break down the sub time tics into slower units of S
000E   3001           00381         movlw   0x01
000F   02A8           00382         subwf   time_phase, F                   ; f - W, C = 0 if W > f, C = 1 if W <= f
0010   1D03           00383         btfss   STATUS, Z
0011   2???           00384         goto    IRQ_not_TMR0
                      00385         ; reset this counter for the next cycle
0012   3004           00386         movlw   0x04
0013   00A8           00387         movwf   time_phase
                      00388         
                      00389         ; update reg used for running counter updates
0014   0AAB           00390         incf    time_passed, F
                      00391         
                      00392         ; dec game timer
0015   083D           00393         movf    game_tick, W
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0016   1903           00394         btfsc   STATUS,Z
0017   2???           00395         goto    IRQ_TMR0_skip_game_tick
0018   03BD           00396         decf    game_tick, F
0019                  00397 IRQ_TMR0_skip_game_tick
                      00398         
                      00399         ; dec the downshift counter if running. 
                      00400         ; if already zero do nothing
0019   0829           00401         movf    delay_downH, W
001A   1D03           00402         btfss   STATUS,Z
001B   2???           00403         goto    IRQ_TMR0_sub_down
001C   082A           00404         movf    delay_downL, W
001D   1903           00405         btfsc   STATUS,Z
001E   2???           00406         goto    IRQ_not_TMR0
001F                  00407 IRQ_TMR0_sub_down       
                      00408         ; maths 
001F   3001           00409         movlw   0x01
0020   02AA           00410         subwf   delay_downL, F                  ; f - W, C = 0 if W > f, C = 1 if W <= f        
0021   1C03           00411         btfss   STATUS, C
0022   03A9           00412         decf    delay_downH, F
0023                  00413 IRQ_not_TMR0    
                      00414 
                      00415         ;******************************************************************
                      00416         ; check if TMR1 IRQ
                      00417         ;******************************************************************
                      00418         ;------------------
0023   014E           00419         movlb   d'14'
                      00420         ;------------------     
0024   1C10           00421         btfss   PIR4, TMR1IF
0025   2???           00422         goto    IRQ_not_TMR1
0026   1010           00423         bcf             PIR4, TMR1IF
                      00424         ;------------------
0027   0140           00425         movlb   d'0'
                      00426         ;------------------     
                      00427         ; if oLED_delay is zero do nothing. 
0028   0842           00428         movf    oLED_delay, W
0029   1903           00429         btfsc   STATUS, Z
002A   2???           00430         goto    IRQ_not_TMR1_oLED
                      00431         ; if timer is running and oLED_phase = 0 set it back to the roll over value 
002B   0841           00432         movf    oLED_phase, W
002C   3003           00433         movlw   0x03                            ; movw does not affect status
002D   1903           00434         btfsc   STATUS, Z
002E   00C1           00435         movwf   oLED_phase
002F   0BC1           00436         decfsz  oLED_phase, F
0030   2???           00437         goto    IRQ_not_TMR1_oLED
0031   03C2           00438         decf    oLED_delay, F   
0032                  00439 IRQ_not_TMR1_oLED
                      00440         
0032   084C           00441         movf    egg_delay, W
0033   1903           00442         btfsc   STATUS, Z
0034   2???           00443         goto    IRQ_not_TMR1_egg
0035   03CC           00444         decf    egg_delay, F
0036                  00445 IRQ_not_TMR1_egg        
0036                  00446 IRQ_not_TMR1            
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00447 
                      00448         ;******************************************************************
                      00449         ; check if RX1 IRQ
                      00450         ;******************************************************************
                      00451         ;------------------
0036   014E           00452         movlb   d'14'
                      00453         ;------------------     
0037   1E8F           00454         btfss   PIR3, RC1IF                     ; check if IRQ is currently set
0038   2???           00455         goto    IRQ_not_RX1
                      00456         ;------------------
0039   0142           00457         movlb   d'2'
                      00458         ;------------------
003A   1D1D           00459         btfss   RC1STA, FERR
003B   2???           00460         goto    IRQ_RX1_no_FERR
003C   0819           00461         movf    RC1REG, W                       ; read the reg to pop the bad byte off the stack
003D   2???           00462         goto    IRQ_not_RX1
003E                  00463 IRQ_RX1_no_FERR
003E   1C9D           00464         btfss   RC1STA, OERR
003F   2???           00465         goto    IRQ_RX1_no_OERR
0040   121D           00466         bcf             RC1STA, CREN            ; disable and enable CREN to clear OERR 
0041   161D           00467         bsf             RC1STA, CREN            
0042   2???           00468         goto    IRQ_not_RX1
0043                  00469 IRQ_RX1_no_OERR         
                      00470         ; header check
0043   0820           00471         movf    ir_rx_seq, W
0044   1D03           00472         btfss   STATUS, Z
0045   2???           00473         goto    IRQ_RX1_sq1
0046   0819           00474         movf    RC1REG, W
0047   3A53           00475         xorlw   0x53                            ; S
0048   1D03           00476         btfss   STATUS, Z
0049   2???           00477         goto    IRQ_RX1_bad
004A   0AA0           00478         incf    ir_rx_seq, F
004B   2???           00479         goto    IRQ_not_RX1
004C                  00480 IRQ_RX1_sq1             
004C   0820           00481         movf    ir_rx_seq, W
004D   3A01           00482         xorlw   0x01
004E   1D03           00483         btfss   STATUS, Z
004F   2???           00484         goto    IRQ_RX1_sq2
0050   0819           00485         movf    RC1REG, W
0051   3A6D           00486         xorlw   0x6D                            ; m
0052   1D03           00487         btfss   STATUS, Z
0053   2???           00488         goto    IRQ_RX1_bad
0054   0AA0           00489         incf    ir_rx_seq, F
0055   2???           00490         goto    IRQ_not_RX1
0056                  00491 IRQ_RX1_sq2     
0056   0820           00492         movf    ir_rx_seq, W
0057   3A02           00493         xorlw   0x02
0058   1D03           00494         btfss   STATUS, Z
0059   2???           00495         goto    IRQ_RX1_sq3
005A   0819           00496         movf    RC1REG, W
005B   3A61           00497         xorlw   0x61                            ; a
005C   1D03           00498         btfss   STATUS, Z
005D   2???           00499         goto    IRQ_RX1_bad
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

005E   0AA0           00500         incf    ir_rx_seq, F
005F   2???           00501         goto    IRQ_not_RX1
0060                  00502 IRQ_RX1_sq3
0060   0820           00503         movf    ir_rx_seq, W
0061   3A03           00504         xorlw   0x03
0062   1D03           00505         btfss   STATUS, Z
0063   2???           00506         goto    IRQ_RX1_sq4
0064   0819           00507         movf    RC1REG, W
0065   3A73           00508         xorlw   0x73                            ; s
0066   1D03           00509         btfss   STATUS, Z
0067   2???           00510         goto    IRQ_RX1_bad
0068   0AA0           00511         incf    ir_rx_seq, F
0069   2???           00512         goto    IRQ_not_RX1
006A                  00513 IRQ_RX1_sq4
006A   0820           00514         movf    ir_rx_seq, W
006B   3A04           00515         xorlw   0x04
006C   1D03           00516         btfss   STATUS, Z
006D   2???           00517         goto    IRQ_RX1_sq5
006E   0819           00518         movf    RC1REG, W
006F   3A68           00519         xorlw   0x68                            ; h
0070   1D03           00520         btfss   STATUS, Z
0071   2???           00521         goto    IRQ_RX1_bad
0072   0AA0           00522         incf    ir_rx_seq, F
0073   2???           00523         goto    IRQ_not_RX1
0074                  00524 IRQ_RX1_sq5
0074   0820           00525         movf    ir_rx_seq, W
0075   3A05           00526         xorlw   0x05
0076   1D03           00527         btfss   STATUS, Z
0077   2???           00528         goto    IRQ_RX1_sq6
0078   0819           00529         movf    RC1REG, W
0079   3A3F           00530         xorlw   0x3f                            ; ?
007A   1D03           00531         btfss   STATUS, Z
007B   2???           00532         goto    IRQ_RX1_bad
007C   0AA0           00533         incf    ir_rx_seq, F
007D   303B           00534         movlw   0x3B                            ; S,m,a,s,h,? chars
007E   00A1           00535         movwf   ir_rx_chksum    
007F   2???           00536         goto    IRQ_not_RX1
0080                  00537 IRQ_RX1_sq6
                      00538         ; status byte
0080   0820           00539         movf    ir_rx_seq, W
0081   3A06           00540         xorlw   0x06
0082   1D03           00541         btfss   STATUS, Z
0083   2???           00542         goto    IRQ_RX1_sq7
0084   0819           00543         movf    RC1REG, W
0085   00A2           00544         movwf   rx_status
0086   07A1           00545         addwf   ir_rx_chksum, F
0087   0AA0           00546         incf    ir_rx_seq, F
0088   2???           00547         goto    IRQ_not_RX1
0089                  00548 IRQ_RX1_sq7     
                      00549         ; type byte
0089   0820           00550         movf    ir_rx_seq, W
008A   3A07           00551         xorlw   0x07
008B   1D03           00552         btfss   STATUS, Z
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

008C   2???           00553         goto    IRQ_RX1_sq8
008D   0819           00554         movf    RC1REG, W
008E   00A3           00555         movwf   rx_type
008F   07A1           00556         addwf   ir_rx_chksum, F
0090   0AA0           00557         incf    ir_rx_seq, F
0091   0823           00558         movf    rx_type, W
0092   1D03           00559         btfss   STATUS, Z
0093   2???           00560         goto    IRQ_RX1_type0_len
0094   01A4           00561         clrf    rx_data_seq                     ; type 0 has no data
0095   2???           00562         goto    IRQ_not_RX1
0096                  00563 IRQ_RX1_type0_len
0096   0823           00564         movf    rx_type, W
0097   3A01           00565         xorlw   0x01
0098   1D03           00566         btfss   STATUS, Z
0099   2???           00567         goto    IRQ_RX1_type1_len
009A   01A4           00568         clrf    rx_data_seq                     ; type 1 has no data
009B   2???           00569         goto    IRQ_not_RX1
009C                  00570 IRQ_RX1_type1_len       
                      00571 ;       movf    rx_type, W
                      00572 ;       xorlw   0x02
                      00573 ;       btfss   STATUS, Z
                      00574 ;       goto    IRQ_RX1_type2_len
                      00575 ;       movlw   d'134'
                      00576 ;       movwf   rx_data_seq                     ; type 2 has 134 bytes of data
                      00577 ;       goto    IRQ_RX1_inc_seq
                      00578 ;IRQ_RX1_type2_len      
009C   0823           00579         movf    rx_type, W
009D   3A03           00580         xorlw   0x03
009E   1D03           00581         btfss   STATUS, Z
009F   2???           00582         goto    IRQ_RX1_type3_len
00A0   300A           00583         movlw   0x0A
00A1   00A4           00584         movwf   rx_data_seq                     ; type 3 has 10 bytes of data
00A2   2???           00585         goto    IRQ_not_RX1
00A3                  00586 IRQ_RX1_type3_len       
                      00587 ;       movf    rx_type, W
                      00588 ;       xorlw   0x04
                      00589 ;       btfss   STATUS, Z
                      00590 ;       goto    IRQ_RX1_type4_len
                      00591 ;       movlw   0x0A
                      00592 ;       movwf   rx_data_seq                     ; type 4 has 10 bytes of data
                      00593 ;       goto    IRQ_not_RX1
                      00594 ;IRQ_RX1_type4_len              
00A3   0823           00595         movf    rx_type, W
00A4   3A05           00596         xorlw   0x05
00A5   1D03           00597         btfss   STATUS, Z
00A6   2???           00598         goto    IRQ_RX1_type5_len
00A7   3002           00599         movlw   0x02
00A8   00A4           00600         movwf   rx_data_seq                     ; type 5 has 2 bytes of data
00A9   2???           00601         goto    IRQ_not_RX1
00AA                  00602 IRQ_RX1_type5_len       
00AA   0823           00603         movf    rx_type, W
00AB   3A06           00604         xorlw   0x06
00AC   1D03           00605         btfss   STATUS, Z
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00AD   2???           00606         goto    IRQ_RX1_type6_len
00AE   3002           00607         movlw   0x02
00AF   00A4           00608         movwf   rx_data_seq                     ; type 6 has 2 bytes of data
00B0   2???           00609         goto    IRQ_not_RX1
00B1                  00610 IRQ_RX1_type6_len       
00B1   0823           00611         movf    rx_type, W
00B2   3A07           00612         xorlw   0x07
00B3   1D03           00613         btfss   STATUS, Z
00B4   2???           00614         goto    IRQ_RX1_type7_len
00B5   3003           00615         movlw   0x03
00B6   00A4           00616         movwf   rx_data_seq                     ; type 7 has 3 bytes of data
00B7   2???           00617         goto    IRQ_not_RX1
00B8                  00618 IRQ_RX1_type7_len       
                      00619 ;       movf    rx_type, W
                      00620 ;       xorlw   0x08
                      00621 ;       btfss   STATUS, Z
                      00622 ;       goto    IRQ_RX1_type8_len
                      00623 ;       movlw   0x03
                      00624 ;       movwf   rx_data_seq                     ; type 8 has 1 bytes of data
                      00625 ;       goto    IRQ_not_RX1
                      00626 ;IRQ_RX1_type8_len              
00B8   0823           00627         movf    rx_type, W
00B9   3A09           00628         xorlw   0x09
00BA   1D03           00629         btfss   STATUS, Z
00BB   2???           00630         goto    IRQ_RX1_type9_len
00BC   3004           00631         movlw   0x04
00BD   00A4           00632         movwf   rx_data_seq                     ; type 9 has 4 bytes of data
00BE   2???           00633         goto    IRQ_not_RX1
00BF                  00634 IRQ_RX1_type9_len       
00BF   0823           00635         movf    rx_type, W
00C0   3A0A           00636         xorlw   0x0A
00C1   1D03           00637         btfss   STATUS, Z
00C2   2???           00638         goto    IRQ_RX1_typeA_len
00C3   3002           00639         movlw   0x02
00C4   00A4           00640         movwf   rx_data_seq                     ; type A has 2 bytes of data
00C5   2???           00641         goto    IRQ_not_RX1
00C6                  00642 IRQ_RX1_typeA_len       
00C6   0823           00643         movf    rx_type, W
00C7   3A0B           00644         xorlw   0x0B
00C8   1D03           00645         btfss   STATUS, Z
00C9   2???           00646         goto    IRQ_RX1_typeB_len
00CA   3002           00647         movlw   0x02
00CB   00A4           00648         movwf   rx_data_seq                     ; type B has 2 bytes of data
00CC   2???           00649         goto    IRQ_not_RX1
00CD                  00650 IRQ_RX1_typeB_len       
00CD   0823           00651         movf    rx_type, W
00CE   3A0C           00652         xorlw   0x0C
00CF   1D03           00653         btfss   STATUS, Z
00D0   2???           00654         goto    IRQ_RX1_typeC_len
00D1   01A4           00655         clrf    rx_data_seq                     ; type C has no data
00D2   2???           00656         goto    IRQ_not_RX1
00D3                  00657 IRQ_RX1_typeC_len       
                      00658         
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00D3   0823           00659         movf    rx_type, W
00D4   3ADE           00660         xorlw   0xde
00D5   1D03           00661         btfss   STATUS, Z
00D6   2???           00662         goto    IRQ_RX1_typeDE_len
00D7   3004           00663         movlw   0x04
00D8   00A4           00664         movwf   rx_data_seq                     ; type de has 4 bytes of data
00D9   2???           00665         goto    IRQ_not_RX1
00DA                  00666 IRQ_RX1_typeDE_len      
                      00667         
00DA   2???           00668         goto    IRQ_RX1_bad                     ; all other values are invalid 
                      00669         
00DB                  00670 IRQ_RX1_sq8     
                      00671         ; ID bytes
00DB   0820           00672         movf    ir_rx_seq, W
00DC   3A08           00673         xorlw   0x08
00DD   1D03           00674         btfss   STATUS, Z
00DE   2???           00675         goto    IRQ_RX1_sq9
00DF   0819           00676         movf    RC1REG, W
00E0   00A5           00677         movwf   rx_idH
00E1   07A1           00678         addwf   ir_rx_chksum, F
00E2   0AA0           00679         incf    ir_rx_seq, F
00E3   2???           00680         goto    IRQ_not_RX1
00E4                  00681 IRQ_RX1_sq9
00E4   0820           00682         movf    ir_rx_seq, W
00E5   3A09           00683         xorlw   0x09
00E6   1D03           00684         btfss   STATUS, Z
00E7   2???           00685         goto    IRQ_RX1_sq10
00E8   0819           00686         movf    RC1REG, W
00E9   00A6           00687         movwf   rx_idL
00EA   07A1           00688         addwf   ir_rx_chksum, F
00EB   0AA0           00689         incf    ir_rx_seq, F
                      00690         ; check if this is a echo from this badge if so drop it like it is hot. 
00EC   0825           00691         movf    rx_idH, W
00ED   062C           00692         xorwf   badge_idH, W
00EE   1D03           00693         btfss   STATUS, Z
00EF   2???           00694         goto    IRQ_not_RX1
00F0   0826           00695         movf    rx_idL, W
00F1   062B           00696         xorwf   badge_idL, W
00F2   1D03           00697         btfss   STATUS, Z
00F3   2???           00698         goto    IRQ_not_RX1
00F4   2???           00699         goto    IRQ_RX1_bad
00F5                  00700 IRQ_RX1_sq10
                      00701         ; read in data bytes based on type
00F5   0820           00702         movf    ir_rx_seq, W
00F6   3A0A           00703         xorlw   0x0A
00F7   1D03           00704         btfss   STATUS, Z
00F8   2???           00705         goto    IRQ_RX1_sq11
00F9   0824           00706         movf    rx_data_seq, W
00FA   1903           00707         btfsc   STATUS, Z
00FB   2???           00708         goto    IRQ_RX1_sq10_skip
00FC   3023           00709         movlw   high(start_rx_buffer)   
00FD   0087           00710         movwf   FSR1H
00FE   3020           00711         movlw   low(start_rx_buffer)
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00FF   0724           00712         addwf   rx_data_seq, W
0100   0086           00713         movwf   FSR1L   
0101   0386           00714         decf    FSR1L, F
                      00715         ; NOTE register alignment is such that it should never roll the upper byte
0102   0819           00716         movf    RC1REG, W
0103   0081           00717         movwf   INDF1
0104   07A1           00718         addwf   ir_rx_chksum, F
0105   0BA4           00719         decfsz  rx_data_seq, F
0106   2???           00720         goto    IRQ_not_RX1
0107   0AA0           00721         incf    ir_rx_seq, F    
0108   2???           00722         goto    IRQ_not_RX1
0109                  00723 IRQ_RX1_sq10_skip
0109   0AA0           00724         incf    ir_rx_seq, F
010A                  00725 IRQ_RX1_sq11
                      00726         ; validate checksum
010A   0820           00727         movf    ir_rx_seq, W
010B   3A0B           00728         xorlw   0x0B
010C   1D03           00729         btfss   STATUS, Z
010D   2???           00730         goto    IRQ_RX1_bad                     ; packet out of seq somehow
010E   0819           00731         movf    RC1REG, W
010F   07A1           00732         addwf   ir_rx_chksum, F
0110   0821           00733         movf    ir_rx_chksum, W
0111   1D03           00734         btfss   STATUS, Z                       ; if the checksum result is 0 all is good. 
0112   2???           00735         goto    IRQ_RX1_bad
                      00736         
                      00737         
                      00738         
                      00739         ;------------------------------------------------------------------------
                      00740         ; Weird packets (id out of range like badge reset) 
                      00741         ;------------------------------------------------------------------------
                      00742         ; clear badge ram
0113   0823           00743         movf    rx_type, W
0114   3ADE           00744         xorlw   0xDE
0115   1D03           00745         btfss   STATUS, Z
0116   2???           00746         goto    IRQ_RX1_no_clear
0117   0825           00747         movf    rx_idH, W
0118   3AAD           00748         xorlw   0xAD
0119   1D03           00749         btfss   STATUS, Z
011A   2???           00750         goto    IRQ_RX1_no_clear
011B   0826           00751         movf    rx_idL, W
011C   3ABE           00752         xorlw   0xBE
011D   1D03           00753         btfss   STATUS, Z
011E   2???           00754         goto    IRQ_RX1_no_clear
011F   3023           00755         movlw   high(start_rx_buffer)   
0120   0087           00756         movwf   FSR1H
0121   3020           00757         movlw   low(start_rx_buffer)
0122   0086           00758         movwf   FSR1L
0123   0016           00759         moviw   FSR1++
0124   3AA2           00760         xorlw   0xA2
0125   1D03           00761         btfss   STATUS, Z
0126   2???           00762         goto    IRQ_RX1_no_clear
0127   0016           00763         moviw   FSR1++
0128   3AD6           00764         xorlw   0xD6
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0129   1D03           00765         btfss   STATUS, Z
012A   2???           00766         goto    IRQ_RX1_no_clear
012B   0016           00767         moviw   FSR1++
012C   3A29           00768         xorlw   0x29
012D   1D03           00769         btfss   STATUS, Z
012E   2???           00770         goto    IRQ_RX1_no_clear
012F   0016           00771         moviw   FSR1++
0130   3AEF           00772         xorlw   0xEF
0131   1D03           00773         btfss   STATUS, Z
0132   2???           00774         goto    IRQ_RX1_no_clear
                      00775         
0133   3023           00776         movlw   high(start_buffer)
0134   0085           00777         movwf   FSR0H                           ; address of first ram reg
0135   3070           00778         movlw   low(start_buffer)
0136   0084           00779         movwf   FSR0L   
0137   3080           00780         movlw   buffer_length
0138   00AE           00781         movwf   ir_temp
0139                  00782 IRQ_RX1_clear_loop
0139   30FF           00783         movlw   0xFF
013A   001A           00784         movwi   FSR0++
013B   0BAE           00785         decfsz  ir_temp, F
013C   2???           00786         goto    IRQ_RX1_clear_loop
                      00787         ; indicate that this needs to be saved on next mainloop. 
013D   1471           00788         bsf             g_flags, 0              
                      00789         ;------------------
013E   0140           00790         movlb   d'0'
                      00791         ;------------------
013F   01AC           00792         clrf    badge_status
0140   01BB           00793         clrf    food_cnt
0141   01BC           00794         clrf    poo_cnt
0142   01C0           00795         clrf    poo_temp
                      00796         ; CFG add other state / game counter updates here for badge clear
                      00797         ;------------------
0143   0142           00798         movlb   d'2'
                      00799         ;------------------     
                      00800         
                      00801         
0144                  00802 IRQ_RX1_no_clear        
                      00803         
                      00804         
                      00805         ; verify if badge ID is in range (breaks many things otherwise
0144   0825           00806         movf    rx_idH, W
0145   3C03           00807         sublw   0x03                    ; k - W, C = 0 if W > k, C = 1 if W <= k        
0146   1C03           00808         btfss   STATUS, C
0147   2???           00809         goto    IRQ_RX1_bad
0148   1903           00810         btfsc   STATUS, Z
0149   2???           00811         goto    IRQ_RX1_bad
                      00812         ;------------------------------------------------------------------------
                      00813         ; stuff always valid (con start packet)
                      00814         ;------------------------------------------------------------------------
                      00815         
                      00816         ; HBDH set packet
014A   0823           00817         movf    rx_type, W
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

014B   3A05           00818         xorlw   0x05
014C   1D03           00819         btfss   STATUS, Z
014D   2???           00820         goto    IRQ_RX1_not_HBDH                
014E   3023           00821         movlw   high(start_rx_buffer)   
014F   0087           00822         movwf   FSR1H
0150   3020           00823         movlw   low(start_rx_buffer)
0151   0086           00824         movwf   FSR1L
0152   0016           00825         moviw   FSR1++
0153   00CD           00826         movwf   Hyr0nL  
0154   0016           00827         moviw   FSR1++
0155   00CC           00828         movwf   Hyr0nH
0156   1671           00829         bsf             g_flags, 4                      ; bit 0 = update flash, bit 1 = force stomach of
                            f, bit 2 = force poo off, bit 3 = enable TX delay; bit 4 = Hyron badge ID set   
0157                  00830 IRQ_RX1_not_HBDH        
                      00831         
                      00832         
                      00833         ; check if Hyr0n
0157   1E71           00834         btfss   g_flags, 4                      ; bit 0 = update flash, bit 1 = force stomach off, bit 2
                             = force poo off, bit 3 = enable TX delay; bit 4 = Hyron badge ID set   
0158   2???           00835         goto    IRQ_RX1_not_Hyr0n
0159   0825           00836         movf    rx_idH, W
015A   064C           00837         xorwf   Hyr0nH, W
015B   1D03           00838         btfss   STATUS, Z
015C   2???           00839         goto    IRQ_RX1_not_Hyr0n
015D   0826           00840         movf    rx_idL, W
015E   064D           00841         xorwf   Hyr0nL, W
015F   1D03           00842         btfss   STATUS, Z
0160   2???           00843         goto    IRQ_RX1_not_Hyr0n
                      00844         ; set animation 
                      00845         ;------------------
0161   0140           00846         movlb   d'0'
                      00847         ;------------------     
0162   0849           00848         movf    oLED_ctrl, W
0163   3903           00849         andlw   0x03
0164   1D03           00850         btfss   STATUS, Z
0165   2???           00851         goto    IRQ_RX1_not_Hyr0n_norm
0166   0843           00852         movf    oLED_set, W
0167   00CA           00853         movwf   oLED_last       
0168                  00854 IRQ_RX1_not_Hyr0n_norm  
0168   1449           00855         bsf             oLED_ctrl, 0                    ; bit 0 = one shot start, 1 = one shot done
0169   300D           00856         movlw   Hyr0n_animation
016A   00C3           00857         movwf   oLED_set                                ; new set to move to 
016B   01C2           00858         clrf    oLED_delay                              ; stop the counter update first then clear the i
                            nternal phase
016C   01C1           00859         clrf    oLED_phase
016D   01C5           00860         clrf    oLED_seq_cnt    
                      00861         ;------------------
016E   0142           00862         movlb   d'2'
                      00863         ;------------------     
                      00864 
016F   3023           00865         movlw   high(ram_status)        ;  bit 7 0 = dead, bit 6 0 = uber on, bit 5 0 = quest done, bit 
                            4 0 = quest start, bit 3 = 0 has egg, bit 2 = 0 is cured, bit 1 = 0 has pink eye, bit 0 = 0 con 
0170   0087           00866         movwf   FSR1H
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0171   3070           00867         movlw   low(ram_status)
0172   0086           00868         movwf   FSR1L   
0173   1B81           00869         btfsc   INDF1, 7
0174   2???           00870         goto    IRQ_RX1_not_Hyr0n
0175   1781           00871         bsf             INDF1, 7                        ; set badge back to alive
                      00872         ;------------------
0176   0140           00873         movlb   d'0'
                      00874         ;------------------
                      00875         ; set animation 
0177   3006           00876         movlw   0x06
0178   00CA           00877         movwf   oLED_last                               ; new set to move to 
0179   0801           00878         movf    INDF1, W                                ;  bit 7 0 = dead, bit 6 0 = uber on, bit 5 0 = 
                            quest done, bit 4 0 = quest start, bit 3 = 0 has egg, bit 2 = 0 is cured, bit 1 = 0 has pink eye
017A   3906           00879         andlw   0x06
017B   3A04           00880         xorlw   0x04                                    ; check if badge has pink eye but has not been c
                            ured yet. 
017C   1903           00881         btfsc   STATUS, Z
017D   0ACA           00882         incf    oLED_last, F
                      00883         
017E   3002           00884         movlw   0x02                            ; Set initial condition of the badge on con start to act
                            ive as it will instantly pop to sleeping since delay counters are cleared. 
017F   00AC           00885         movwf   badge_status
0180   01A9           00886         clrf    delay_downH
0181   01AA           00887         clrf    delay_downL
0182   30FF           00888         movlw   food_startup
0183   00BB           00889         movwf   food_cnt
0184   3000           00890         movlw   poo_startup
0185   00BC           00891         movwf   poo_cnt
0186   00C0           00892         movwf   poo_temp
                      00893         ; CFG add other state / game counter updates here on res
                      00894         ;------------------
0187   0142           00895         movlb   d'2'
                      00896         ;------------------             
                      00897         ; indicate that this needs to be saved on next mainloop. 
0188   1471           00898         bsf             g_flags, 0      ; bit 0 = update flash, bit 1 = force stomach off, bit 2 = force
                             poo off
0189   14F1           00899         bsf             g_flags, 1      ; bit 0 = update flash, bit 1 = force stomach off, bit 2 = force
                             poo off
018A   1571           00900         bsf             g_flags, 2      ; bit 0 = update flash, bit 1 = force stomach off, bit 2 = force
                             poo off
                      00901         
018B                  00902 IRQ_RX1_not_Hyr0n
                      00903         
                      00904         
                      00905         
                      00906         ; con start check
018B   3023           00907         movlw   high(ram_status)        ;  bit 7 0 = dead, bit 6 0 = uber on, bit 5 0 = quest done, bit 
                            4 0 = quest start, bit 3 = 0 has egg, bit 2 = 0 is cured, bit 1 = 0 has pink eye, bit 0 = 0 con 
018C   0087           00908         movwf   FSR1H
018D   3070           00909         movlw   low(ram_status)
018E   0086           00910         movwf   FSR1L   
018F   1C22           00911         btfss   rx_status, 0            ; con start bit
0190   2???           00912         goto    IRQ_RX1_no_con_start
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0191   1C01           00913         btfss   INDF1, 0                        ; check if con has already started if so skip (saves eep
                            rom writes)
0192   2???           00914         goto    IRQ_RX1_no_con_start    
0193   1001           00915         bcf             INDF1, 0
                      00916         ;------------------
0194   0140           00917         movlb   d'0'
                      00918         ;------------------
0195   3002           00919         movlw   0x02                            ; Set initial condition of the badge on con start to act
                            ive as it will instantly pop to sleeping since delay counters are cleared. 
0196   00AC           00920         movwf   badge_status
0197   01A9           00921         clrf    delay_downH
0198   01AA           00922         clrf    delay_downL
0199   30FF           00923         movlw   food_startup
019A   00BB           00924         movwf   food_cnt
019B   3000           00925         movlw   poo_startup
019C   00BC           00926         movwf   poo_cnt
019D   00C0           00927         movwf   poo_temp
                      00928         ; CFG add other state / game counter updates here for start of con. 
                      00929         ;------------------
019E   0142           00930         movlb   d'2'
                      00931         ;------------------     
                      00932         ; indicate that this needs to be saved on next mainloop. 
019F   1471           00933         bsf             g_flags, 0      
01A0                  00934 IRQ_RX1_no_con_start    
                      00935 
                      00936         
                      00937         ; check packet is from Vendo else ignore
01A0   0825           00938         movf    rx_idH, W
01A1   3A02           00939         xorlw   0x02
01A2   1D03           00940         btfss   STATUS, Z
01A3   2???           00941         goto    IRQ_RX1_not_vendo
01A4   0826           00942         movf    rx_idL, W
01A5   3AFF           00943         xorlw   0xFF
01A6   1D03           00944         btfss   STATUS, Z
01A7   2???           00945         goto    IRQ_RX1_not_vendo
                      00946         
                      00947         
                      00948         ; check if this is a dump request 
01A8   0823           00949         movf    rx_type, W
01A9   3A01           00950         xorlw   0x01
01AA   1D03           00951         btfss   STATUS, Z
01AB   2???           00952         goto    IRQ_RX1_not_type1       
                      00953         ;------------------
01AC   014E           00954         movlb   d'14'
                      00955         ;------------------     
01AD   1A19           00956         btfsc   PIE3, TX1IE                             ; make sure TX routine is NOT already running. 
01AE   2???           00957         goto    IRQ_RX1_not_type1
                      00958         ;------------------
01AF   0142           00959         movlb   d'2'
                      00960         ;------------------     
01B0   01A7           00961         clrf    ir_tx_seq
01B1   01A8           00962         clrf    ir_tx_chksum
                      00963         ; status updated other places just flow it here
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01B2   3002           00964         movlw   0x02
01B3   00AA           00965         movwf   tx_type         
01B4   15F1           00966         bsf             g_flags, 3                              ; bit 0 = update flash, bit 1 = force st
                            omach off, bit 2 = force poo off, bit 3 = enable TX delay
                      00967         ;------------------
01B5   014E           00968         movlb   d'14'
                      00969         ;------------------     
01B6   1619           00970         bsf     PIE3, TX1IE                             ; enable Uart2 transmit IRQ                     
01B7                  00971 IRQ_RX1_not_type1
                      00972         ;------------------
01B7   0142           00973         movlb   d'2'
                      00974         ;------------------     
                      00975         
                      00976         ; check if this is a credit request
01B8   0823           00977         movf    rx_type, W
01B9   3A03           00978         xorlw   0x03
01BA   1D03           00979         btfss   STATUS, Z
01BB   2???           00980         goto    IRQ_RX1_not_type3
01BC   3190           00981         movlp   0x10
01BD   2???           00982         goto    DECRYPT_PACKET                  ; jump to lower page as this one is full....
01BE                  00983 IRQ_RX1_not_type3
                      00984         
                      00985         
                      00986         ; check if this is a quest start
01BE   0823           00987         movf    rx_type, W
01BF   3A06           00988         xorlw   0x06
01C0   1D03           00989         btfss   STATUS, Z
01C1   2???           00990         goto    IRQ_RX1_not_type6
01C2   3023           00991         movlw   high(start_rx_buffer)   
01C3   0087           00992         movwf   FSR1H
01C4   3020           00993         movlw   low(start_rx_buffer)
01C5   0086           00994         movwf   FSR1L
01C6   0016           00995         moviw   FSR1++
01C7   062B           00996         xorwf   badge_idL, W    
01C8   1D03           00997         btfss   STATUS, Z
01C9   2???           00998         goto    IRQ_RX1_not_type6
01CA   0016           00999         moviw   FSR1++
01CB   062C           01000         xorwf   badge_idH, W    
01CC   1D03           01001         btfss   STATUS, Z
01CD   2???           01002         goto    IRQ_RX1_not_type6
01CE   3023           01003         movlw   high(ram_status)        ;  bit 7 0 = dead, bit 6 0 = uber on, bit 5 0 = quest done, bit 
                            4 0 = quest start, bit 3 = 0 has egg, bit 2 = 0 is cured, bit 1 = 0 has pink eye, bit 0 = 0 con 
01CF   0087           01004         movwf   FSR1H
01D0   3070           01005         movlw   low(ram_status)
01D1   0086           01006         movwf   FSR1L   
01D2   1E01           01007         btfss   INDF1, 4
01D3   2???           01008         goto    IRQ_RX1_not_type6
01D4   1201           01009         bcf             INDF1, 4                        ; Set quest start
                      01010         ; indicate that this needs to be saved on next mainloop. 
01D5   1471           01011         bsf             g_flags, 0                      
01D6                  01012 IRQ_RX1_not_type6
                      01013         
                      01014         
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01015         ; check if this is a egg drop request
01D6   0823           01016         movf    rx_type, W
01D7   3A09           01017         xorlw   0x09
01D8   1D03           01018         btfss   STATUS, Z
01D9   2???           01019         goto    IRQ_RX1_not_type9
01DA   3023           01020         movlw   high(start_rx_buffer)   
01DB   0087           01021         movwf   FSR1H
01DC   3020           01022         movlw   low(start_rx_buffer)
01DD   0086           01023         movwf   FSR1L
01DE   3023           01024         movlw   high(ram_eggID) 
01DF   0085           01025         movwf   FSR0H
01E0   3075           01026         movlw   low(ram_eggID)
01E1   0084           01027         movwf   FSR0L   
01E2   0A84           01028         incf    FSR0L, F
01E3   0900           01029         comf    INDF0, W                        ; invert value from flash
01E4   0601           01030         xorwf   INDF1, W
01E5   1D03           01031         btfss   STATUS, Z
01E6   2???           01032         goto    IRQ_RX1_not_type9
01E7   0384           01033         decf    FSR0L, F
01E8   0A86           01034         incf    FSR1L, F
01E9   0900           01035         comf    INDF0, W                        ; invert value from flash
01EA   0601           01036         xorwf   INDF1, W
01EB   1D03           01037         btfss   STATUS, Z
01EC   2???           01038         goto    IRQ_RX1_not_type9
01ED   0014           01039         moviw   ++FSR1
01EE   062B           01040         xorwf   badge_idL, W    
01EF   1D03           01041         btfss   STATUS, Z
01F0   2???           01042         goto    IRQ_RX1_not_type9
01F1   0014           01043         moviw   ++FSR1
01F2   062C           01044         xorwf   badge_idH, W    
01F3   1D03           01045         btfss   STATUS, Z
01F4   2???           01046         goto    IRQ_RX1_not_type9
01F5   3023           01047         movlw   high(ram_status)        ;  bit 7 0 = dead, bit 6 0 = uber on, bit 5 0 = quest done, bit 
                            4 0 = quest start, bit 3 = 0 has egg, bit 2 = 0 is cured, bit 1 = 0 has pink eye, bit 0 = 0 con 
01F6   0087           01048         movwf   FSR1H
01F7   3070           01049         movlw   low(ram_status)
01F8   0086           01050         movwf   FSR1L   
01F9   1981           01051         btfsc   INDF1, 3
01FA   2???           01052         goto    IRQ_RX1_not_type9
01FB   1581           01053         bsf             INDF1, 3                        ; Set don't have egg
                      01054         ; save the ID of who you got an egg from
01FC   3023           01055         movlw   high(ram_eggID) 
01FD   0087           01056         movwf   FSR1H
01FE   3075           01057         movlw   low(ram_eggID)
01FF   0086           01058         movwf   FSR1L   
0200   30FD           01059         movlw   0xFD                            ; comp id of vendo
0201   001E           01060         movwi   FSR1++
0202   3000           01061         movlw   0x00                            ; comp id of vendo
0203   0081           01062         movwf   INDF1           
                      01063         ; indicate that this needs to be saved on next mainloop. 
0204   1471           01064         bsf             g_flags, 0              
0205                  01065 IRQ_RX1_not_type9
                      01066 
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01067         
                      01068         ; check if this is a uber request
0205   0823           01069         movf    rx_type, W
0206   3A0A           01070         xorlw   0x0A
0207   1D03           01071         btfss   STATUS, Z
0208   2???           01072         goto    IRQ_RX1_not_typeA
0209   3023           01073         movlw   high(start_rx_buffer)   
020A   0087           01074         movwf   FSR1H
020B   3020           01075         movlw   low(start_rx_buffer)
020C   0086           01076         movwf   FSR1L
020D   0016           01077         moviw   FSR1++
020E   062B           01078         xorwf   badge_idL, W    
020F   1D03           01079         btfss   STATUS, Z
0210   2???           01080         goto    IRQ_RX1_not_typeA
0211   0016           01081         moviw   FSR1++
0212   062C           01082         xorwf   badge_idH, W    
0213   1D03           01083         btfss   STATUS, Z
0214   2???           01084         goto    IRQ_RX1_not_typeA
0215   3023           01085         movlw   high(ram_status)        ;  bit 7 0 = dead, bit 6 0 = uber on, bit 5 0 = quest done, bit 
                            4 0 = quest start, bit 3 = 0 has egg, bit 2 = 0 is cured, bit 1 = 0 has pink eye, bit 0 = 0 con 
0216   0087           01086         movwf   FSR1H
0217   3070           01087         movlw   low(ram_status)
0218   0086           01088         movwf   FSR1L   
0219   1F01           01089         btfss   INDF1, 6
021A   2???           01090         goto    IRQ_RX1_not_type9
021B   1301           01091         bcf             INDF1, 6                        ; Set uber mode
                      01092         ; indicate that this needs to be saved on next mainloop. 
021C   1471           01093         bsf             g_flags, 0                      
021D                  01094 IRQ_RX1_not_typeA
                      01095 
                      01096         
                      01097         ; check if this is a quest end
021D   0823           01098         movf    rx_type, W
021E   3A0B           01099         xorlw   0x0B
021F   1D03           01100         btfss   STATUS, Z
0220   2???           01101         goto    IRQ_RX1_not_typeB
0221   3023           01102         movlw   high(start_rx_buffer)   
0222   0087           01103         movwf   FSR1H
0223   3020           01104         movlw   low(start_rx_buffer)
0224   0086           01105         movwf   FSR1L
0225   0016           01106         moviw   FSR1++
0226   062B           01107         xorwf   badge_idL, W    
0227   1D03           01108         btfss   STATUS, Z
0228   2???           01109         goto    IRQ_RX1_not_typeB
0229   0016           01110         moviw   FSR1++
022A   062C           01111         xorwf   badge_idH, W    
022B   1D03           01112         btfss   STATUS, Z
022C   2???           01113         goto    IRQ_RX1_not_typeB
                      01114         ; make sure they have done the quest
022D   3023           01115         movlw   high(ram_questID)       
022E   0087           01116         movwf   FSR1H
022F   308E           01117         movlw   low(ram_questID)
0230   0086           01118         movwf   FSR1L   
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0231   0016           01119         moviw   FSR1++
0232   3AFD           01120         xorlw   0xFD
0233   1D03           01121         btfss   STATUS, Z
0234   2???           01122         goto    IRQ_RX1_not_typeB
0235   0901           01123         comf    INDF1, W
0236   1903           01124         btfsc   STATUS, Z                       ; not the exact range check but close enough to make sur
                            e it is not 0x0000
0237   2???           01125         goto    IRQ_RX1_not_typeB
0238   3023           01126         movlw   high(ram_status)        ;  bit 7 0 = dead, bit 6 0 = uber on, bit 5 0 = quest done, bit 
                            4 0 = quest start, bit 3 = 0 has egg, bit 2 = 0 is cured, bit 1 = 0 has pink eye, bit 0 = 0 con 
0239   0087           01127         movwf   FSR1H
023A   3070           01128         movlw   low(ram_status)
023B   0086           01129         movwf   FSR1L   
023C   1E81           01130         btfss   INDF1, 5
023D   2???           01131         goto    IRQ_RX1_not_typeB
023E   1281           01132         bcf             INDF1, 5                        ; Set quest start
                      01133         ; indicate that this needs to be saved on next mainloop. 
023F   1471           01134         bsf             g_flags, 0                      
0240                  01135 IRQ_RX1_not_typeB
                      01136         
                      01137         
0240                  01138 IRQ_RX1_not_vendo       
                      01139                 
                      01140         
                      01141         ; check for rez when badge is dead
0240   3023           01142         movlw   high(ram_status)        ;  bit 7 0 = dead, bit 6 0 = uber on, bit 5 0 = quest done, bit 
                            4 0 = quest start, bit 3 = 0 has egg, bit 2 = 0 is cured, bit 1 = 0 has pink eye, bit 0 = 0 con 
0241   0087           01143         movwf   FSR1H
0242   3070           01144         movlw   low(ram_status)
0243   0086           01145         movwf   FSR1L   
0244   1B81           01146         btfsc   INDF1, 7
0245   2???           01147         goto    IRQ_RX1_ignore_alive
                      01148 
                      01149         
                      01150         ; check if badge is dead, on the quest and gets a llama badge
                      01151         ; check if badge number is less than this range
0246   3002           01152         movlw   high(founder_badge)
0247   0225           01153         subwf   rx_idH, W                       ; f - W, C = 0 if W > f, C = 1 if W <= f
0248   1C03           01154         btfss   STATUS, C
0249   2???           01155         goto    IRQ_RX1_ignore_founder
024A   1D03           01156         btfss   STATUS, Z                       ; if greater than limit skip to next check
024B   2???           01157         goto    IRQ_RX1_FOUNDER_QUEST1
024C   3040           01158         movlw   low(founder_badge)
024D   0226           01159         subwf   rx_idL, W                       ; f - W, C = 0 if W > f, C = 1 if W <= f
024E   1C03           01160         btfss   STATUS, C
024F   2???           01161         goto    IRQ_RX1_ignore_founder
0250                  01162 IRQ_RX1_FOUNDER_QUEST1
                      01163         ; check if badge number is less than this range
0250   3002           01164         movlw   high(vendor_badge)
0251   0225           01165         subwf   rx_idH, W                       ; f - W, C = 0 if W > f, C = 1 if W <= f
0252   1C03           01166         btfss   STATUS, C
0253   2???           01167         goto    IRQ_RX1_FOUNDER_QUEST2
0254   1D03           01168         btfss   STATUS, Z                       ; if greater than limit skip to next check
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0255   2???           01169         goto    IRQ_RX1_ignore_founder
0256   3080           01170         movlw   low(vendor_badge)
0257   0226           01171         subwf   rx_idL, W                       ; f - W, C = 0 if W > f, C = 1 if W <= f
0258   1803           01172         btfsc   STATUS, C
0259   2???           01173         goto    IRQ_RX1_ignore_founder
025A                  01174 IRQ_RX1_FOUNDER_QUEST2  
                      01175         
025A   3023           01176         movlw   high(ram_status)        ;  bit 7 0 = dead, bit 6 0 = uber on, bit 5 0 = quest done, bit 
                            4 0 = quest start, bit 3 = 0 has egg, bit 2 = 0 is cured, bit 1 = 0 has pink eye, bit 0 = 0 con 
025B   0087           01177         movwf   FSR1H
025C   3070           01178         movlw   low(ram_status)
025D   0086           01179         movwf   FSR1L   
025E   1A01           01180         btfsc   INDF1, 4
025F   2???           01181         goto    IRQ_RX1_ignore_quest
0260   1E81           01182         btfss   INDF1, 5
0261   2???           01183         goto    IRQ_RX1_ignore_quest
0262   1681           01184         bsf     INDF1, 5                ; Set Quest
                      01185         ; save the ID of who you got the quest token from
0263   3023           01186         movlw   high(ram_questID)       
0264   0087           01187         movwf   FSR1H
0265   308E           01188         movlw   low(ram_questID)
0266   0086           01189         movwf   FSR1L   
0267   0925           01190         comf    rx_idH, W               ; Badge ID to save
0268   001E           01191         movwi   FSR1++
0269   0926           01192         comf    rx_idL, W               ; Badge ID to save
026A   0081           01193         movwf   INDF1           
                      01194         ; indicate that this needs to be saved on next mainloop. 
026B   1471           01195         bsf             g_flags, 0      
026C                  01196 IRQ_RX1_ignore_quest
026C   2???           01197         goto    IRQ_RX1_NECROLLAMACON
026D                  01198 IRQ_RX1_ignore_founder
                      01199         
                      01200         
                      01201         ; check if badge number is less than this range
026D   3002           01202         movlw   high(necrollamacon)
026E   0225           01203         subwf   rx_idH, W                       ; f - W, C = 0 if W > f, C = 1 if W <= f
026F   1C03           01204         btfss   STATUS, C
0270   2???           01205         goto    IRQ_RX1_ignore_necro
0271   1D03           01206         btfss   STATUS, Z                       ; if greater than limit skip to next check
0272   2???           01207         goto    IRQ_RX1_NECRO_CHK
0273   30E0           01208         movlw   low(necrollamacon)
0274   0226           01209         subwf   rx_idL, W                       ; f - W, C = 0 if W > f, C = 1 if W <= f
0275   1C03           01210         btfss   STATUS, C
0276   2???           01211         goto    IRQ_RX1_ignore_necro
0277                  01212 IRQ_RX1_NECRO_CHK
                      01213         ; check if badge number is less than this range
0277   3002           01214         movlw   high(vendo)
0278   0225           01215         subwf   rx_idH, W                       ; f - W, C = 0 if W > f, C = 1 if W <= f
0279   1C03           01216         btfss   STATUS, C
027A   2???           01217         goto    IRQ_RX1_NECROLLAMACON
027B   1D03           01218         btfss   STATUS, Z                       ; if greater than limit skip to next check
027C   2???           01219         goto    IRQ_RX1_ignore_necro
027D   30FF           01220         movlw   low(vendo)
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

027E   0226           01221         subwf   rx_idL, W                       ; f - W, C = 0 if W > f, C = 1 if W <= f
027F   1803           01222         btfsc   STATUS, C
0280   2???           01223         goto    IRQ_RX1_ignore_necro
0281                  01224 IRQ_RX1_NECROLLAMACON   
0281   3023           01225         movlw   high(ram_status)        ;  bit 7 0 = dead, bit 6 0 = uber on, bit 5 0 = quest done, bit 
                            4 0 = quest start, bit 3 = 0 has egg, bit 2 = 0 is cured, bit 1 = 0 has pink eye, bit 0 = 0 con 
0282   0087           01226         movwf   FSR1H
0283   3070           01227         movlw   low(ram_status)
0284   0086           01228         movwf   FSR1L           
0285   1781           01229         bsf             INDF1, 7                        ; set badge back to alive
                      01230         ;------------------
0286   0140           01231         movlb   d'0'
                      01232         ;------------------
                      01233         ; set animation 
0287   3006           01234         movlw   0x06
0288   00C3           01235         movwf   oLED_set                                ; new set to move to 
0289   0801           01236         movf    INDF1, W                                ;  bit 7 0 = dead, bit 6 0 = uber on, bit 5 0 = 
                            quest done, bit 4 0 = quest start, bit 3 = 0 has egg, bit 2 = 0 is cured, bit 1 = 0 has pink eye
028A   3906           01237         andlw   0x06
028B   3A04           01238         xorlw   0x04                                    ; check if badge has pink eye but has not been c
                            ured yet. 
028C   1903           01239         btfsc   STATUS, Z
028D   0AC3           01240         incf    oLED_set, F
028E   01C2           01241         clrf    oLED_delay                              ; stop the counter update first then clear the i
                            nternal phase
028F   01C1           01242         clrf    oLED_phase
0290   01C5           01243         clrf    oLED_seq_cnt    
                      01244         
0291   3002           01245         movlw   0x02                            ; Set initial condition of the badge on con start to act
                            ive as it will instantly pop to sleeping since delay counters are cleared. 
0292   00AC           01246         movwf   badge_status
0293   01A9           01247         clrf    delay_downH
0294   01AA           01248         clrf    delay_downL
0295   30FF           01249         movlw   food_startup
0296   00BB           01250         movwf   food_cnt
0297   3000           01251         movlw   poo_startup
0298   00BC           01252         movwf   poo_cnt
0299   00C0           01253         movwf   poo_temp
                      01254         ; CFG add other state / game counter updates here on res
                      01255         ;------------------
029A   0142           01256         movlb   d'2'
                      01257         ;------------------             
                      01258         ; indicate that this needs to be saved on next mainloop. 
029B   1471           01259         bsf             g_flags, 0      ; bit 0 = update flash, bit 1 = force stomach off, bit 2 = force
                             poo off
029C   14F1           01260         bsf             g_flags, 1      ; bit 0 = update flash, bit 1 = force stomach off, bit 2 = force
                             poo off
029D   1571           01261         bsf             g_flags, 2      ; bit 0 = update flash, bit 1 = force stomach off, bit 2 = force
                             poo off
                      01262         ;goto   IRQ_RX1_ignore_necro
                      01263         
029E                  01264 IRQ_RX1_ignore_necro    
029E                  01265 IRQ_RX1_ignore_alive    
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01266         
                      01267                 
                      01268         ; check if con is started, badge is not dead, and not sleeping
029E   3023           01269         movlw   high(ram_status)        ;  bit 7 0 = dead, bit 6 0 = uber on, bit 5 0 = quest done, bit 
                            4 0 = quest start, bit 3 = 0 has egg, bit 2 = 0 is cured, bit 1 = 0 has pink eye, bit 0 = 0 con 
029F   0087           01270         movwf   FSR1H
02A0   3070           01271         movlw   low(ram_status)
02A1   0086           01272         movwf   FSR1L   
02A2   0801           01273         movf    INDF1, W
02A3   3901           01274         andlw   0x01                            ; con started?
02A4   1D03           01275         btfss   STATUS, Z
02A5   2???           01276         goto    IRQ_RX1_ignore_ns_dead_asleep
                      01277         ; check if badge is dead        
02A6   0801           01278         movf    INDF1, W
02A7   3980           01279         andlw   0x80                            ; is badge dead
02A8   1903           01280         btfsc   STATUS, Z
02A9   2???           01281         goto    IRQ_RX1_ignore_ns_dead_asleep
                      01282         
                      01283         ; trigger mine?
02AA   0823           01284         movf    rx_type, W
02AB   3A0C           01285         xorlw   0x0C
02AC   1D03           01286         btfss   STATUS, Z
02AD   2???           01287         goto    IRQ_RX1_not_mine
                      01288         ; set animation 
                      01289         ;------------------
02AE   0140           01290         movlb   d'0'
                      01291         ;------------------     
02AF   0849           01292         movf    oLED_ctrl, W
02B0   3903           01293         andlw   0x03
02B1   1D03           01294         btfss   STATUS, Z
02B2   2???           01295         goto    IRQ_RX1_not_mine_norm
02B3   0843           01296         movf    oLED_set, W
02B4   00CA           01297         movwf   oLED_last       
02B5                  01298 IRQ_RX1_not_mine_norm   
02B5   1449           01299         bsf     oLED_ctrl, 0                            ; bit 0 = one shot start, 1 = one shot done
02B6   300C           01300         movlw   0x0C                                    ; mine?
02B7   00C3           01301         movwf   oLED_set                                ; new set to move to 
02B8   01C2           01302         clrf    oLED_delay                              ; stop the counter update first then clear the i
                            nternal phase
02B9   01C1           01303         clrf    oLED_phase
02BA   01C5           01304         clrf    oLED_seq_cnt    
                      01305         ;------------------
02BB   0142           01306         movlb   d'2'
                      01307         ;------------------     
02BC                  01308 IRQ_RX1_not_mine        
                      01309         
                      01310         ; check if badge is sleeping
                      01311         ;------------------
02BC   0140           01312         movlb   d'0'
                      01313         ;------------------
02BD   082C           01314         movf    badge_status, W
                      01315         ;------------------
02BE   0142           01316         movlb   d'2'
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01317         ;------------------     
02BF   3903           01318         andlw   0x03
02C0   3A01           01319         xorlw   0x01
02C1   1903           01320         btfsc   STATUS, Z
02C2   2???           01321         goto    IRQ_RX1_ignore_ns_dead_asleep
                      01322                 
                      01323         ;------------------------------------------------------------------------
                      01324         ; stuff here that is only valid when not dead, or sleeping, and con start (most things)
                      01325         ;------------------------------------------------------------------------
                      01326         
                      01327         ; see if this is a new badge ID
02C3   0826           01328         movf    rx_idL, W
02C4   00AD           01329         movwf   ir_offset
02C5   0825           01330         movf    rx_idH, W
02C6   00AE           01331         movwf   ir_temp
02C7   0CAE           01332         rrf             ir_temp, F
02C8   0CAD           01333         rrf             ir_offset, F
02C9   0CAE           01334         rrf             ir_temp, F
02CA   0CAD           01335         rrf             ir_offset, F
02CB   1003           01336         bcf             STATUS, C
02CC   0CAD           01337         rrf             ir_offset, F
02CD   3023           01338         movlw   high(start_buffer_objs)
02CE   0087           01339         movwf   FSR1H
02CF   082D           01340         movf    ir_offset, W
02D0   3E90           01341         addlw   low(start_buffer_objs)
02D1   0086           01342         movwf   FSR1L
02D2   0801           01343         movf    INDF1,W
02D3   00AF           01344         movwf   ir_temp1
02D4   0826           01345         movf    rx_idL, W
02D5   3907           01346         andlw   0x07
02D6   3E01           01347         addlw   0x01
02D7   00AE           01348         movwf   ir_temp
02D8                  01349 IRQ_RX1_SHIFT_TEMP
02D8   0CAF           01350         rrf             ir_temp1, F
02D9   0BAE           01351         decfsz  ir_temp, F
02DA   2???           01352         goto    IRQ_RX1_SHIFT_TEMP
02DB   1C03           01353         btfss   STATUS, C
02DC   2???           01354         goto    IRQ_RX1_OLD_ID
                      01355         ; new badge found!!
                      01356         ; increment the counts 
                      01357         ;------------------
02DD   0140           01358         movlb   d'0'
                      01359         ;------------------
02DE   0AA6           01360         incf    countL, F
02DF   1903           01361         btfsc   STATUS,Z
02E0   0AA7           01362         incf    countH, F
                      01363         ; check count for pink eye
02E1   3023           01364         movlw   high(ram_status)        ;  bit 7 0 = dead, bit 6 0 = uber on, bit 5 0 = quest done, bit 
                            4 0 = quest start, bit 3 = 0 has egg, bit 2 = 0 is cured, bit 1 = 0 has pink eye, bit 0 = 0 con 
02E2   0087           01365         movwf   FSR1H
02E3   3070           01366         movlw   low(ram_status)
02E4   0086           01367         movwf   FSR1L   
02E5   0801           01368         movf    INDF1, W
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02E6   3902           01369         andlw   0x02                            ; check if badge already got pink eye if so skip this ch
                            eck
02E7   1903           01370         btfsc   STATUS, Z
02E8   2???           01371         goto    IRQ_RX1_NOT_PINK_EYE
                      01372         ;movf   countH, W                       ; should not matter at all since above check will skip t
                            his if already triggered once. 
                      01373         ;btfss  STATUS, Z
                      01374         ;goto   IRQ_RX1_NOT_PINK_EYE    
02E9   0826           01375         movf    countL, W
02EA   3C32           01376         sublw   pink_eye_limit          ; k - W, C = 0 if W > k, C = 1 if W <= k        
02EB   1803           01377         btfsc   STATUS, C
02EC   2???           01378         goto    IRQ_RX1_NOT_PINK_EYE
02ED   1081           01379         bcf     INDF1, 1                        ; trigger pink eye
                      01380         ; save this badge id to reg since badge made its self sick
02EE   3023           01381         movlw   high(ram_sickID)        
02EF   0087           01382         movwf   FSR1H
02F0   3073           01383         movlw   low(ram_sickID)
02F1   0086           01384         movwf   FSR1L   
                      01385         ;------------------
02F2   0142           01386         movlb   d'2'
                      01387         ;------------------
02F3   092C           01388         comf    badge_idH, W                    ; invert value for flash save (will be inverted again be
                            fore sending out)
02F4   001E           01389         movwi   FSR1++
02F5   092B           01390         comf    badge_idL, W                    ; invert value for flash save (will be inverted again be
                            fore sending out)
02F6   0081           01391         movwf   INDF1   
02F7                  01392 IRQ_RX1_NOT_PINK_EYE
                      01393         ;------------------
02F7   0142           01394         movlb   d'2'
                      01395         ;------------------
                      01396         ; set badge as found in ram
02F8   0826           01397         movf    rx_idL, W
02F9   00AD           01398         movwf   ir_offset
02FA   0825           01399         movf    rx_idH, W
02FB   00AE           01400         movwf   ir_temp
02FC   0CAE           01401         rrf             ir_temp, F
02FD   0CAD           01402         rrf             ir_offset, F
02FE   0CAE           01403         rrf             ir_temp, F
02FF   0CAD           01404         rrf             ir_offset, F
0300   1003           01405         bcf             STATUS, C
0301   0CAD           01406         rrf             ir_offset, F
0302   3023           01407         movlw   high(start_buffer_objs)
0303   0087           01408         movwf   FSR1H
0304   082D           01409         movf    ir_offset, W
0305   3E90           01410         addlw   low(start_buffer_objs)
0306   0086           01411         movwf   FSR1L
                      01412         ; take the low 3 bits rotate 1 left (jump 2 for each) then branch
0307   0D26           01413         rlf             rx_idL, W
0308   390E           01414         andlw   0x0E
0309   000B           01415         brw
030A   1001           01416         bcf             INDF1, 0
030B   2???           01417         goto    IRQ_RX1_ID_UPDATE_DONE  
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

030C   1081           01418         bcf             INDF1, 1
030D   2???           01419         goto    IRQ_RX1_ID_UPDATE_DONE  
030E   1101           01420         bcf             INDF1, 2
030F   2???           01421         goto    IRQ_RX1_ID_UPDATE_DONE  
0310   1181           01422         bcf             INDF1, 3
0311   2???           01423         goto    IRQ_RX1_ID_UPDATE_DONE  
0312   1201           01424         bcf             INDF1, 4
0313   2???           01425         goto    IRQ_RX1_ID_UPDATE_DONE  
0314   1281           01426         bcf             INDF1, 5
0315   2???           01427         goto    IRQ_RX1_ID_UPDATE_DONE  
0316   1301           01428         bcf             INDF1, 6
0317   2???           01429         goto    IRQ_RX1_ID_UPDATE_DONE  
0318   1381           01430         bcf             INDF1, 7
                      01431 ;       goto    IRQ_RX1_ID_UPDATE_DONE          
0319                  01432 IRQ_RX1_ID_UPDATE_DONE  
                      01433         ; indicate that this needs to be saved on next mainloop. 
0319   1471           01434         bsf             g_flags, 0
031A                  01435 IRQ_RX1_OLD_ID
                      01436         
                      01437         ; update things here based on status bits
031A   3023           01438         movlw   high(ram_status)        ;  bit 7 0 = dead, bit 6 0 = uber on, bit 5 0 = quest done, bit 
                            4 0 = quest start, bit 3 = 0 has egg, bit 2 = 0 is cured, bit 1 = 0 has pink eye, bit 0 = 0 con 
031B   0087           01439         movwf   FSR1H
031C   3070           01440         movlw   low(ram_status)
031D   0086           01441         movwf   FSR1L   
031E   1CA2           01442         btfss   rx_status, 1            ; sick bit
031F   2???           01443         goto    IRQ_RX1_NOT_SICK
                      01444         ; this check is not needed as next will only let this path set sick once (save some code space)
                      01445         ;btfss  INDF1, 2                        ; check if badge has been cured if so don't get sick aga
                            in
                      01446         ;goto   IRQ_RX1_NOT_SICK
0320   1C81           01447         btfss   INDF1, 1                        ; check if badge is currenly sick (reduce eeprom writes)
0321   2???           01448         goto    IRQ_RX1_NOT_SICK
0322   1081           01449         bcf             INDF1, 1                        ; if already sick this will result in no change 
                            so don't care
                      01450         ; save the ID of who you got sick from
0323   3023           01451         movlw   high(ram_sickID)        
0324   0087           01452         movwf   FSR1H
0325   3073           01453         movlw   low(ram_sickID)
0326   0086           01454         movwf   FSR1L   
0327   0925           01455         comf    rx_idH, W                       ; invert value for flash save (will be inverted again be
                            fore sending out)
0328   001E           01456         movwi   FSR1++
0329   0926           01457         comf    rx_idL, W                       ; invert value for flash save (will be inverted again be
                            fore sending out)
032A   0081           01458         movwf   INDF1   
                      01459         ; indicate that this needs to be saved on next mainloop. 
032B   1471           01460         bsf             g_flags, 0
032C                  01461 IRQ_RX1_NOT_SICK        
                      01462         
                      01463         ; check if badge number is less than this range
032C   3002           01464         movlw   high(speaker_badge)
032D   0225           01465         subwf   rx_idH, W                       ; f - W, C = 0 if W > f, C = 1 if W <= f
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

032E   1C03           01466         btfss   STATUS, C
032F   2???           01467         goto    IRQ_RX1_BADGE_CHK_DONE          ; normal badge...
0330   1D03           01468         btfss   STATUS, Z                       ; if greater than limit skip to next check
0331   2???           01469         goto    IRQ_RX1_FOUNDER_CHK
0332   3000           01470         movlw   low(speaker_badge)
0333   0226           01471         subwf   rx_idL, W                       ; f - W, C = 0 if W > f, C = 1 if W <= f
0334   1C03           01472         btfss   STATUS, C
0335   2???           01473         goto    IRQ_RX1_BADGE_CHK_DONE          ; normal badge...
0336                  01474 IRQ_RX1_FOUNDER_CHK
                      01475         ; check if badge number is less than this range
0336   3002           01476         movlw   high(founder_badge)
0337   0225           01477         subwf   rx_idH, W                       ; f - W, C = 0 if W > f, C = 1 if W <= f
0338   1C03           01478         btfss   STATUS, C
0339   2???           01479         goto    IRQ_RX1_SPEAKER
033A   1D03           01480         btfss   STATUS, Z                       ; if greater than limit skip to next check
033B   2???           01481         goto    IRQ_RX1_VENDOR_CHK
033C   3040           01482         movlw   low(founder_badge)
033D   0226           01483         subwf   rx_idL, W                       ; f - W, C = 0 if W > f, C = 1 if W <= f
033E   1C03           01484         btfss   STATUS, C
033F   2???           01485         goto    IRQ_RX1_SPEAKER
0340                  01486 IRQ_RX1_VENDOR_CHK
                      01487         ; check if badge number is less than this range
0340   3002           01488         movlw   high(vendor_badge)
0341   0225           01489         subwf   rx_idH, W                       ; f - W, C = 0 if W > f, C = 1 if W <= f
0342   1C03           01490         btfss   STATUS, C
0343   2???           01491         goto    IRQ_RX1_FOUNDER
0344   1D03           01492         btfss   STATUS, Z                       ; if greater than limit skip to next check
0345   2???           01493         goto    IRQ_RX1_OUTHOUSE_CHK
0346   3080           01494         movlw   low(vendor_badge)
0347   0226           01495         subwf   rx_idL, W                       ; f - W, C = 0 if W > f, C = 1 if W <= f
0348   1C03           01496         btfss   STATUS, C
0349   2???           01497         goto    IRQ_RX1_FOUNDER
034A                  01498 IRQ_RX1_OUTHOUSE_CHK
                      01499         ; check if badge number is less than this range
034A   3002           01500         movlw   high(outhouse)
034B   0225           01501         subwf   rx_idH, W                       ; f - W, C = 0 if W > f, C = 1 if W <= f
034C   1C03           01502         btfss   STATUS, C
034D   2???           01503         goto    IRQ_RX1_VENDOR
034E   1D03           01504         btfss   STATUS, Z                       ; if greater than limit skip to next check
034F   2???           01505         goto    IRQ_RX1_SNAKE_CHK
0350   30A0           01506         movlw   low(outhouse)
0351   0226           01507         subwf   rx_idL, W                       ; f - W, C = 0 if W > f, C = 1 if W <= f
0352   1C03           01508         btfss   STATUS, C
0353   2???           01509         goto    IRQ_RX1_VENDOR
0354                  01510 IRQ_RX1_SNAKE_CHK
                      01511         ; check if badge number is less than this range
0354   3002           01512         movlw   high(snake_oil)
0355   0225           01513         subwf   rx_idH, W                       ; f - W, C = 0 if W > f, C = 1 if W <= f
0356   1C03           01514         btfss   STATUS, C
0357   2???           01515         goto    IRQ_RX1_OUTHOUSE
0358   1D03           01516         btfss   STATUS, Z                       ; if greater than limit skip to next check
0359   2???           01517         goto    IRQ_RX1_NECROLLAMACON_CHK
035A   30C0           01518         movlw   low(snake_oil)
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

035B   0226           01519         subwf   rx_idL, W                       ; f - W, C = 0 if W > f, C = 1 if W <= f
035C   1C03           01520         btfss   STATUS, C
035D   2???           01521         goto    IRQ_RX1_OUTHOUSE
035E                  01522 IRQ_RX1_NECROLLAMACON_CHK
                      01523         ; check if badge number is less than this range
035E   3002           01524         movlw   high(necrollamacon)
035F   0225           01525         subwf   rx_idH, W                       ; f - W, C = 0 if W > f, C = 1 if W <= f
0360   1C03           01526         btfss   STATUS, C
0361   2???           01527         goto    IRQ_RX1_SNAKE
0362   1D03           01528         btfss   STATUS, Z                       ; if greater than limit skip to next check
0363   2???           01529         goto    IRQ_RX1_VENDO_CHK
0364   30E0           01530         movlw   low(necrollamacon)
0365   0226           01531         subwf   rx_idL, W                       ; f - W, C = 0 if W > f, C = 1 if W <= f
0366   1C03           01532         btfss   STATUS, C
0367   2???           01533         goto    IRQ_RX1_SNAKE
0368                  01534 IRQ_RX1_VENDO_CHK
0368   3002           01535         movlw   high(vendo)
0369   0625           01536         xorwf   rx_idH, W
036A   1C03           01537         btfss   STATUS, C
036B   2???           01538         goto    IRQ_RX1_BADGE_CHK_DONE
036C   30FF           01539         movlw   low(vendo)
036D   0626           01540         xorwf   rx_idL, W
036E   1C03           01541         btfss   STATUS, C
036F   2???           01542         goto    IRQ_RX1_BADGE_CHK_DONE  
                      01543         
0370                  01544 IRQ_RX1_VENDO
0370   0823           01545         movf    rx_type, W
0371   3A07           01546         xorlw   0x07                            ; request food
0372   1D03           01547         btfss   STATUS, Z
0373   2???           01548         goto    IRQ_RX1_BADGE_CHK_DONE
0374   3023           01549         movlw   high(start_rx_buffer)   
0375   0087           01550         movwf   FSR1H
0376   3020           01551         movlw   low(start_rx_buffer)
0377   0086           01552         movwf   FSR1L
                      01553         ; first byte in buffer = last sent so in this case # of food 
0378   3051           01554         movlw   food_warn                       ; check if badge already starving and calculate excess f
                            ood. 
                      01555         ;------------------
0379   0140           01556         movlb   d'0'
                      01557         ;------------------     
037A   023B           01558         subwf   food_cnt, W                     ; f - W, C = 0 if W > f, C = 1 if W <= f        
                      01559         ;------------------
037B   0142           01560         movlb   d'2'
                      01561         ;------------------     
037C   1C03           01562         btfss   STATUS, C                       ; if less than 0 badge already starving abort feeding
037D   2???           01563         goto    IRQ_RX1_BADGE_CHK_DONE  
037E   0201           01564         subwf   INDF1, W                        ; f - W, C = 0 if W > f, C = 1 if W <= f                
037F   1803           01565         btfsc   STATUS, C                       ; if less than 0 badge already starving abort feeding
0380   2???           01566         goto    IRQ_RX1_BADGE_CHK_DONE  
0381   0014           01567         moviw   ++FSR1
0382   062B           01568         xorwf   badge_idL, W    
0383   1D03           01569         btfss   STATUS, Z
0384   2???           01570         goto    IRQ_RX1_BADGE_CHK_DONE
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0385   0014           01571         moviw   ++FSR1
0386   062C           01572         xorwf   badge_idH, W    
0387   1D03           01573         btfss   STATUS, Z
0388   2???           01574         goto    IRQ_RX1_BADGE_CHK_DONE
                      01575         ; subtract off the current poop counter from max and save as new food value. 
                      01576         ;------------------
0389   014E           01577         movlb   d'14'
                      01578         ;------------------     
038A   1A19           01579         btfsc   PIE3, TX1IE                             ; make sure TX routine is NOT already running. 
038B   2???           01580         goto    IRQ_RX1_VENDO_tx_busy
                      01581         ;------------------
038C   0140           01582         movlb   d'0'
                      01583         ;------------------     
038D   0015           01584         moviw   --FSR1
038E   0015           01585         moviw   --FSR1
038F   02BB           01586         subwf   food_cnt, F                     ; f - W, C = 0 if W > f, C = 1 if W <= f        
                      01587         ;------------------
0390   0142           01588         movlb   d'2'
                      01589         ;------------------     
0391   01A7           01590         clrf    ir_tx_seq
0392   01A8           01591         clrf    ir_tx_chksum
                      01592         ; status updated other places just flow it here
0393   3008           01593         movlw   0x08
0394   00AA           01594         movwf   tx_type         
0395   15F1           01595         bsf             g_flags, 3                              ; bit 0 = update flash, bit 1 = force st
                            omach off, bit 2 = force poo off, bit 3 = enable TX delay
                      01596         ;------------------
0396   014E           01597         movlb   d'14'
                      01598         ;------------------     
0397   1619           01599         bsf     PIE3, TX1IE                             ; enable Uart2 transmit IRQ                     
0398                  01600 IRQ_RX1_VENDO_tx_busy
                      01601         ;------------------
0398   0142           01602         movlb   d'2'
                      01603         ;------------------     
0399   2???           01604         goto    IRQ_RX1_BADGE_CHK_DONE
                      01605         
039A                  01606 IRQ_RX1_SPEAKER 
                      01607         ; code here for when you see a speaker badge
039A   3023           01608         movlw   high(ram_status)        ;  bit 7 0 = dead, bit 6 0 = uber on, bit 5 0 = quest done, bit 
                            4 0 = quest start, bit 3 = 0 has egg, bit 2 = 0 is cured, bit 1 = 0 has pink eye, bit 0 = 0 con 
039B   0087           01609         movwf   FSR1H
039C   3070           01610         movlw   low(ram_status)
039D   0086           01611         movwf   FSR1L   
039E   0801           01612         movf    INDF1, W
039F   3908           01613         andlw   0x08                            ; check if already has an egg
03A0   1903           01614         btfsc   STATUS, Z
03A1   2???           01615         goto    IRQ_RX1_BADGE_CHK_DONE
03A2   1181           01616         bcf             INDF1, 3                        ; Set have egg
                      01617         ; save the ID of who you got an egg from
03A3   3023           01618         movlw   high(ram_eggID) 
03A4   0087           01619         movwf   FSR1H
03A5   3075           01620         movlw   low(ram_eggID)
03A6   0086           01621         movwf   FSR1L   
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03A7   0925           01622         comf    rx_idH, W                       ; invert value for flash save (will be inverted again be
                            fore sending out)
03A8   001E           01623         movwi   FSR1++
03A9   0926           01624         comf    rx_idL, W                       ; invert value for flash save (will be inverted again be
                            fore sending out)
03AA   0081           01625         movwf   INDF1           
                      01626         ; update the knocked up counter
03AB   3023           01627         movlw   high(ram_knocked)       
03AC   0085           01628         movwf   FSR0H
03AD   308C           01629         movlw   low(ram_knocked)
03AE   0084           01630         movwf   FSR0L           
03AF   2???           01631         call    _2BYTE_DEC_N_STOP
                      01632         ; indicate that this needs to be saved on next mainloop. 
03B0   1471           01633         bsf             g_flags, 0      
03B1   2???           01634         goto    IRQ_RX1_BADGE_CHK_DONE
                      01635 
                      01636         
03B2                  01637 IRQ_RX1_FOUNDER 
03B2   2???           01638         goto    IRQ_RX1_BADGE_CHK_DONE
                      01639         
03B3                  01640 IRQ_RX1_VENDOR
                      01641         ; subtract off the current poop counter from max and save as new food value.  
                      01642         ;------------------
03B3   0140           01643         movlb   d'0'
                      01644         ;------------------     
03B4   083C           01645         movf    poo_cnt, W
03B5   3CFF           01646         sublw   0xFF            ; k - W  C = 0 when W > k, C = 1 when W <= K
03B6   00BB           01647         movwf   food_cnt        
03B7   14F1           01648         bsf     g_flags, 1      ; bit 0 = update flash, bit 1 = force stomach off, bit 2 = force poo off
                      01649         ; set animation         
03B8   0849           01650         movf    oLED_ctrl, W
03B9   3903           01651         andlw   0x03
03BA   1D03           01652         btfss   STATUS, Z
03BB   2???           01653         goto    IRQ_RX1_not_feedme_norm
03BC   0843           01654         movf    oLED_set, W
03BD   00CA           01655         movwf   oLED_last       
03BE                  01656 IRQ_RX1_not_feedme_norm 
03BE   1449           01657         bsf     oLED_ctrl, 0                            ; bit 0 = one shot start, 1 = one shot done
03BF   300C           01658         movlw   0x0C                                    ; mine?
03C0   00C3           01659         movwf   oLED_set                                ; new set to move to 
03C1   01C2           01660         clrf    oLED_delay                              ; stop the counter update first then clear the i
                            nternal phase
03C2   01C1           01661         clrf    oLED_phase
03C3   01C5           01662         clrf    oLED_seq_cnt    
                      01663         ;------------------
03C4   0142           01664         movlb   d'2'
                      01665         ;------------------     
03C5   3023           01666         movlw   high(ram_food)  
03C6   0085           01667         movwf   FSR0H
03C7   3088           01668         movlw   low(ram_food)
03C8   0084           01669         movwf   FSR0L           
03C9   2???           01670         call    _2BYTE_DEC_N_STOP       
03CA   2???           01671         goto    IRQ_RX1_BADGE_CHK_DONE
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01672 
03CB                  01673 IRQ_RX1_OUTHOUSE
                      01674         ; clear the poop counter
                      01675         ;------------------
03CB   0140           01676         movlb   d'0'
                      01677         ;------------------     
03CC   01BC           01678         clrf    poo_cnt
03CD   01C0           01679         clrf    poo_temp
03CE   1571           01680         bsf             g_flags, 2      ; bit 0 = update flash, bit 1 = force stomach off, bit 2 = force
                             poo off
                      01681         ;------------------
03CF   0142           01682         movlb   d'2'
                      01683         ;------------------     
                      01684         ; update the pooped counter
03D0   3023           01685         movlw   high(ram_poops) 
03D1   0085           01686         movwf   FSR0H
03D2   308A           01687         movlw   low(ram_poops)
03D3   0084           01688         movwf   FSR0L           
03D4   2???           01689         call    _2BYTE_DEC_N_STOP
                      01690         ; code here for when you see a outhouse button
03D5   2???           01691         goto    IRQ_RX1_BADGE_CHK_DONE
                      01692         
03D6                  01693 IRQ_RX1_SNAKE   
                      01694         ; code here for when you see a snake oil button
03D6   3023           01695         movlw   high(ram_status)        ;  bit 7 0 = dead, bit 6 0 = uber on, bit 5 0 = quest done, bit 
                            4 0 = quest start, bit 3 = 0 has egg, bit 2 = 0 is cured, bit 1 = 0 has pink eye, bit 0 = 0 con 
03D7   0087           01696         movwf   FSR1H
03D8   3070           01697         movlw   low(ram_status)
03D9   0086           01698         movwf   FSR1L   
03DA   0801           01699         movf    INDF1, W
03DB   3902           01700         andlw   0x02                            ; check count for pink eye (if not sick no effect)
03DC   1D03           01701         btfss   STATUS, Z
03DD   2???           01702         goto    IRQ_RX1_BADGE_CHK_DONE
03DE   0801           01703         movf    INDF1, W
03DF   3904           01704         andlw   0x04                            ; check if badge already has cure if so skip (save EEPRO
                            M writes)
03E0   1903           01705         btfsc   STATUS, Z
03E1   2???           01706         goto    IRQ_RX1_BADGE_CHK_DONE
03E2   1101           01707         bcf             INDF1, 2                        ; Set cure rcvd
                      01708         ; indicate that this needs to be saved on next mainloop. 
03E3   1471           01709         bsf             g_flags, 0      
                      01710         ;goto   IRQ_RX1_BADGE_CHK_DONE
03E4                  01711 IRQ_RX1_BADGE_CHK_DONE  
                      01712         
03E4                  01713 IRQ_RX1_ignore_ns_dead_asleep   
                      01714         
                      01715         
03E4                  01716 IRQ_RX1_bad
                      01717         ; something was not right reset the rx seq and the checksum reg
03E4   01A0           01718         clrf    ir_rx_seq
03E5   01A1           01719         clrf    ir_rx_chksum
03E6                  01720 IRQ_not_RX1     
                      01721         
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01722         
                      01723         ;******************************************************************
                      01724         ; check if TX1 IRQ
                      01725         ;******************************************************************
                      01726         ;------------------
03E6   014E           01727         movlb   d'14'
                      01728         ;------------------     
03E7   1E19           01729         btfss   PIE3, TX1IE                     ; if the IRQ is not enabled ignore this check
03E8   2???           01730         goto    IRQ_not_TX1
03E9   1E0F           01731         btfss   PIR3, TX1IF                     ; check if IRQ is currently set
03EA   2???           01732         goto    IRQ_not_TX1
                      01733         ;------------------
03EB   0140           01734         movlb   d'0'
                      01735         ;------------------
                      01736         ; if in postcon disable IR transmitter else bogus data may cause game issues. 
03EC   1939           01737         btfsc   badge_ctrl, 2       ; bit 0 = logo tick , bit 1 = poo led, bit 2 = postcon mode 
03ED   2???           01738         goto    IRQ_TX1_done
                      01739         ;------------------
03EE   0142           01740         movlb   d'2'
                      01741         ;------------------
                      01742         ; IR header     
03EF   0827           01743         movf    ir_tx_seq, W
03F0   1D03           01744         btfss   STATUS, Z
03F1   2???           01745         goto    IRQ_TX1_sq1
                      01746         ; check if this is a response to another packet if so delay a bit before starting so RX path doe
                            s not get confused. 
03F2   1DF1           01747         btfss   g_flags, 3                              ; bit 0 = update flash, bit 1 = force stomach of
                            f, bit 2 = force poo off, bit 3 = enable TX delay
03F3   2???           01748         goto    IRQ_TX1_no_delay
03F4   01B2           01749         clrf    tx_delay2
03F5   01B1           01750         clrf    tx_delay
03F6                  01751 IRQ_TX1_delay
03F6   0BB1           01752         decfsz  tx_delay, F
03F7   2???           01753         goto    IRQ_TX1_delay
03F8   0BB2           01754         decfsz  tx_delay2, F
03F9   2???           01755         goto    IRQ_TX1_delay
03FA                  01756 IRQ_TX1_no_delay
03FA   11F1           01757         bcf             g_flags, 3                              ; bit 0 = update flash, bit 1 = force st
                            omach off, bit 2 = force poo off, bit 3 = enable TX delay
                      01758         ; your normal programing
03FB   3053           01759         movlw   0x53                            ; S
03FC   009A           01760         movwf   TX1REG
03FD   0AA7           01761         incf    ir_tx_seq, F
03FE   2???           01762         goto    IRQ_not_TX1             
03FF                  01763 IRQ_TX1_sq1     
03FF   0827           01764         movf    ir_tx_seq, W
0400   3A01           01765         xorlw   0x01
0401   1D03           01766         btfss   STATUS, Z
0402   2???           01767         goto    IRQ_TX1_sq2
0403   306D           01768         movlw   0x6D                            ; m
0404   009A           01769         movwf   TX1REG
0405   0AA7           01770         incf    ir_tx_seq, F
0406   2???           01771         goto    IRQ_not_TX1             
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0407                  01772 IRQ_TX1_sq2     
0407   0827           01773         movf    ir_tx_seq, W
0408   3A02           01774         xorlw   0x02
0409   1D03           01775         btfss   STATUS, Z
040A   2???           01776         goto    IRQ_TX1_sq3
040B   3061           01777         movlw   0x61                            ; a
040C   009A           01778         movwf   TX1REG
040D   0AA7           01779         incf    ir_tx_seq, F
040E   2???           01780         goto    IRQ_not_TX1             
040F                  01781 IRQ_TX1_sq3
040F   0827           01782         movf    ir_tx_seq, W
0410   3A03           01783         xorlw   0x03
0411   1D03           01784         btfss   STATUS, Z
0412   2???           01785         goto    IRQ_TX1_sq4
0413   3073           01786         movlw   0x73                            ; s
0414   009A           01787         movwf   TX1REG
0415   0AA7           01788         incf    ir_tx_seq, F
0416   2???           01789         goto    IRQ_not_TX1             
0417                  01790 IRQ_TX1_sq4
0417   0827           01791         movf    ir_tx_seq, W
0418   3A04           01792         xorlw   0x04
0419   1D03           01793         btfss   STATUS, Z
041A   2???           01794         goto    IRQ_TX1_sq5
041B   3068           01795         movlw   0x68                            ; h
041C   009A           01796         movwf   TX1REG
041D   0AA7           01797         incf    ir_tx_seq, F
041E   2???           01798         goto    IRQ_not_TX1             
041F                  01799 IRQ_TX1_sq5
041F   0827           01800         movf    ir_tx_seq, W
0420   3A05           01801         xorlw   0x05
0421   1D03           01802         btfss   STATUS, Z
0422   2???           01803         goto    IRQ_TX1_sq6
0423   303F           01804         movlw   0x3f                            ; ?
0424   009A           01805         movwf   TX1REG
0425   0AA7           01806         incf    ir_tx_seq, F
0426   303B           01807         movlw   0x3B                            ; S,m,a,s,h,? chars
0427   00A8           01808         movwf   ir_tx_chksum            
0428   2???           01809         goto    IRQ_not_TX1             
0429                  01810 IRQ_TX1_sq6
                      01811         ; status bits
0429   0827           01812         movf    ir_tx_seq, W
042A   3A06           01813         xorlw   0x06
042B   1D03           01814         btfss   STATUS, Z
042C   2???           01815         goto    IRQ_TX1_sq7
                      01816         ; build up status packet
042D   3023           01817         movlw   high(ram_status)        ;  bit 7 0 = dead, bit 6 0 = uber on, bit 5 0 = quest done, bit 
                            4 0 = quest start, bit 3 = 0 has egg, bit 2 = 0 is cured, bit 1 = 0 has pink eye, bit 0 = 0 con 
042E   0087           01818         movwf   FSR1H
042F   3070           01819         movlw   low(ram_status)
0430   0086           01820         movwf   FSR1L   
0431   01A9           01821         clrf    tx_status
0432   1C01           01822         btfss   INDF1, 0
0433   1429           01823         bsf             tx_status, 0            ; con start bit
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0434   1C81           01824         btfss   INDF1, 1
0435   14A9           01825         bsf             tx_status, 1            ; sick
0436   1D01           01826         btfss   INDF1, 2
0437   10A9           01827         bcf             tx_status, 1            ; sick but was cured (clear the bit I just set)
                      01828         
                      01829         ; other status bits here
                      01830         
0438   0829           01831         movf    tx_status, W                            
0439   009A           01832         movwf   TX1REG
043A   07A8           01833         addwf   ir_tx_chksum, F
043B   0AA7           01834         incf    ir_tx_seq, F
043C   2???           01835         goto    IRQ_not_TX1             
043D                  01836 IRQ_TX1_sq7     
                      01837         ; packet type
043D   0827           01838         movf    ir_tx_seq, W
043E   3A07           01839         xorlw   0x07
043F   1D03           01840         btfss   STATUS, Z
0440   2???           01841         goto    IRQ_TX1_sq8
0441   082A           01842         movf    tx_type, W                              
0442   009A           01843         movwf   TX1REG
0443   07A8           01844         addwf   ir_tx_chksum, F
0444   0AA7           01845         incf    ir_tx_seq, F
0445   01B0           01846         clrf    tx_data 
0446   2???           01847         goto    IRQ_not_TX1             
0447                  01848 IRQ_TX1_sq8
                      01849         ; badge ID
0447   0827           01850         movf    ir_tx_seq, W
0448   3A08           01851         xorlw   0x08
0449   1D03           01852         btfss   STATUS, Z
044A   2???           01853         goto    IRQ_TX1_sq9
044B   082C           01854         movf    badge_idH, W                            
044C   009A           01855         movwf   TX1REG
044D   07A8           01856         addwf   ir_tx_chksum, F
044E   0AA7           01857         incf    ir_tx_seq, F
044F   2???           01858         goto    IRQ_not_TX1             
0450                  01859 IRQ_TX1_sq9
0450   0827           01860         movf    ir_tx_seq, W
0451   3A09           01861         xorlw   0x09
0452   1D03           01862         btfss   STATUS, Z
0453   2???           01863         goto    IRQ_TX1_sq10
0454   082B           01864         movf    badge_idL, W                            
0455   009A           01865         movwf   TX1REG
0456   07A8           01866         addwf   ir_tx_chksum, F
0457   0AA7           01867         incf    ir_tx_seq, F
0458   2???           01868         goto    IRQ_not_TX1             
0459                  01869 IRQ_TX1_sq10
                      01870         ; data
0459   0827           01871         movf    ir_tx_seq, W
045A   3A0A           01872         xorlw   0x0A
045B   1D03           01873         btfss   STATUS, Z
045C   2???           01874         goto    IRQ_TX1_sq11
                      01875         ; check what type of packet is to be sent. 
045D   082A           01876         movf    tx_type, W
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 39


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

045E   3A02           01877         xorlw   0x02
045F   1903           01878         btfsc   STATUS, Z
0460   2???           01879         goto    IRQ_TX1_sq10_type2      ; type 2 dump
0461   082A           01880         movf    tx_type, W
0462   3A04           01881         xorlw   0x04
0463   1903           01882         btfsc   STATUS, Z
0464   2???           01883         goto    IRQ_TX1_sq10_type4      ; type 4 credit return
0465   082A           01884         movf    tx_type, W
0466   3A08           01885         xorlw   0x08
0467   1903           01886         btfsc   STATUS, Z
0468   2???           01887         goto    IRQ_TX1_sq10_type8      ; type 8 food request accepted
0469   0AA7           01888         incf    ir_tx_seq, F            ; Type 0 ping no data to transmit
046A   2???           01889         goto    IRQ_TX1_sq11            
                      01890         
046B                  01891 IRQ_TX1_sq10_type2
046B   0830           01892         movf    tx_data, W
046C   3A80           01893         xorlw   d'128'                          ; food byte
046D   1D03           01894         btfss   STATUS, Z       
046E   2???           01895         goto    IRQ_TX1_sq10_type1_nfood
                      01896         ;------------------
046F   0140           01897         movlb   d'0'
                      01898         ;------------------     
0470   083B           01899         movf    food_cnt, W
                      01900         ;------------------
0471   0142           01901         movlb   d'2'
                      01902         ;------------------     
0472   009A           01903         movwf   TX1REG
0473   07A8           01904         addwf   ir_tx_chksum, F 
0474   0AB0           01905         incf    tx_data, F
0475   2???           01906         goto    IRQ_not_TX1             
0476                  01907 IRQ_TX1_sq10_type1_nfood        
0476   0830           01908         movf    tx_data, W
0477   3A81           01909         xorlw   d'129'                          ; poo
0478   1D03           01910         btfss   STATUS, Z       
0479   2???           01911         goto    IRQ_TX1_sq10_type1_npoo
                      01912         ;------------------
047A   0140           01913         movlb   d'0'
                      01914         ;------------------     
047B   083C           01915         movf    poo_cnt, W
                      01916         ;------------------
047C   0142           01917         movlb   d'2'
                      01918         ;------------------     
047D   009A           01919         movwf   TX1REG
047E   07A8           01920         addwf   ir_tx_chksum, F 
047F   0AB0           01921         incf    tx_data, F
0480   2???           01922         goto    IRQ_not_TX1             
0481                  01923 IRQ_TX1_sq10_type1_npoo 
0481   0830           01924         movf    tx_data, W
0482   3A82           01925         xorlw   d'130'                          ; badge interal state (last byte of data to send)
0483   1D03           01926         btfss   STATUS, Z       
0484   2???           01927         goto    IRQ_TX1_sq10_type1_nstate
                      01928         ;------------------
0485   0140           01929         movlb   d'0'
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 40


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01930         ;------------------             
0486   082C           01931         movf    badge_status, W
                      01932         ;------------------
0487   0142           01933         movlb   d'2'
                      01934         ;------------------             
0488   009A           01935         movwf   TX1REG
0489   07A8           01936         addwf   ir_tx_chksum, F 
048A   0AB0           01937         incf    tx_data, F
048B   2???           01938         goto    IRQ_not_TX1             
048C                  01939 IRQ_TX1_sq10_type1_nstate       
048C   0830           01940         movf    tx_data, W
048D   3A83           01941         xorlw   d'131'                          ; badge interal state (last byte of data to send)
048E   1D03           01942         btfss   STATUS, Z       
048F   2???           01943         goto    IRQ_TX1_sq10_type1_nstate1
                      01944         ;------------------
0490   0140           01945         movlb   d'0'
                      01946         ;------------------             
0491   0839           01947         movf    badge_ctrl, W
                      01948         ;------------------
0492   0142           01949         movlb   d'2'
                      01950         ;------------------             
0493   009A           01951         movwf   TX1REG
0494   07A8           01952         addwf   ir_tx_chksum, F 
0495   0AB0           01953         incf    tx_data, F
0496   2???           01954         goto    IRQ_not_TX1                     
0497                  01955 IRQ_TX1_sq10_type1_nstate1      
0497   0830           01956         movf    tx_data, W
0498   3A84           01957         xorlw   d'132'                          ; once high byte
0499   1D03           01958         btfss   STATUS, Z       
049A   2???           01959         goto    IRQ_TX1_sq10_type1_nonceh
                      01960         ;------------------
049B   0140           01961         movlb   d'0'
                      01962         ;------------------             
049C   2???           01963         call    _CYCLE_LFSR16           ; when in precon mode LFSR is not running. Prevent predictive ON
                            CE values even in that case. 
049D   0832           01964         movf    LFSR_0, W                       
                      01965         ;------------------
049E   0142           01966         movlb   d'2'
                      01967         ;------------------
049F   00CA           01968         movwf   onceH
04A0   009A           01969         movwf   TX1REG
04A1   07A8           01970         addwf   ir_tx_chksum, F 
04A2   0AB0           01971         incf    tx_data, F
04A3   2???           01972         goto    IRQ_not_TX1                     
04A4                  01973 IRQ_TX1_sq10_type1_nonceh       
04A4   0830           01974         movf    tx_data, W
04A5   3A85           01975         xorlw   d'133'                          ; once low byte
04A6   1D03           01976         btfss   STATUS, Z       
04A7   2???           01977         goto    IRQ_TX1_sq10_type1_nctl
                      01978         ;------------------
04A8   0140           01979         movlb   d'0'
                      01980         ;------------------             
04A9   0833           01981         movf    LFSR_1, W                       
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 41


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01982         ;------------------
04AA   0142           01983         movlb   d'2'
                      01984         ;------------------
04AB   00CB           01985         movwf   onceL   
04AC   009A           01986         movwf   TX1REG
04AD   07A8           01987         addwf   ir_tx_chksum, F 
04AE   0AB0           01988         incf    tx_data, F
04AF   0AA7           01989         incf    ir_tx_seq, F            ; last byte in dump inc it
04B0   2???           01990         goto    IRQ_not_TX1                     
04B1                  01991 IRQ_TX1_sq10_type1_nctl 
                      01992         ; send out buffer bytes
04B1   3023           01993         movlw   high(start_buffer)
04B2   0087           01994         movwf   FSR1H
04B3   3070           01995         movlw   low(start_buffer)
04B4   0086           01996         movwf   FSR1L
04B5   0830           01997         movf    tx_data, W
04B6   0786           01998         addwf   FSR1L, F
04B7   1803           01999         btfsc   STATUS, C                       ; check for carry
04B8   0A87           02000         incf    FSR1H, F
04B9   0901           02001         comf    INDF1, W
04BA   009A           02002         movwf   TX1REG
04BB   07A8           02003         addwf   ir_tx_chksum, F 
04BC   0AB0           02004         incf    tx_data, F
04BD   2???           02005         goto    IRQ_not_TX1     
                      02006         
04BE                  02007 IRQ_TX1_sq10_type4
04BE   3001           02008         movlw   high(temp_crypt0)       
04BF   0087           02009         movwf   FSR1H
04C0   3050           02010         movlw   low(temp_crypt0)
04C1   0086           02011         movwf   FSR1L
04C2   0830           02012         movf    tx_data, W
04C3   0786           02013         addwf   FSR1L, F
04C4   0801           02014         movf    INDF1, W
04C5   009A           02015         movwf   TX1REG
04C6   07A8           02016         addwf   ir_tx_chksum, F 
04C7   0AB0           02017         incf    tx_data, F
04C8   0830           02018         movf    tx_data, W
04C9   3A0A           02019         xorlw   0x0A
04CA   1903           02020         btfsc   STATUS, Z
04CB   0AA7           02021         incf    ir_tx_seq, F            ; last byte in xfer inc it      
04CC   2???           02022         goto    IRQ_not_TX1             
                      02023 
04CD                  02024 IRQ_TX1_sq10_type8
04CD   3023           02025         movlw   high(start_rx_buffer)   
04CE   0087           02026         movwf   FSR1H
04CF   3020           02027         movlw   low(start_rx_buffer)
04D0   0086           02028         movwf   FSR1L
04D1   0801           02029         movf    INDF1, W
04D2   009A           02030         movwf   TX1REG
04D3   07A8           02031         addwf   ir_tx_chksum, F 
04D4   0AB0           02032         incf    tx_data, F
04D5   0AA7           02033         incf    ir_tx_seq, F            ; last byte in xfer inc it
04D6   2???           02034         goto    IRQ_not_TX1                     
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 42


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02035         
04D7                  02036 IRQ_TX1_sq11
04D7   0827           02037         movf    ir_tx_seq, W
04D8   3A0B           02038         xorlw   0x0B
04D9   1D03           02039         btfss   STATUS, Z
04DA   2???           02040         goto    IRQ_TX1_done            ; something bad happened just abort now
04DB   09A8           02041         comf    ir_tx_chksum, F
04DC   0A28           02042         incf    ir_tx_chksum, W
04DD   009A           02043         movwf   TX1REG
                      02044         
                      02045         
04DE                  02046 IRQ_TX1_done    
                      02047         ;------------------
04DE   014E           02048         movlb   d'14'
                      02049         ;------------------     
04DF   1219           02050         bcf     PIE3, TX1IE                             ; buffer empty disable Uart2 transmit IRQ       
04E0                  02051 IRQ_not_TX1
                      02052         
                      02053         
04E0   0009           02054         retfie
                      02055 ;#######################################################################################################
                            ####################
                      02056 ; end of IRQ code
                      02057 ;#######################################################################################################
                            ####################    
                      02058         
04E1                  02059 START
                      02060         ; init crap
                      02061         ;------------------
04E1   0140           02062         movlb   d'0'
                      02063         ;------------------
04E2   018B           02064         clrf    INTCON                      ; disable interupts
04E3   0198           02065         clrf    LATA                        ; All low
04E4   30B0           02066         movlw   0xB0                            
04E5   0099           02067         movwf   LATB                        ; SDA, SCL, and IR_OUT high reset low
04E6   3067           02068         movlw   0x67                                    
04E7   009A           02069         movwf   LATC                        ; reset and both chip selects high reset low. 
                      02070 
04E8   3034           02071         movlw   0x34                            ; Set boad id pins as inputs reset as outputs
04E9   0092           02072         movwf   TRISA                       ; 0 = output 
04EA   3070           02073         movlw   0x70                            ; Set I2C bus and IR_in as inputs rest outputs
04EB   0093           02074         movwf   TRISB                       ; 0 = output        
04EC   3081           02075         movlw   0x81                            ; Set Postcon and MISO as inputs reset outputs
04ED   0094           02076         movwf   TRISC                       ; 0 = output        
                      02077 
                      02078         
                      02079         ; clear control global vars
04EE   01F1           02080         clrf    g_flags
                      02081         
                      02082         ; clear vars first 80 bytes (control structures) 
04EF   3020           02083         movlw   0x20                    ; start of bank 0 vars
04F0   0084           02084         movwf   FSR0L
04F1   0185           02085         clrf    FSR0H
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 43


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

04F2   3050           02086         movlw   0x50                    ; clear all of bank other than globals
04F3   00F0           02087         movwf   g_temp
04F4                  02088 init_bank0_loop
04F4   0180           02089         clrf    INDF0
04F5   0A84           02090         incf    FSR0L, F
04F6   0BF0           02091         decfsz  g_temp, F
04F7   2???           02092         goto    init_bank0_loop 
                      02093 
                      02094         ; clear bank 2 80 bytes (control structures) 
04F8   3020           02095         movlw   0x20                    ; start of bank 0 vars
04F9   0084           02096         movwf   FSR0L
04FA   3001           02097         movlw   0x01
04FB   0085           02098         movwf   FSR0H
04FC   3050           02099         movlw   0x50                    ; clear all of bank other than globals
04FD   00F0           02100         movwf   g_temp
04FE                  02101 init_bank2_loop
04FE   0180           02102         clrf    INDF0
04FF   0A84           02103         incf    FSR0L, F
0500   0BF0           02104         decfsz  g_temp, F
0501   2???           02105         goto    init_bank2_loop 
                      02106         
                      02107         ; load setting register from flash into Banks 11 and 12
0502   3023           02108         movlw   high(start_buffer)
0503   0085           02109         movwf   FSR0H                           ; address of first ram reg
0504   3070           02110         movlw   low(start_buffer)
0505   0084           02111         movwf   FSR0L   
0506   309F           02112         movlw   high(start_eeprom)      ; address of flash start (note flash address + 0x8000)
0507   0087           02113         movwf   FSR1H
0508   3080           02114         movlw   low(start_eeprom)
0509   0086           02115         movwf   FSR1L
050A   3080           02116         movlw   buffer_length
050B   00F0           02117         movwf   g_temp
050C                  02118 load_loop
050C   0801           02119         movf    INDF1, W
050D   0080           02120         movwf   INDF0
050E   0A84           02121         incf    FSR0L, F
050F   0A86           02122         incf    FSR1L, F
0510   0BF0           02123         decfsz  g_temp, F
0511   2???           02124         goto    load_loop
                      02125         
                      02126         
                      02127         ; configure time phase to not be 0 at startup (causes a extra long initial delay
0512   3001           02128         movlw   0x01
0513   00A8           02129         movwf   time_phase
                      02130         ; load food and poo counters
0514   30FF           02131         movlw   food_startup
0515   00BB           02132         movwf   food_cnt
0516   3000           02133         movlw   poo_startup
0517   00BC           02134         movwf   poo_cnt
                      02135         ;clrf   poo_temp
                      02136         ; init led cycle so not in sync at startup
                      02137         ;clrf   logo_a
                      02138         ;movlw  0xFF
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 44


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02139         ;movwf  logo_r
                      02140         ;movlw  0x80
                      02141         ;movwf  logo_g
                      02142         ;clrf   logo_b
                      02143         
                      02144                 
                      02145         ; set bit for this badge if not already set
                      02146         ;------------------
0518   0150           02147         movlb   d'16'
                      02148         ;------------------     
                      02149         ; get the user ID data (badge ID) 
0519   019B           02150         clrf    NVMADRH
051A   019A           02151         clrf    NVMADRL
051B   3041           02152         movlw   0x41
051C   009E           02153         movwf   NVMCON1                                 ; read the config space selected
051D   0000           02154         nop                                                             ; instruction requires 1 cycle t
                            o complete. (may not be needed but just to be safe.)
051E   081C           02155         movf    NVMDATL, W
                      02156         ;------------------
051F   0140           02157         movlb   d'0'
                      02158         ;------------------     
0520   00A0           02159         movwf   temp
0521   00B2           02160         movwf   LFSR_0                                  ; seed random number gen
0522   1632           02161         bsf             LFSR_0, 4                               ; make sure the LFSR is NOT all 0!!!
0523   00B4           02162         movwf   LFSR_2
                      02163         ;------------------
0524   0142           02164         movlb   d'2'
                      02165         ;------------------     
0525   00AB           02166         movwf   badge_idL
                      02167         ;------------------
0526   0150           02168         movlb   d'16'
                      02169         ;------------------     
0527   081D           02170         movf    NVMDATH, W
                      02171         ;------------------
0528   0142           02172         movlb   d'2'
                      02173         ;------------------     
0529   00AC           02174         movwf   badge_idH
                      02175         ;------------------
052A   0140           02176         movlb   d'0'
                      02177         ;------------------     
052B   00A1           02178         movwf   temp1
052C   00B3           02179         movwf   LFSR_1                                  ; seed random number gen
052D   00B5           02180         movwf   LFSR_3                                  
                      02181         ; set badge as found in ram
052E   0820           02182         movf    temp, W
052F   00A5           02183         movwf   offset
0530   0CA1           02184         rrf             temp1, F                        ; need to rotate 2 bits over 
0531   0CA5           02185         rrf             offset, F
0532   0CA1           02186         rrf             temp1, F                        ; need to rotate 2 bits over 
0533   0CA5           02187         rrf             offset, F
0534   1003           02188         bcf             STATUS, C
0535   0CA5           02189         rrf             offset, F
0536   3023           02190         movlw   high(start_buffer_objs)
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 45


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0537   0087           02191         movwf   FSR1H
0538   0825           02192         movf    offset, W
0539   3E90           02193         addlw   low(start_buffer_objs)
053A   0086           02194         movwf   FSR1L
                      02195         ; take the low 3 bits rotate 1 left (jump 2 for each) then branch
053B   1003           02196         bcf             STATUS, C
053C   0D20           02197         rlf             temp, W
053D   390E           02198         andlw   0x0E
053E   000B           02199         brw
053F   1001           02200         bcf             INDF1, 0
0540   2???           02201         goto    START_ID_UPDATE_DONE    
0541   1081           02202         bcf             INDF1, 1
0542   2???           02203         goto    START_ID_UPDATE_DONE    
0543   1101           02204         bcf             INDF1, 2
0544   2???           02205         goto    START_ID_UPDATE_DONE    
0545   1181           02206         bcf             INDF1, 3
0546   2???           02207         goto    START_ID_UPDATE_DONE    
0547   1201           02208         bcf             INDF1, 4
0548   2???           02209         goto    START_ID_UPDATE_DONE    
0549   1281           02210         bcf             INDF1, 5
054A   2???           02211         goto    START_ID_UPDATE_DONE    
054B   1301           02212         bcf             INDF1, 6
054C   2???           02213         goto    START_ID_UPDATE_DONE    
054D   1381           02214         bcf             INDF1, 7
                      02215 ;       goto    IRQ_RX_ID_UPDATE_DONE           
054E                  02216 START_ID_UPDATE_DONE    
                      02217 
                      02218         ; get inital interaction count
054E   3023           02219         movlw   high(start_buffer_objs)
054F   0087           02220         movwf   FSR1H
0550   3090           02221         movlw   low(start_buffer_objs)
0551   0086           02222         movwf   FSR1L   
0552   3060           02223         movlw   objs_length
0553   00A0           02224         movwf   temp
0554                  02225 count_bits_loop
0554   3008           02226         movlw   0x08
0555   00A5           02227         movwf   offset
0556   0801           02228         movf    INDF1,W
0557   00A1           02229         movwf   temp1
0558                  02230 count_bits_shift_loop
0558   0CA1           02231         rrf             temp1, F
0559   1803           02232         btfsc   STATUS, C       
055A   2???           02233         goto    count_bits_skip
055B   0AA6           02234         incf    countL, F
055C   1903           02235         btfsc   STATUS, Z
055D   0AA7           02236         incf    countH, F
055E                  02237 count_bits_skip 
055E   0BA5           02238         decfsz  offset, F
055F   2???           02239         goto    count_bits_shift_loop
0560   0A86           02240         incf    FSR1L, F
0561   0BA0           02241         decfsz  temp, F
0562   2???           02242         goto    count_bits_loop         
                      02243         
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 46


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02244         ; set up the badge status 
0563   3023           02245         movlw   high(ram_status)        ;  bit 7 0 = dead, bit 6 0 = uber on, bit 5 0 = quest done, bit 
                            4 0 = quest start, bit 3 = 0 has egg, bit 2 = 0 is cured, bit 1 = 0 has pink eye, bit 0 = 0 con 
0564   0087           02246         movwf   FSR1H
0565   3070           02247         movlw   low(ram_status)
0566   0086           02248         movwf   FSR1L   
0567   1801           02249         btfsc   INDF1, 0                        ; check if con is started
0568   2???           02250         goto    START_skip_status
0569   1B81           02251         btfsc   INDF1, 7                        ; check if dead
056A   142C           02252         bsf             badge_status, 0         ; bit 0,1 = 0 dead, 1 sleep, 2 active, 3 hyper; bit 2 = 
                            egg led state; bit 3 = stomach led state; bit 4 = amber dir; bit 5 = red dir; bit 6 = green dir;
056B                  02253 START_skip_status       
                      02254 
                      02255         
                      02256         ;------------------
056B   0142           02257         movlb   d'2'
                      02258         ;------------------     
                      02259         ; check if badge is founder, lifetime, or vendor if so it can never die
056C   3002           02260         movlw   high(founder_badge)
056D   022C           02261         subwf   badge_idH, W                    ; f - W, C = 0 if W > f, C = 1 if W <= f
056E   1C03           02262         btfss   STATUS, C
056F   2???           02263         goto    START_undead_chk_done           ; normal or speaker badge...
0570   1D03           02264         btfss   STATUS, Z                       ; if greater than limit skip to next check
0571   2???           02265         goto    START_undead_founder
0572   3040           02266         movlw   low(founder_badge)
0573   022B           02267         subwf   badge_idL, W                    ; f - W, C = 0 if W > f, C = 1 if W <= f
0574   1C03           02268         btfss   STATUS, C
0575   2???           02269         goto    START_undead_chk_done           ; normal or speaker badge...
0576                  02270 START_undead_founder
0576   16F1           02271         bsf     g_flags, 5                      ; bit 0 = update flash, bit 1 = force stomach off, bit 2
                             = force poo off, bit 3 = enable TX delay, bit 4 = Hyron badge ID set, bit 5 = undead
0577                  02272 START_undead_chk_done   
                      02273         
                      02274         ;------------------
0577   0144           02275         movlb   d'4'
                      02276         ;------------------
                      02277         ; set up timer 1 to roll over on a 20Hz period
0578   018D           02278         clrf    TMR1H
0579   018C           02279         clrf    TMR1L
057A   0190           02280         clrf    T1GATE                      ; T1GPPS (not used)
057B   3001           02281         movlw   0x01                            ; use Fosc/4 MFINTOSC
057C   0091           02282         movwf   T1CLK                           
057D   018F           02283         clrf    T1GCON                          ; gate control disabled
057E   3011           02284         movlw   0x11                        ; timer 1 on, 1:2 pre
057F   008E           02285         movwf   T1CON
                      02286 
                      02287         
                      02288         ;------------------
0580   0145           02289         movlb   d'5'
                      02290         ;------------------
                      02291         ; set up timer 2 to roll over on a 38kHz period (37.9 something)
0581   018C           02292         clrf    TMR2
0582   30D3           02293         movlw   0xD3                        ; period reg 
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 47


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0583   008D           02294         movwf   PR2
0584   3001           02295         movlw   0x01                        ; select Fosc/4 as the input clock
0585   0090           02296         movwf   T2CLKCON
0586   018F           02297         clrf    T2HLT                       ; mode 0 (free run standard) 
0587   0191           02298         clrf    T2RST                       ; not used
0588   3080           02299         movlw   0x80                        ; timer 2 on, 1:1 pre, 1:1 post
0589   008E           02300         movwf   T2CON
                      02301 
                      02302         ;------------------
058A   0142           02303         movlb   d'2'
                      02304         ;------------------
                      02305         ; set up uart 1
058B   3020           02306         movlw   0x20
058C   009E           02307         movwf   TX1STA                                  ; tx on, 8 bit tx, low baud 
058D   019F           02308         clrf    BAUD1CON                                ; Pol normal, 8 bit baud, 
058E   30A6           02309         movlw   0xA6
058F   009B           02310         movwf   SP1BRGL                                 ; baud rate for 3000 baud -0.2% off
0590   019C           02311         clrf    SP1BRGH
0591   3090           02312         movlw   0x90
0592   009D           02313         movwf   RC1STA                                  ; UART on, 8 bit rx, CREN on
                      02314         
                      02315         ;------------------
0593   0146           02316         movlb   d'6'
                      02317         ;------------------     
                      02318         ; set up PWM engine
0594   3015           02319         movlw   IR_PULSE_WIDTH
0595   009D           02320         movwf   PWM5DCH
0596   30C0           02321         movlw   0xC0
0597   009C           02322         movwf   PWM5DCL
0598   3080           02323         movlw   0x80                        ; engine on, active high
0599   009E           02324         movwf   PWM5CON
                      02325 
                      02326         ;------------------
059A   014B           02327         movlb   d'11'
                      02328         ;------------------     
                      02329         ; Set up TMR0
059B   30F2           02330         movlw   0xF2                                    ; ~0.25s delay
059C   009D           02331         movwf   TMR0H
059D   019C           02332         clrf    TMR0L   
059E   3095           02333         movlw   0x95                                    ; LFINTOSC 31kHz, no sync, 1:32 prescaler
059F   009F           02334         movwf   T0CON1
05A0   3080           02335         movlw   0x80                                    ; timer on, 8 bit, 1:1 postscaler
05A1   009E           02336         movwf   T0CON0  
                      02337         
                      02338         ;------------------
05A2   014E           02339         movlb   d'14'
                      02340         ;------------------     
                      02341         ; set up interupts
05A3   018C           02342         clrf    PIR0
05A4   3020           02343         movlw   0x20                                    ; TMR0
05A5   0096           02344         movwf   PIE0
05A6   018F           02345         clrf    PIR3
                      02346 ;       movlw   0x00
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 48


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02347 ;       iorlw   0x80                                    ; RC2IE (uart)
                      02348 ;       iorlw   0x40                                    ; TX2IE (uart)
                      02349 ;       iorlw   0x20                                    ; RC1IE (uart)
                      02350 ;       iorlw   0x10                                    ; TX1IE (uart)
05A7   3020           02351         movlw   0x20
05A8   0099           02352         movwf   PIE3
05A9   0190           02353         clrf    PIR4
05AA   3001           02354         movlw   0x01                                    ; TMR1E
05AB   009A           02355         movwf   PIE4
                      02356         
                      02357         ;------------------
05AC   017C           02358         movlb   d'60'
                      02359         ;------------------
                      02360         ; configure CLC for IRDA output 
05AD   3013           02361         movlw   0x13
05AE   00A6           02362         movwf   CLC3SEL0                                ; data 1 PWM5
05AF   301F           02363         movlw   0x1F
05B0   00A7           02364         movwf   CLC3SEL1                                ; data 2 TX1
05B1   3013           02365         movlw   0x13
05B2   00A8           02366         movwf   CLC3SEL2                                ; data 3 PWM5
05B3   3013           02367         movlw   0x13
05B4   00A9           02368         movwf   CLC3SEL3                                ; data 4 PWM5   
05B5   3002           02369         movlw   0x02
05B6   00AA           02370         movwf   CLC3GLS0                                ; data 1 connected to input 1 normal
05B7   3008           02371         movlw   0x08
05B8   00AB           02372         movwf   CLC3GLS1                                ; data 2 connected to input 2 normal
05B9   3000           02373         movlw   0x00
05BA   00AC           02374         movwf   CLC3GLS2                                ; nothing connected to input 3
05BB   3000           02375         movlw   0x00
05BC   00AD           02376         movwf   CLC3GLS3                                ; nothing connected to input 4
05BD   308E           02377         movlw   0x8E
05BE   00A5           02378         movwf   CLC3POL                                 ; inputs 1, 2 normal 3, 4 inverted, and output i
                            nverted (direct driving a LED from V+ vs fet driven)
05BF   3082           02379         movlw   0x82                                    ; CLC enabled, no IRQs, 4 input 
05C0   00A4           02380         movwf   CLC3CON
                      02381         
                      02382         ;------------------
05C1   017D           02383         movlb   d'61'
                      02384         ;------------------
                      02385         ; unlock bits
05C2   3055           02386         movlw   0x55
05C3   008F           02387         movwf   PPSLOCK
05C4   30AA           02388         movlw   0xAA
05C5   008F           02389         movwf   PPSLOCK
05C6   100F           02390         bcf             PPSLOCK, PPSLOCKED
                      02391         
                      02392         ; input PPS signals
05C7   300E           02393         movlw   0x0E                                    ; RB6
05C8   00CB           02394         movwf   RX1DTPPS        
05C9   300D           02395         movlw   0x0D                                    ; RB5
05CA   00C6           02396         movwf   SSP1DATPPS      
05CB   300C           02397         movlw   0x0C                                    ; RB4
05CC   00C5           02398         movwf   SSP1CLKPPS      
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 49


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02399         
                      02400         ;------------------
05CD   017E           02401         movlb   d'62'
                      02402         ;------------------     
05CE   01B8           02403         clrf    ANSELA                          ; 0 = digital, 1 = analog 
05CF   01C3           02404         clrf    ANSELB                          ; 0 = digital, 1 = analog 
05D0   01CE           02405         clrf    ANSELC                          ; 0 = digital, 1 = analog 
                      02406         
05D1   3034           02407         movlw   0x34                            ; enable weak pull up on portA 0
05D2   00B9           02408         movwf   WPUA                            
                      02409         ;movlw  0x01                            ; enable weak pull up on portC 0
                      02410         ;movwf  WPUC                            
                      02411 
                      02412         ; output PPS signals
05D3   3003           02413         movlw   0x03                            ; CLC3OUT (IR TX)
05D4   009F           02414         movwf   RB7PPS                          ; IR led
05D5   3015           02415         movlw   0x15                            ; SCK1/SCL1
05D6   009C           02416         movwf   RB4PPS
05D7   3016           02417         movlw   0x16                            ; SDO1/SDA1
05D8   009D           02418         movwf   RB5PPS
                      02419 
                      02420         
                      02421 ;       ;------------------
                      02422 ;       movlb   d'61'
                      02423 ;       ;------------------     
                      02424 ; Do not lock the PPS as we need to move it back and fourth to use one MSSP for both I2C and SPI devices
                            .       
                      02425 ;       ; lock bits
                      02426 ;       movlw   0x55
                      02427 ;       movwf   PPSLOCK
                      02428 ;       movlw   0xAA
                      02429 ;       movwf   PPSLOCK
                      02430 ;       bsf             PPSLOCK, PPSLOCKED      
                      02431         
                      02432         ;------------------
05D9   0143           02433         movlb   d'3'
                      02434         ;------------------
                      02435         ; disable i2c engine 
05DA   0190           02436         clrf    SSP1CON1                    ; reset I2C
                      02437         
                      02438         
05DB   0191           02439         clrf    SSP1CON2
05DC   0192           02440         clrf    SSP1CON3
05DD   018F           02441         clrf    SSP1STAT
05DE   3080           02442         movlw   0x80                        ; slew off, smb off
05DF   008F           02443         movwf   SSP1STAT        
05E0   30FF           02444         movlw   0xFF
05E1   008E           02445         movwf   SSP1MSK
05E2   304F           02446         movlw   0x4F                        ; 0x4F with a 32MHz FOSC = 100kHz
05E3   008D           02447         movwf   SSP1ADD                     ; I2C clock = FOSC/((ADD<7:0> + 1) *4)
05E4   3028           02448         movlw   0x28                        ; port enabled, I2C master mode  
05E5   0090           02449         movwf   SSP1CON1        
                      02450 
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 50


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02451         ;------------------
05E6   0140           02452         movlb   d'0'
                      02453         ;------------------
05E7   30C0           02454         movlw   0xC0
05E8   008B           02455         movwf   INTCON                      ; enable interrupts
                      02456 
                      02457         ; if con is started use sleep animation, If not use precon
05E9   3023           02458         movlw   high(ram_status)        ;  bit 7 0 = dead, bit 6 0 = uber on, bit 5 0 = quest done, bit 
                            4 0 = quest start, bit 3 = 0 has egg, bit 2 = 0 is cured, bit 1 = 0 has pink eye, bit 0 = 0 con 
05EA   0087           02459         movwf   FSR1H
05EB   3070           02460         movlw   low(ram_status)
05EC   0086           02461         movwf   FSR1L   
05ED   3006           02462         movlw   0x06
05EE   1C01           02463         btfss   INDF1, 0
05EF   00C3           02464         movwf   oLED_set
                      02465 
                      02466         ; if badge is dead move animation to that mode else use above
05F0   3023           02467         movlw   high(ram_status)        ;  bit 7 0 = dead, bit 6 0 = uber on, bit 5 0 = quest done, bit 
                            4 0 = quest start, bit 3 = 0 has egg, bit 2 = 0 is cured, bit 1 = 0 has pink eye, bit 0 = 0 con 
05F1   0087           02468         movwf   FSR1H
05F2   3070           02469         movlw   low(ram_status)
05F3   0086           02470         movwf   FSR1L   
05F4   3008           02471         movlw   0x08
05F5   1F81           02472         btfss   INDF1, 7
05F6   00C3           02473         movwf   oLED_set
                      02474         
                      02475         
                      02476         ; check for postcon mode
05F7   1B8E           02477         btfsc   PORTC, 7
05F8   1539           02478         bsf     badge_ctrl, 2   ; bit 0 = logo tick , bit 1 = poo led, bit 2 = postcon mode
                      02479         
                      02480         
                      02481         ;-----------------------------------------------------------------------------------------------
                            -------
                      02482         ; init the LED driver
                      02483 
                      02484         ; case the LED driver chip was left in a weird state    
05F9   1219           02485         bcf     LATB, 4
05FA   1213           02486         bcf     TRISB, 4
05FB   1613           02487         bsf     TRISB, 4        
05FC   2???           02488         call    _I2C_STOP
                      02489         
                      02490         ; reset the device
05FD   304F           02491         movlw   0x4F                        ; address byte
05FE   00A2           02492         movwf   i2c_off
05FF   01A3           02493         clrf    i2c_dat0                    ; data byte (0x00 reset device)
0600   2???           02494         call    _LED_WRITE_1
                      02495 
                      02496         ; software power up (off after reset)
0601   01A2           02497         clrf    i2c_off                     ; address byte
0602   3001           02498         movlw   0x01
0603   00A3           02499         movwf   i2c_dat0                    ; data byte (0x00 reset device)
0604   2???           02500         call    _LED_WRITE_1            
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 51


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02501         
                      02502         ; reset the device
0605   304F           02503         movlw   0x4F                        ; address byte
0606   00A2           02504         movwf   i2c_off
0607   01A3           02505         clrf    i2c_dat0                    ; data byte (0x00 reset device)
0608   2???           02506         call    _LED_WRITE_2
                      02507 
                      02508         ; software power up (off after reset)
0609   01A2           02509         clrf    i2c_off                     ; address byte
060A   3001           02510         movlw   0x01
060B   00A3           02511         movwf   i2c_dat0                    ; data byte (0x00 reset device)
060C   2???           02512         call    _LED_WRITE_2            
                      02513         
                      02514         ; init LED drive for LOGO LEDs
060D   2???           02515         call    _I2C_START      
060E   3078           02516         movlw   0x78                        ; ISSI chip address
060F   2???           02517         call    _SEND_W_I2C
0610   3026           02518         movlw   0x26                            ; reg offset
0611   2???           02519         call    _SEND_W_I2C     
0612   3024           02520         movlw   d'36'                           ; loop though all leds and turn them on
0613   00A0           02521         movwf   temp
0614                  02522 INIT_update_loop1       
0614   3001           02523         movlw   0x01                            ; enable led full current
0615   2???           02524         call    _SEND_W_I2C
0616   0BA0           02525         decfsz  temp, F
0617   2???           02526         goto    INIT_update_loop1
0618   2???           02527         call    _I2C_STOP       
                      02528         
0619   2???           02529         call    _I2C_START      
061A   307E           02530         movlw   0x7E                        ; ISSI chip address
061B   2???           02531         call    _SEND_W_I2C
061C   3026           02532         movlw   0x26                            ; reg offset
061D   2???           02533         call    _SEND_W_I2C     
061E   3024           02534         movlw   d'36'                           ; loop though all leds and turn them on
061F   00A0           02535         movwf   temp
0620                  02536 INIT_update_loop2       
0620   3001           02537         movlw   0x01                            ; enable led full current
0621   2???           02538         call    _SEND_W_I2C
0622   0BA0           02539         decfsz  temp, F
0623   2???           02540         goto    INIT_update_loop2
0624   2???           02541         call    _I2C_STOP       
                      02542 
                      02543         
0625   3198           02544         movlp   0x18
0626   2???           02545         goto    oLED_INIT
0627                  02546 oLED_INIT_return        
                      02547         
0627   2???           02548         call    _CFG_I2C
                      02549 
0628   3180           02550         movlp   0x00
                      02551 #ifndef debug
0629   198C           02552         btfsc   PORTA, 3                        ; social button
                      02553 #endif ;        
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 52


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

062A   2???           02554         goto    LED_SELFTEST_DONE
062B   3188           02555         movlp   0x08
062C   2???           02556         goto    LED_SELFTEST
062D                  02557 LED_SELFTEST_DONE
                      02558         
062D   3198           02559         movlp   0x18
062E   2???           02560         goto    oLED_EEPROM_INIT
062F                  02561 oLED_EEPROM_INIT_return 
                      02562         
062F   2???           02563         call    _CFG_I2C        
                      02564         
0630   2???           02565         goto    MAINLOOP        
                      02566         
0631                  02567 CHECK_SPI_FAIL_INIT     
0631   169A           02568         bsf             LATC, 5                         ; SPI EEPROM CS pin
0632   2???           02569         call    _CFG_I2C
                      02570         
                      02571         ; disable IOs to allow programer acess to the chip
0633   30A7           02572         movlw   0xA7                            ; Set Postcon, MISO, MOSI, Sclk, and EEPROM_CS as inputs
                             reset outputs
0634   0094           02573         movwf   TRISC                       ; 0 = output                
                      02574         
                      02575         ; make RA0 a input and turn on weak pull up used to stop poop led blinking to keep SPI programmi
                            ng from corrupting. 
0635   3035           02576         movlw   0x35                            ; Set boad id pins and RA0 as inputs reset as outputs
0636   0092           02577         movwf   TRISA                       ; 0 = output 
                      02578         ;------------------
0637   017E           02579         movlb   d'62'
                      02580         ;------------------     
0638   3035           02581         movlw   0x35                            ; enable weak pull up on portA 0
0639   00B9           02582         movwf   WPUA                            
                      02583         ;------------------
063A   0140           02584         movlb   d'0'
                      02585         ;------------------     
                      02586         
                      02587         
063B                  02588 CHECK_SPI_FAIL  
                      02589                 
                      02590         ; turn on white led
063B   301C           02591         movlw   d'28'
063C   00A2           02592         movwf   i2c_off                     ; address byte
063D   30FF           02593         movlw   0xff
063E   00A3           02594         movwf   i2c_dat0                    
063F   2???           02595         call    _LED_WRITE_1            
0640   2???           02596         call    _LED_SET_1                      ; update the leds to the new state
                      02597 
0641   3001           02598         movlw   0x01
0642   00F3           02599         movwf   delay_cnt
0643                  02600 CHECK_SPI_FAIL_DELAY1
0643   0873           02601         movf    delay_cnt, W
0644   1D03           02602         btfss   STATUS, Z
0645   2???           02603         goto    CHECK_SPI_FAIL_DELAY1
                      02604         
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 53


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02605         ; turn off white led
0646   301C           02606         movlw   d'28'
0647   00A2           02607         movwf   i2c_off                     ; address byte
0648   3000           02608         movlw   0x00
0649   00A3           02609         movwf   i2c_dat0                    
064A   2???           02610         call    _LED_WRITE_1    
064B   2???           02611         call    _LED_SET_1                      ; update the leds to the new state
                      02612 
064C   3001           02613         movlw   0x01
064D   00F3           02614         movwf   delay_cnt
064E                  02615 CHECK_SPI_FAIL_DELAY2
064E   0873           02616         movf    delay_cnt, W
064F   1D03           02617         btfss   STATUS, Z
0650   2???           02618         goto    CHECK_SPI_FAIL_DELAY2
                      02619         
0651   1C0C           02620         btfss   PORTA, 0
0652   2???           02621         goto    PROGRAM_LED_STOP
                      02622 
0653   2???           02623         goto    CHECK_SPI_FAIL
                      02624         
                      02625         ; check the SPI eeprom for header else blink the pooper
                      02626         
0654                  02627 PROGRAM_LED_STOP
0654   2???           02628         goto    PROGRAM_LED_STOP
                      02629         
                      02630         
                      02631 ;-------------------------------------------------------------------------------------------------------
                            -------------------------------------------     
0655                  02632 MAINLOOP
                      02633         ;------------------
0655   0140           02634         movlb   d'0'
                      02635         ;------------------     
                      02636         
                      02637         ; if in postcon mode don't update the flash anymore. 
0656   1939           02638         btfsc   badge_ctrl, 2       ; bit 0 = logo tick , bit 1 = poo led, bit 2 = postcon mode 
0657   2???           02639         goto    MAINLOOP_no_flash_update
                      02640         
                      02641         ; see if a flash update event occured if so do it now
0658   1871           02642         btfsc   g_flags, 0
0659   2???           02643         call    _UPDATE_FLASH
                      02644         
065A   3188           02645         movlp   0x08                                    ; select page 1
065B   2???           02646         goto    MAINLOOP2
                      02647         
065C                  02648 MAINLOOP_no_flash_update        
065C   3188           02649         movlp   0x08                                    ; select page 1
065D   2???           02650         goto    MAINLOOP2_postcon
                      02651         
                      02652         
                      02653 
                      02654         
                      02655         
                      02656 ;#########################################################      
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 54


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02657 ; This function decrements the 16 bit value pointed to by FSR0
                      02658 ;#########################################################      
065E                  02659 _2BYTE_DEC_N_STOP
065E   0012           02660         moviw   FSR0++
065F   1D03           02661         btfss   STATUS, Z
0660   2???           02662         goto    _2BYTE_SUB_N_STOP_not_zero
0661   0800           02663         movf    INDF0, W
0662   1903           02664         btfsc   STATUS, Z
0663   0008           02665         return                                          ; counter at 0 already so stop updating it      
0664                  02666 _2BYTE_SUB_N_STOP_not_zero
0664   3001           02667         movlw   0x01
0665   0280           02668         subwf   INDF0, F                        ; f - W, C = 0 if W > f, C = 1 if W <= f
0666   1803           02669         btfsc   STATUS, C
0667   0008           02670         return
0668   0013           02671         moviw   FSR0--                          ; use this command to dec the INDF (less code than the 1
                            6 bit math needed to do it the normal way.      
0669   3001           02672         movlw   0x01
066A   0280           02673         subwf   INDF0, F                        ; f - W, C = 0 if W > f, C = 1 if W <= f
066B   1803           02674         btfsc   STATUS, C
066C   0008           02675         return
                      02676         ; if both bytes have a carry counter rolled. set it to 0
066D   3000           02677         movlw   0x00
066E   001A           02678         movwi   FSR0++
066F   001A           02679         movwi   FSR0++  
0670   0008           02680         return
                      02681         
                      02682 ;#########################################################      
                      02683 ; Move the 128 byte ram buffer to flash storage. 
                      02684 ;#########################################################      
0671                  02685 _UPDATE_FLASH
0671   1071           02686         bcf             g_flags, 0                      ; programing started (in case there is a update 
                            between the start and end clear it now then it will run again and pick up any changes without lo
0672   0808           02687         movf    BSR, W
0673   00F2           02688         movwf   current_bsr     
0674   01F0           02689         clrf    g_temp                          ; init offset counter since there are multiple pages to 
                            program. 
0675                  02690 _UPDATE_FLASH_loop      
                      02691         ;------------------
0675   3010           02692         movlw   d'16'
0676   0088           02693         movwf   BSR             
                      02694         ;------------------     
                      02695         ; erase row of flash (32 words) 
0677   301F           02696         movlw   high(start_eeprom_p)
0678   009B           02697         movwf   NVMADRH
0679   3080           02698         movlw   low(start_eeprom_p)
067A   0770           02699         addwf   g_temp, W                       ; add offset
067B   009A           02700         movwf   NVMADRL
067C   3014           02701         movlw   0x14                            ; access program flash, flash erase, write enable 
067D   009E           02702         movwf   NVMCON1
067E   2???           02703         call    _UNLOCK_NVM                     ; unlock NVM
067F   111E           02704         bcf             NVMCON1, WREN           ; disable write latch   
                      02705         
                      02706         ; write row of flash (32 words)
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 55


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0680   3023           02707         movlw   high(start_buffer)
0681   0087           02708         movwf   FSR1H                           ; address of first ram reg
0682   3070           02709         movlw   low(start_buffer)
0683   0770           02710         addwf   g_temp, W                       ; add offset
0684   0086           02711         movwf   FSR1L   
0685   301F           02712         movlw   high(start_eeprom_p)
0686   009B           02713         movwf   NVMADRH
0687   3080           02714         movlw   low(start_eeprom_p)
0688   0770           02715         addwf   g_temp, W                       ; add offset
0689   009A           02716         movwf   NVMADRL
068A   3024           02717         movlw   0x24                            ; access program flash, flash write latch only, write en
                            able 
068B   009E           02718         movwf   NVMCON1
                      02719 
068C                  02720 _UPDATE_FLASH_load_loop 
068C   0016           02721         moviw   FSR1++                          ; movw INDF0 to W and increment to next address
068D   009C           02722         movwf   NVMDATL
068E   303F           02723         movlw   0x3F                            ; upper bits unused leave in cleared state
068F   009D           02724         movwf   NVMDATH
0690   081A           02725         movf    NVMADRL, W
0691   391F           02726         andlw   0x1F                            ; check if 1 - a 32 word boundary (end of row)
0692   3A1F           02727         xorlw   0x1F
0693   1903           02728         btfsc   STATUS, Z
0694   2???           02729         goto    _UPDATE_FLASH_write
0695   2???           02730         call    _UNLOCK_NVM                     ; unlock NVM
0696   0A9A           02731         incf    NVMADRL, F
0697   2???           02732         goto    _UPDATE_FLASH_load_loop
                      02733         
0698                  02734 _UPDATE_FLASH_write
0698   129E           02735         bcf             NVMCON1, LWLO           ; next write programs row vs latches
0699   2???           02736         call    _UNLOCK_NVM                     ; unlock NVM
069A   111E           02737         bcf             NVMCON1, WREN           ; clear write enable bit
                      02738         
069B   3020           02739         movlw   0x20                            ; erase page size (32)
069C   07F0           02740         addwf   g_temp, F
069D   0870           02741         movf    g_temp, W
069E   3C7F           02742         sublw   d'127'                          ; C = 0 when W > k, C = 1 when W <= k
069F   1803           02743         btfsc   STATUS, C
06A0   2???           02744         goto    _UPDATE_FLASH_loop
                      02745         
06A1   0872           02746         movf    current_bsr, W
06A2   0088           02747         movwf   BSR
06A3   0008           02748         return
                      02749 
                      02750 ;#########################################################      
                      02751 ; unlock the NVM for write / erase
                      02752 ;#########################################################      
06A4                  02753 _UNLOCK_NVM
                      02754         ; unlock seq
06A4   138B           02755         bcf             INTCON, GIE                     ; disable IRQs for unlock
06A5   3055           02756         movlw   0x55
06A6   009F           02757         movwf   NVMCON2
06A7   30AA           02758         movlw   0xAA
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 56


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

06A8   009F           02759         movwf   NVMCON2
06A9   149E           02760         bsf             NVMCON1, WR                     ; kick off write or erase
06AA   178B           02761         bsf             INTCON, GIE                     ; enable IRQs again
                      02762         
06AB   0008           02763         return
                      02764         
                      02765 ;#########################################################
                      02766 ; This configures the MSSP to I2C
                      02767 ;#########################################################
06AC                  02768 _CFG_I2C
06AC   0808           02769         movf    BSR, W
06AD   00F2           02770         movwf   current_bsr
                      02771         
                      02772         ;------------------
06AE   017D           02773         movlb   d'61'
                      02774         ;------------------
                      02775         ; input PPS signals
06AF   300D           02776         movlw   0x0D                                    ; RB5
06B0   00C6           02777         movwf   SSP1DATPPS      
06B1   300C           02778         movlw   0x0C                                    ; RB4
06B2   00C5           02779         movwf   SSP1CLKPPS      
                      02780         
                      02781         ;------------------
06B3   017E           02782         movlb   d'62'
                      02783         ;------------------     
                      02784         ; output PPS signals
06B4   3015           02785         movlw   0x15                            ; SCK1/SCL1
06B5   009C           02786         movwf   RB4PPS
06B6   3016           02787         movlw   0x16                            ; SDO1/SDA1
06B7   009D           02788         movwf   RB5PPS
                      02789         
                      02790         ;------------------
06B8   0143           02791         movlb   d'3'                       
                      02792         ;------------------
                      02793         ; disable MSSP engine 
06B9   0190           02794         clrf    SSP1CON1                    ; reset MSSP
06BA   0191           02795         clrf    SSP1CON2
06BB   0192           02796         clrf    SSP1CON3
06BC   018F           02797         clrf    SSP1STAT
06BD   3080           02798         movlw   0x80                        ; slew off, smb off
06BE   008F           02799         movwf   SSP1STAT        
06BF   30FF           02800         movlw   0xFF
06C0   008E           02801         movwf   SSP1MSK
06C1   304F           02802         movlw   0x4F                        ; 0x4F with a 32MHz FOSC = 100kHz
06C2   008D           02803         movwf   SSP1ADD                     ; I2C clock = FOSC/((ADD<7:0> + 1) *4)
06C3   3028           02804         movlw   0x28                        ; port enabled, I2C master mode  
06C4   0090           02805         movwf   SSP1CON1        
                      02806 
06C5   0872           02807         movf    current_bsr, W
06C6   0088           02808         movwf   BSR
06C7   0008           02809         return
                      02810 
                      02811         
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 57


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02812 ;#########################################################
                      02813 ; update the leds to the new state
                      02814 ;#########################################################
06C8                  02815 _LED_SET_2      
06C8   3025           02816         movlw   0x25                        ; address byte
06C9   00A2           02817         movwf   i2c_off                     ; address byte
06CA   01A3           02818         clrf    i2c_dat0                    ; data byte 
06CB   2???           02819         call    _LED_WRITE_2
06CC   0008           02820         return
                      02821 
                      02822 ;#########################################################
                      02823 ; update the leds to the new state
                      02824 ;#########################################################
06CD                  02825 _LED_SET_1
06CD   3025           02826         movlw   0x25                        ; address byte
06CE   00A2           02827         movwf   i2c_off                     ; address byte
06CF   01A3           02828         clrf    i2c_dat0                    ; data byte 
06D0   2???           02829         call    _LED_WRITE_1
06D1   0008           02830         return
                      02831         
                      02832 ;#########################################################
                      02833 ; write 1 byte to the LED driver at offset given
                      02834 ; assumes user is in bank 0 before calling!!
                      02835 ;#########################################################
06D2                  02836 _LED_WRITE_2
                      02837         ; reset the device
06D2   2???           02838         call    _I2C_START      
06D3   307E           02839         movlw   0x7E                        ; ISSI chip address
06D4   2???           02840         call    _SEND_W_I2C
06D5   0822           02841         movf    i2c_off, W                  ; address byte
06D6   2???           02842         call    _SEND_W_I2C
06D7   0823           02843         movf    i2c_dat0, W                 ; data byte (0x00 reset device)
06D8   2???           02844         call    _SEND_W_I2C
06D9   2???           02845         call    _I2C_STOP
06DA   0008           02846         return
                      02847 
                      02848 ;#########################################################
                      02849 ; write 1 byte to the LED driver at offset given
                      02850 ; assumes user is in bank 0 before calling!!
                      02851 ;#########################################################
06DB                  02852 _LED_WRITE_1
                      02853         ; reset the device
06DB   2???           02854         call    _I2C_START      
06DC   3078           02855         movlw   0x78                        ; ISSI chip address
06DD   2???           02856         call    _SEND_W_I2C
06DE   0822           02857         movf    i2c_off, W                  ; address byte
06DF   2???           02858         call    _SEND_W_I2C
06E0   0823           02859         movf    i2c_dat0, W                 ; data byte (0x00 reset device)
06E1   2???           02860         call    _SEND_W_I2C
06E2   2???           02861         call    _I2C_STOP
06E3   0008           02862         return
                      02863         
                      02864 ;#########################################################
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 58


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02865 ; send a restart bit (stop then start if supported)
                      02866 ;#########################################################
                      02867 ; not supported by this chip removed to save space
                      02868         
                      02869 ;#########################################################
                      02870 ; send a stop bit
                      02871 ;#########################################################
06E4                  02872 _I2C_STOP
06E4   0808           02873         movf    BSR, W
06E5   00F2           02874         movwf   current_bsr
                      02875         ;------------------
06E6   0143           02876         movlb   d'3'                       
                      02877         ;------------------
                      02878         ; clear any error bits
06E7   1390           02879         bcf     SSP1CON1, WCOL
06E8   1310           02880         bcf     SSP1CON1, SSPOV
                      02881         ; send stop bit
06E9   1511           02882         bsf     SSP1CON2, PEN   
06EA                  02883 __WAIT_PEN
06EA   1911           02884         btfsc   SSP1CON2, PEN
06EB   2???           02885         goto    __WAIT_PEN
06EC   0872           02886         movf    current_bsr, W
06ED   0088           02887         movwf   BSR
06EE   0008           02888         return
                      02889         
                      02890 ;#########################################################
                      02891 ; send a start bit
                      02892 ;#########################################################
06EF                  02893 _I2C_START
06EF   0808           02894         movf    BSR, W
06F0   00F2           02895         movwf   current_bsr
                      02896         ;------------------
06F1   014E           02897         movlb   d'14'
                      02898         ;------------------     
06F2   100F           02899         bcf     PIR3, SSP1IF                ; clear interrupt flag
                      02900         ;------------------
06F3   0143           02901         movlb   d'3'
                      02902         ;------------------
                      02903         ; clear any error bits
06F4   1390           02904         bcf     SSP1CON1, WCOL
06F5   1310           02905         bcf     SSP1CON1, SSPOV
                      02906         ; send start bit
06F6   1411           02907         bsf     SSP1CON2, SEN           
06F7                  02908 __WAIT_SEN
06F7   1811           02909         btfsc   SSP1CON2, SEN
06F8   2???           02910         goto    __WAIT_SEN      
06F9   0872           02911         movf    current_bsr, W
06FA   0088           02912         movwf   BSR
06FB   0008           02913         return
                      02914         
                      02915 ;#########################################################
                      02916 ; send the value in the W register out the I2C bus
                      02917 ;#########################################################
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 59


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

06FC                  02918 _SEND_W_I2C
06FC   00F0           02919         movwf   g_temp
06FD   0808           02920         movf    BSR, W
06FE   00F2           02921         movwf   current_bsr
                      02922         ;------------------
06FF   014E           02923         movlb   d'14'
                      02924         ;------------------     
0700   100F           02925         bcf             PIR3, SSP1IF                ; clear interrupt flag
0701   108F           02926         bcf             PIR3, BCL1IF                ; clear interrupt flag
                      02927         ;------------------
0702   0143           02928         movlb   d'3'
                      02929         ;------------------
0703   0870           02930         movf    g_temp, W
0704   008C           02931         movwf   SSP1BUF 
                      02932         ;------------------
0705   014E           02933         movlb   d'14'
                      02934         ;------------------     
0706                  02935 __WAIT_BYTE_DONE        
0706   1C0F           02936         btfss   PIR3, SSP1IF
0707   2???           02937         goto    __WAIT_BYTE_DONE
0708   100F           02938         bcf             PIR3, SSP1IF                ; clear interrupt flag
0709   0872           02939         movf    current_bsr, W
070A   0088           02940         movwf   BSR
                      02941         
070B   0008           02942         return
                      02943 
                      02944 ;################################################################################
                      02945 ; cycle the LFSR (sudo random) generator 16 bits and return the new lower 8 result in W
                      02946 ;################################################################################
070C                  02947 _CYCLE_LFSR16
070C   3188           02948         movlp   0x08
070D   2???           02949         call    _2_CYCLE_LFSR16
070E   3180           02950         movlp   0x00
070F   0008           02951         return
                      02952         
                      02953 ;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                      02954 ; FLASH goto / call break here need to update the counter manually to jump back and forth from here.... 
                      02955 ;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%      
                      02956 ;put the following at address 0800h
                      02957         org     0800h   
                      02958 
                      02959         
                      02960 ;#########################################################
                      02961 ; LED seq order for self test (look up table)
                      02962 ; assumes user is in bank 0 before calling!!
                      02963 ;#########################################################
0800                  02964 _2_LED_ST_LUT2
                      02965         ; check W is less than 35 else return 1
0800   00F0           02966         movwf   g_temp
0801   3C23           02967         sublw   d'35'           ; C = 0 when W > k, C = 1 when W <= K
0802   1C03           02968         btfss   STATUS, C
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 60


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0803   3401           02969         retlw   0x01
                      02970 
                      02971 #ifdef proto
                      02972         movf    g_temp, W
                      02973         brw
                      02974         retlw   d'29'           ; D47
                      02975         retlw   d'28'           ; D46
                      02976         retlw   d'27'           ; D45
                      02977         retlw   d'26'           ; D43
                      02978         retlw   d'25'           ; D42
                      02979         retlw   d'24'           ; D41
                      02980         retlw   d'23'           ; D38
                      02981         retlw   d'22'           ; D37
                      02982         retlw   d'21'           ; D35
                      02983         retlw   d'20'           ; D34
                      02984         retlw   d'19'           ; D32
                      02985         retlw   d'18'           ; D31
                      02986         retlw   d'17'           ; D30
                      02987         retlw   d'16'           ; D29
                      02988         retlw   d'15'           ; D27
                      02989         retlw   d'14'           ; D26
                      02990         retlw   d'13'           ; D25
                      02991         retlw   d'12'           ; D24
                      02992         retlw   d'11'           ; D22
                      02993         retlw   d'10'           ; D21
                      02994         retlw   d'9'            ; D20
                      02995         retlw   d'8'            ; D19
                      02996         retlw   d'7'            ; D18
                      02997         retlw   d'6'            ; D16
                      02998         retlw   d'5'            ; D15
                      02999         retlw   d'4'            ; D14
                      03000         retlw   d'3'            ; D13
                      03001         retlw   d'2'            ; D11
                      03002         retlw   d'1'            ; D10
                      03003         retlw   d'35'           ; D51
                      03004         retlw   d'34'           ; D49
                      03005         retlw   d'33'           ; D40
                      03006         retlw   d'32'           ; D36
                      03007         retlw   d'30'           ; D6
                      03008         retlw   d'31'           ; D8
                      03009         retlw   d'36'           ; D9
                      03010 #else   
0804   080C           03011         movf    PORTA, W
0805   3934           03012         andlw   0x34
0806   00A0           03013         movwf   temp
0807   190C           03014         btfsc   PORTA, 2
0808   15A0           03015         bsf     temp, 3
0809   1003           03016         bcf     STATUS, C
080A   0CA0           03017         rrf     temp, F
080B   1003           03018         bcf     STATUS, C
080C   0CA0           03019         rrf     temp, F
080D   1003           03020         bcf     STATUS, C
080E   0CA0           03021         rrf     temp, F
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 61


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

080F   0820           03022         movf    temp, W
0810   3C04           03023         sublw   d'4'            ; C = 0 when W > k, C = 1 when W <= K
0811   1C03           03024         btfss   STATUS, C
0812   3401           03025         retlw   0x01
0813   0820           03026         movf    temp, W
0814   000B           03027         brw
0815   2???           03028         goto    _2_LED_ST_LUT2_0
0816   2???           03029         goto    _2_LED_ST_LUT2_1
0817   2???           03030         goto    _2_LED_ST_LUT2_2
0818   2???           03031         goto    _2_LED_ST_LUT2_3
0819   2???           03032         goto    _2_LED_ST_LUT2_4        
                      03033         
081A                  03034 _2_LED_ST_LUT2_0        
081A   0870           03035         movf    g_temp, W
081B   000B           03036         brw
081C   3401           03037         retlw   d'1'            ; D10
081D   3423           03038         retlw   d'35'           ; D51
081E   3422           03039         retlw   d'34'           ; D49   
081F   341D           03040         retlw   d'29'           ; D47
0820   3414           03041         retlw   d'20'           ; D34   
0821   340D           03042         retlw   d'13'           ; D25   
0822   3402           03043         retlw   d'2'            ; D11
0823   3407           03044         retlw   d'7'            ; D18   
0824   3405           03045         retlw   d'5'            ; D15
0825   3404           03046         retlw   d'4'            ; D14   
0826   3403           03047         retlw   d'3'            ; D13
0827   3406           03048         retlw   d'6'            ; D16
0828   340F           03049         retlw   d'15'           ; D27
0829   3411           03050         retlw   d'17'           ; D30
082A   3415           03051         retlw   d'21'           ; D35
082B   3412           03052         retlw   d'18'           ; D31
082C   3410           03053         retlw   d'16'           ; D29
082D   340A           03054         retlw   d'10'           ; D21
082E   3409           03055         retlw   d'9'            ; D20
082F   3408           03056         retlw   d'8'            ; D19   
0830   340B           03057         retlw   d'11'           ; D22
0831   340C           03058         retlw   d'12'           ; D24   
0832   340E           03059         retlw   d'14'           ; D26
0833   3413           03060         retlw   d'19'           ; D32
0834   3416           03061         retlw   d'22'           ; D37
0835   3417           03062         retlw   d'23'           ; D38   
0836   3418           03063         retlw   d'24'           ; D41
0837   3419           03064         retlw   d'25'           ; D42
0838   341A           03065         retlw   d'26'           ; D43
0839   341B           03066         retlw   d'27'           ; D45
083A   341C           03067         retlw   d'28'           ; D46
083B   3420           03068         retlw   d'32'           ; D36
083C   3421           03069         retlw   d'33'           ; D40
083D   3424           03070         retlw   d'36'           ; D9 egg        
083E   341F           03071         retlw   d'31'           ; D8 stomic
083F   341E           03072         retlw   d'30'           ; D6 heart
                      03073         
0840                  03074 _2_LED_ST_LUT2_1    ; coyote
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 62


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0840   0870           03075         movf    g_temp, W
0841   000B           03076         brw
0842   3404           03077         retlw   d'4'            ; D14
0843   3403           03078         retlw   d'3'            ; D13
0844   3402           03079         retlw   d'2'            ; D11
0845   3401           03080         retlw   d'1'            ; D10   
0846   3405           03081         retlw   d'5'            ; D15
0847   3406           03082         retlw   d'6'            ; D16   
0848   3407           03083         retlw   d'7'            ; D18
0849   340D           03084         retlw   d'13'           ; D25
084A   3408           03085         retlw   d'8'            ; D19           
084B   3409           03086         retlw   d'9'            ; D20
084C   340A           03087         retlw   d'10'           ; D21
084D   340C           03088         retlw   d'12'           ; D24   
084E   340B           03089         retlw   d'11'           ; D22
084F   340E           03090         retlw   d'14'           ; D26
0850   340F           03091         retlw   d'15'           ; D27
0851   3410           03092         retlw   d'16'           ; D29   
0852   3411           03093         retlw   d'17'           ; D30
0853   3412           03094         retlw   d'18'           ; D31   
0854   3413           03095         retlw   d'19'           ; D32
0855   3414           03096         retlw   d'20'           ; D34
0856   3417           03097         retlw   d'23'           ; D38
0857   3416           03098         retlw   d'22'           ; D37
0858   3418           03099         retlw   d'24'           ; D41
0859   3419           03100         retlw   d'25'           ; D42
085A   341A           03101         retlw   d'26'           ; D43
085B   341B           03102         retlw   d'27'           ; D45
085C   341C           03103         retlw   d'28'           ; D46
085D   3415           03104         retlw   d'21'           ; D35
085E   341D           03105         retlw   d'29'           ; D47
085F   3420           03106         retlw   d'32'           ; D36
0860   3421           03107         retlw   d'33'           ; D40
0861   3422           03108         retlw   d'34'           ; D49           
0862   3423           03109         retlw   d'35'           ; D51
0863   3424           03110         retlw   d'36'           ; D9 egg        
0864   341F           03111         retlw   d'31'           ; D8 stomic
0865   341E           03112         retlw   d'30'           ; D6 heart
                      03113         
0866                  03114 _2_LED_ST_LUT2_2
0866   0870           03115         movf    g_temp, W
0867   000B           03116         brw
0868   3401           03117         retlw   d'1'            ; D10
0869   3402           03118         retlw   d'2'            ; D11
086A   3405           03119         retlw   d'5'            ; D15
086B   3404           03120         retlw   d'4'            ; D14   
086C   3403           03121         retlw   d'3'            ; D13
086D   3406           03122         retlw   d'6'            ; D16
086E   3407           03123         retlw   d'7'            ; D18
086F   340B           03124         retlw   d'11'           ; D22
0870   3418           03125         retlw   d'24'           ; D41
0871   3413           03126         retlw   d'19'           ; D32
0872   340E           03127         retlw   d'14'           ; D26
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 63


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0873   3408           03128         retlw   d'8'            ; D19
0874   3409           03129         retlw   d'9'            ; D20
0875   340A           03130         retlw   d'10'           ; D21
0876   340C           03131         retlw   d'12'           ; D24   
0877   340D           03132         retlw   d'13'           ; D25
0878   3411           03133         retlw   d'17'           ; D30
0879   3415           03134         retlw   d'21'           ; D35
087A   3416           03135         retlw   d'22'           ; D37
087B   3417           03136         retlw   d'23'           ; D38
087C   3414           03137         retlw   d'20'           ; D34   
087D   3410           03138         retlw   d'16'           ; D29
087E   340F           03139         retlw   d'15'           ; D27
087F   3412           03140         retlw   d'18'           ; D31
0880   3419           03141         retlw   d'25'           ; D42
0881   341A           03142         retlw   d'26'           ; D43
0882   341B           03143         retlw   d'27'           ; D45
0883   341C           03144         retlw   d'28'           ; D46
0884   341D           03145         retlw   d'29'           ; D47
0885   3420           03146         retlw   d'32'           ; D36
0886   3421           03147         retlw   d'33'           ; D40
0887   3422           03148         retlw   d'34'           ; D49   
0888   3423           03149         retlw   d'35'           ; D51
0889   3424           03150         retlw   d'36'           ; D9 egg        
088A   341F           03151         retlw   d'31'           ; D8 stomic
088B   341E           03152         retlw   d'30'           ; D6 heart
                      03153         
088C                  03154 _2_LED_ST_LUT2_3
088C   0870           03155         movf    g_temp, W
088D   000B           03156         brw
088E   3401           03157         retlw   d'1'            ; D10
088F   3402           03158         retlw   d'2'            ; D11
0890   3403           03159         retlw   d'3'            ; D13
0891   3404           03160         retlw   d'4'            ; D14
0892   3405           03161         retlw   d'5'            ; D15
0893   3409           03162         retlw   d'9'            ; D20
0894   340A           03163         retlw   d'10'           ; D21
0895   3406           03164         retlw   d'6'            ; D16
0896   3407           03165         retlw   d'7'            ; D18
0897   3408           03166         retlw   d'8'            ; D19
0898   340B           03167         retlw   d'11'           ; D22
0899   340D           03168         retlw   d'13'           ; D25
089A   340C           03169         retlw   d'12'           ; D24
089B   340E           03170         retlw   d'14'           ; D26
089C   3410           03171         retlw   d'16'           ; D29
089D   340F           03172         retlw   d'15'           ; D27
089E   3414           03173         retlw   d'20'           ; D34
089F   3415           03174         retlw   d'21'           ; D35
08A0   3413           03175         retlw   d'19'           ; D32
08A1   3412           03176         retlw   d'18'           ; D31
08A2   3416           03177         retlw   d'22'           ; D37
08A3   3417           03178         retlw   d'23'           ; D38
08A4   3418           03179         retlw   d'24'           ; D41
08A5   3411           03180         retlw   d'17'           ; D30
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 64


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

08A6   3419           03181         retlw   d'25'           ; D42
08A7   341A           03182         retlw   d'26'           ; D43
08A8   341D           03183         retlw   d'29'           ; D47
08A9   341C           03184         retlw   d'28'           ; D46
08AA   341B           03185         retlw   d'27'           ; D45
08AB   3420           03186         retlw   d'32'           ; D36
08AC   3421           03187         retlw   d'33'           ; D40
08AD   3422           03188         retlw   d'34'           ; D49   
08AE   3423           03189         retlw   d'35'           ; D51
08AF   3424           03190         retlw   d'36'           ; D9 egg        
08B0   341F           03191         retlw   d'31'           ; D8 stomic
08B1   341E           03192         retlw   d'30'           ; D6 heart
                      03193         
08B2                  03194 _2_LED_ST_LUT2_4
08B2   0870           03195         movf    g_temp, W
08B3   000B           03196         brw
08B4   3403           03197         retlw   d'3'            ; D13
08B5   3404           03198         retlw   d'4'            ; D14
08B6   3405           03199         retlw   d'5'            ; D15
08B7   3406           03200         retlw   d'6'            ; D16
08B8   3407           03201         retlw   d'7'            ; D18
08B9   3409           03202         retlw   d'9'            ; D20
08BA   340A           03203         retlw   d'10'           ; D21
08BB   340B           03204         retlw   d'11'           ; D22
08BC   340C           03205         retlw   d'12'           ; D24
08BD   340D           03206         retlw   d'13'           ; D25
08BE   3411           03207         retlw   d'17'           ; D30
08BF   3413           03208         retlw   d'19'           ; D32
08C0   3414           03209         retlw   d'20'           ; D34
08C1   3415           03210         retlw   d'21'           ; D35
08C2   3417           03211         retlw   d'23'           ; D38
08C3   3419           03212         retlw   d'25'           ; D42
08C4   341A           03213         retlw   d'26'           ; D43
08C5   341C           03214         retlw   d'28'           ; D46
08C6   3421           03215         retlw   d'33'           ; D40
08C7   3423           03216         retlw   d'35'           ; D51
08C8   3422           03217         retlw   d'34'           ; D49   
08C9   3420           03218         retlw   d'32'           ; D36
08CA   341D           03219         retlw   d'29'           ; D47
08CB   341B           03220         retlw   d'27'           ; D45
08CC   3418           03221         retlw   d'24'           ; D41
08CD   3416           03222         retlw   d'22'           ; D37
08CE   3412           03223         retlw   d'18'           ; D31
08CF   3410           03224         retlw   d'16'           ; D29
08D0   340F           03225         retlw   d'15'           ; D27
08D1   340E           03226         retlw   d'14'           ; D26
08D2   3408           03227         retlw   d'8'            ; D19   
08D3   3402           03228         retlw   d'2'            ; D11
08D4   3401           03229         retlw   d'1'            ; D10
08D5   3424           03230         retlw   d'36'           ; D9 egg        
08D6   341F           03231         retlw   d'31'           ; D8 stomic
08D7   341E           03232         retlw   d'30'           ; D6 heart
                      03233 #endif
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 65


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03234         
                      03235 ;#########################################################
                      03236 ; LED seq order for self test (look up table)
                      03237 ; assumes user is in bank 0 before calling!!
                      03238 ;#########################################################
08D8                  03239 _2_LED_ST_LUT1
                      03240         ; check W is less than 35 else return 1
08D8   00F0           03241         movwf   g_temp
08D9   3C23           03242         sublw   d'35'           ; C = 0 when W > k, C = 1 when W <= K
08DA   1C03           03243         btfss   STATUS, C
08DB   3401           03244         retlw   0x01
                      03245         
                      03246 #ifdef proto
                      03247         movf    g_temp, W
                      03248         brw
                      03249         retlw   d'28'           ; D3 (white)
                      03250         retlw   d'20'           ; D33 R
                      03251         retlw   d'21'           ; D33 G
                      03252         retlw   d'22'           ; D33 B 
                      03253         retlw   d'16'           ; D28 R
                      03254         retlw   d'17'           ; D28 G
                      03255         retlw   d'18'           ; D28 B
                      03256         retlw   d'12'           ; D17 R
                      03257         retlw   d'13'           ; D17 G
                      03258         retlw   d'14'           ; D17 B
                      03259         retlw   d'8'            ; D12 R
                      03260         retlw   d'9'            ; D12 G
                      03261         retlw   d'10'           ; D12 B
                      03262         retlw   d'4'            ; D7 R
                      03263         retlw   d'5'            ; D7 G
                      03264         retlw   d'6'            ; D7 B  
                      03265         retlw   d'3'            ; D5
                      03266         retlw   d'7'            ; D23
                      03267         retlw   d'11'           ; D39
                      03268         retlw   d'15'           ; D44
                      03269         retlw   d'19'           ; D57
                      03270         retlw   d'23'           ; D58
                      03271         retlw   d'27'           ; D62
                      03272         retlw   d'25'           ; D60
                      03273         retlw   d'24'           ; D59
                      03274         retlw   d'26'           ; D61
                      03275         retlw   d'29'           ; D63
                      03276         retlw   d'31'           ; D48
                      03277         retlw   d'30'           ; D64
                      03278         retlw   d'32'           ; D50
                      03279         retlw   d'33'           ; D52
                      03280         retlw   d'34'           ; D53
                      03281         retlw   d'35'           ; D54
                      03282         retlw   d'36'           ; D55
                      03283         retlw   d'2'            ; D4
                      03284         retlw   d'1'            ; D56
                      03285 #else   
08DC   080C           03286         movf    PORTA, W
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 66


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

08DD   3934           03287         andlw   0x34
08DE   00A0           03288         movwf   temp
08DF   190C           03289         btfsc   PORTA, 2
08E0   15A0           03290         bsf     temp, 3
08E1   1003           03291         bcf     STATUS, C
08E2   0CA0           03292         rrf     temp, F
08E3   1003           03293         bcf     STATUS, C
08E4   0CA0           03294         rrf     temp, F
08E5   1003           03295         bcf     STATUS, C
08E6   0CA0           03296         rrf     temp, F
08E7   0820           03297         movf    temp, W
08E8   3C04           03298         sublw   d'4'            ; C = 0 when W > k, C = 1 when W <= K
08E9   1C03           03299         btfss   STATUS, C
08EA   3401           03300         retlw   0x01
08EB   0820           03301         movf    temp, W
08EC   000B           03302         brw
08ED   2???           03303         goto    _2_LED_ST_LUT1_0
08EE   2???           03304         goto    _2_LED_ST_LUT1_1
08EF   2???           03305         goto    _2_LED_ST_LUT1_2
08F0   2???           03306         goto    _2_LED_ST_LUT1_3
08F1   2???           03307         goto    _2_LED_ST_LUT1_4
                      03308         
08F2                  03309 _2_LED_ST_LUT1_0
08F2   0870           03310         movf    g_temp, W
08F3   000B           03311         brw
08F4   341C           03312         retlw   d'28'           ; D3 (white)
08F5   3414           03313         retlw   d'20'           ; D33 R
08F6   3415           03314         retlw   d'21'           ; D33 G
08F7   3416           03315         retlw   d'22'           ; D33 B 
08F8   3410           03316         retlw   d'16'           ; D28 R
08F9   3411           03317         retlw   d'17'           ; D28 G
08FA   3412           03318         retlw   d'18'           ; D28 B
08FB   340C           03319         retlw   d'12'           ; D17 R
08FC   340D           03320         retlw   d'13'           ; D17 G
08FD   340E           03321         retlw   d'14'           ; D17 B
08FE   3408           03322         retlw   d'8'            ; D12 R
08FF   3409           03323         retlw   d'9'            ; D12 G
0900   340A           03324         retlw   d'10'           ; D12 B
0901   3404           03325         retlw   d'4'            ; D7 R
0902   3405           03326         retlw   d'5'            ; D7 G
0903   3406           03327         retlw   d'6'            ; D7 B  
0904   3403           03328         retlw   d'3'            ; D5 A
0905   3407           03329         retlw   d'7'            ; D23 A
0906   340B           03330         retlw   d'11'           ; D39 A
0907   340F           03331         retlw   d'15'           ; D44 A
0908   3413           03332         retlw   d'19'           ; D57 A
0909   3417           03333         retlw   d'23'           ; D58 A
090A   3402           03334         retlw   d'2'            ; D4
090B   3401           03335         retlw   d'1'            ; D56   
090C   3422           03336         retlw   d'34'           ; D53
090D   341F           03337         retlw   d'31'           ; D48
090E   341E           03338         retlw   d'30'           ; D64
090F   341D           03339         retlw   d'29'           ; D63
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 67


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0910   3419           03340         retlw   d'25'           ; D60
0911   3418           03341         retlw   d'24'           ; D59
0912   341B           03342         retlw   d'27'           ; D62
0913   341A           03343         retlw   d'26'           ; D61   
0914   3420           03344         retlw   d'32'           ; D50
0915   3421           03345         retlw   d'33'           ; D52   
0916   3423           03346         retlw   d'35'           ; D54   
0917   3424           03347         retlw   d'36'           ; D55
                      03348         
0918                  03349 _2_LED_ST_LUT1_1        
0918   0870           03350         movf    g_temp, W
0919   000B           03351         brw
091A   341C           03352         retlw   d'28'           ; D3 (white)
091B   3414           03353         retlw   d'20'           ; D33 R
091C   3415           03354         retlw   d'21'           ; D33 G
091D   3416           03355         retlw   d'22'           ; D33 B 
091E   3410           03356         retlw   d'16'           ; D28 R
091F   3411           03357         retlw   d'17'           ; D28 G
0920   3412           03358         retlw   d'18'           ; D28 B
0921   340C           03359         retlw   d'12'           ; D17 R
0922   340D           03360         retlw   d'13'           ; D17 G
0923   340E           03361         retlw   d'14'           ; D17 B
0924   3408           03362         retlw   d'8'            ; D12 R
0925   3409           03363         retlw   d'9'            ; D12 G
0926   340A           03364         retlw   d'10'           ; D12 B
0927   3404           03365         retlw   d'4'            ; D7 R
0928   3405           03366         retlw   d'5'            ; D7 G
0929   3406           03367         retlw   d'6'            ; D7 B  
092A   3403           03368         retlw   d'3'            ; D5 A
092B   3407           03369         retlw   d'7'            ; D23 A
092C   340B           03370         retlw   d'11'           ; D39 A
092D   340F           03371         retlw   d'15'           ; D44 A
092E   3413           03372         retlw   d'19'           ; D57 A
092F   3417           03373         retlw   d'23'           ; D58 A
0930   3422           03374         retlw   d'34'           ; D53
0931   3423           03375         retlw   d'35'           ; D54   
0932   3401           03376         retlw   d'1'            ; D56
0933   3402           03377         retlw   d'2'            ; D4
0934   3424           03378         retlw   d'36'           ; D55
0935   3421           03379         retlw   d'33'           ; D52
0936   3420           03380         retlw   d'32'           ; D50
0937   341D           03381         retlw   d'29'           ; D63
0938   341E           03382         retlw   d'30'           ; D64
0939   341F           03383         retlw   d'31'           ; D48
093A   3418           03384         retlw   d'24'           ; D59
093B   3419           03385         retlw   d'25'           ; D60
093C   341A           03386         retlw   d'26'           ; D61   
093D   341B           03387         retlw   d'27'           ; D62
                      03388         
093E                  03389 _2_LED_ST_LUT1_2        
093E   0870           03390         movf    g_temp, W
093F   000B           03391         brw
0940   341C           03392         retlw   d'28'           ; D3 (white)
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 68


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0941   3414           03393         retlw   d'20'           ; D33 R
0942   3415           03394         retlw   d'21'           ; D33 G
0943   3416           03395         retlw   d'22'           ; D33 B 
0944   3410           03396         retlw   d'16'           ; D28 R
0945   3411           03397         retlw   d'17'           ; D28 G
0946   3412           03398         retlw   d'18'           ; D28 B
0947   340C           03399         retlw   d'12'           ; D17 R
0948   340D           03400         retlw   d'13'           ; D17 G
0949   340E           03401         retlw   d'14'           ; D17 B
094A   3408           03402         retlw   d'8'            ; D12 R
094B   3409           03403         retlw   d'9'            ; D12 G
094C   340A           03404         retlw   d'10'           ; D12 B
094D   3404           03405         retlw   d'4'            ; D7 R
094E   3405           03406         retlw   d'5'            ; D7 G
094F   3406           03407         retlw   d'6'            ; D7 B  
0950   3403           03408         retlw   d'3'            ; D5 A
0951   3407           03409         retlw   d'7'            ; D23 A
0952   340B           03410         retlw   d'11'           ; D39 A
0953   340F           03411         retlw   d'15'           ; D44 A
0954   3413           03412         retlw   d'19'           ; D57 A
0955   3417           03413         retlw   d'23'           ; D58 A
0956   3401           03414         retlw   d'1'            ; D56
0957   3402           03415         retlw   d'2'            ; D4
0958   3424           03416         retlw   d'36'           ; D55   
0959   3422           03417         retlw   d'34'           ; D53
095A   3423           03418         retlw   d'35'           ; D54
095B   3421           03419         retlw   d'33'           ; D52
095C   3418           03420         retlw   d'24'           ; D59
095D   3419           03421         retlw   d'25'           ; D60
095E   341A           03422         retlw   d'26'           ; D61
095F   341F           03423         retlw   d'31'           ; D48   
0960   341E           03424         retlw   d'30'           ; D64
0961   341B           03425         retlw   d'27'           ; D62
0962   341D           03426         retlw   d'29'           ; D63   
0963   3420           03427         retlw   d'32'           ; D50
                      03428 
0964                  03429 _2_LED_ST_LUT1_3
0964   0870           03430         movf    g_temp, W
0965   000B           03431         brw
0966   341C           03432         retlw   d'28'           ; D3 (white)
0967   3414           03433         retlw   d'20'           ; D33 R
0968   3415           03434         retlw   d'21'           ; D33 G
0969   3416           03435         retlw   d'22'           ; D33 B 
096A   3410           03436         retlw   d'16'           ; D28 R
096B   3411           03437         retlw   d'17'           ; D28 G
096C   3412           03438         retlw   d'18'           ; D28 B
096D   340C           03439         retlw   d'12'           ; D17 R
096E   340D           03440         retlw   d'13'           ; D17 G
096F   340E           03441         retlw   d'14'           ; D17 B
0970   3408           03442         retlw   d'8'            ; D12 R
0971   3409           03443         retlw   d'9'            ; D12 G
0972   340A           03444         retlw   d'10'           ; D12 B
0973   3404           03445         retlw   d'4'            ; D7 R
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 69


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0974   3405           03446         retlw   d'5'            ; D7 G
0975   3406           03447         retlw   d'6'            ; D7 B  
0976   3403           03448         retlw   d'3'            ; D5 A
0977   3407           03449         retlw   d'7'            ; D23 A
0978   340B           03450         retlw   d'11'           ; D39 A
0979   340F           03451         retlw   d'15'           ; D44 A
097A   3413           03452         retlw   d'19'           ; D57 A
097B   3417           03453         retlw   d'23'           ; D58 A
097C   3422           03454         retlw   d'34'           ; D53
097D   3401           03455         retlw   d'1'            ; D56
097E   3402           03456         retlw   d'2'            ; D4
097F   3424           03457         retlw   d'36'           ; D55
0980   3423           03458         retlw   d'35'           ; D54
0981   3421           03459         retlw   d'33'           ; D52
0982   3420           03460         retlw   d'32'           ; D50
0983   341D           03461         retlw   d'29'           ; D63
0984   341E           03462         retlw   d'30'           ; D64
0985   341F           03463         retlw   d'31'           ; D48   
0986   341B           03464         retlw   d'27'           ; D62
0987   3419           03465         retlw   d'25'           ; D60
0988   3418           03466         retlw   d'24'           ; D59
0989   341A           03467         retlw   d'26'           ; D61
                      03468         
098A                  03469 _2_LED_ST_LUT1_4        
098A   0870           03470         movf    g_temp, W
098B   000B           03471         brw
098C   341C           03472         retlw   d'28'           ; D3 (white)
098D   3414           03473         retlw   d'20'           ; D33 R
098E   3415           03474         retlw   d'21'           ; D33 G
098F   3416           03475         retlw   d'22'           ; D33 B 
0990   3410           03476         retlw   d'16'           ; D28 R
0991   3411           03477         retlw   d'17'           ; D28 G
0992   3412           03478         retlw   d'18'           ; D28 B
0993   340C           03479         retlw   d'12'           ; D17 R
0994   340D           03480         retlw   d'13'           ; D17 G
0995   340E           03481         retlw   d'14'           ; D17 B
0996   3408           03482         retlw   d'8'            ; D12 R
0997   3409           03483         retlw   d'9'            ; D12 G
0998   340A           03484         retlw   d'10'           ; D12 B
0999   3404           03485         retlw   d'4'            ; D7 R
099A   3405           03486         retlw   d'5'            ; D7 G
099B   3406           03487         retlw   d'6'            ; D7 B  
099C   3403           03488         retlw   d'3'            ; D5 A
099D   3407           03489         retlw   d'7'            ; D23 A
099E   340B           03490         retlw   d'11'           ; D39 A
099F   340F           03491         retlw   d'15'           ; D44 A
09A0   3413           03492         retlw   d'19'           ; D57 A
09A1   3417           03493         retlw   d'23'           ; D58 A
09A2   3423           03494         retlw   d'35'           ; D54
09A3   3424           03495         retlw   d'36'           ; D55
09A4   3401           03496         retlw   d'1'            ; D56
09A5   3402           03497         retlw   d'2'            ; D4    
09A6   3422           03498         retlw   d'34'           ; D53
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 70


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

09A7   3421           03499         retlw   d'33'           ; D52
09A8   3420           03500         retlw   d'32'           ; D50
09A9   341D           03501         retlw   d'29'           ; D63
09AA   341F           03502         retlw   d'31'           ; D48           
09AB   341E           03503         retlw   d'30'           ; D64
09AC   341B           03504         retlw   d'27'           ; D62
09AD   3419           03505         retlw   d'25'           ; D60
09AE   3418           03506         retlw   d'24'           ; D59
09AF   341A           03507         retlw   d'26'           ; D61
                      03508 #endif
                      03509         
                      03510 ;#########################################################
                      03511 ; long call command
                      03512 ;#########################################################
09B0                  03513 _2_I2C_START    
09B0   3180           03514         movlp   0x00                                    ; select page 0
09B1   2???           03515         call    _I2C_START
09B2   3188           03516         movlp   0x08                                    ; select page 1
09B3   0008           03517         return
                      03518 
                      03519 ;#########################################################
                      03520 ; long call command
                      03521 ;#########################################################
09B4                  03522 _2_SEND_W_I2C   
09B4   3180           03523         movlp   0x00                                    ; select page 0
09B5   2???           03524         call    _SEND_W_I2C
09B6   3188           03525         movlp   0x08                                    ; select page 1
09B7   0008           03526         return
                      03527 
                      03528 ;#########################################################
                      03529 ; long call command
                      03530 ;#########################################################
09B8                  03531 _2_I2C_STOP     
09B8   3180           03532         movlp   0x00                                    ; select page 0
09B9   2???           03533         call    _I2C_STOP
09BA   3188           03534         movlp   0x08                                    ; select page 1
09BB   0008           03535         return
                      03536 
                      03537 ;#########################################################
                      03538 ; long call command
                      03539 ;#########################################################
09BC                  03540 _2_LED_SET_1    
09BC   3180           03541         movlp   0x00                                    ; select page 0
09BD   2???           03542         call    _LED_SET_1
09BE   3188           03543         movlp   0x08                                    ; select page 1
09BF   0008           03544         return
                      03545 
                      03546 ;#########################################################
                      03547 ; long call command
                      03548 ;#########################################################
09C0                  03549 _2_LED_SET_2
09C0   3180           03550         movlp   0x00                                    ; select page 0
09C1   2???           03551         call    _LED_SET_2
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 71


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

09C2   3188           03552         movlp   0x08                                    ; select page 1
09C3   0008           03553         return
                      03554 
                      03555 ;#########################################################
                      03556 ; long call command
                      03557 ;#########################################################
09C4                  03558 _2_LED_WRITE_2  
09C4   3180           03559         movlp   0x00                                    ; select page 0
09C5   2???           03560         call    _LED_WRITE_2
09C6   3188           03561         movlp   0x08                                    ; select page 1
09C7   0008           03562         return
                      03563 
                      03564 ;#########################################################
                      03565 ; long call command
                      03566 ;#########################################################
09C8                  03567 _2_LED_WRITE_1  
09C8   3180           03568         movlp   0x00                                    ; select page 0
09C9   2???           03569         call    _LED_WRITE_1
09CA   3188           03570         movlp   0x08                                    ; select page 1
09CB   0008           03571         return
                      03572         
                      03573 ;#########################################################
                      03574 ; long call command
                      03575 ;#########################################################
09CC                  03576 _2_2BYTE_DEC_N_STOP     
09CC   3180           03577         movlp   0x00                                    ; select page 0
09CD   2???           03578         call    _2BYTE_DEC_N_STOP
09CE   3188           03579         movlp   0x08                                    ; select page 1
09CF   0008           03580         return
                      03581 
                      03582 ;#########################################################      
                      03583 ; This function takes W and subtracts it from the 24 bit value pointed to by FSR0
                      03584 ;#########################################################      
09D0                  03585 _2_3BYTE_SUB_N_STOP
09D0   00F0           03586         movwf   g_temp
09D1   0012           03587         moviw   FSR0++
09D2   1D03           03588         btfss   STATUS, Z
09D3   2???           03589         goto    _3BYTE_SUB_N_STOP_not_zero1
09D4   0012           03590         moviw   FSR0++
09D5   1D03           03591         btfss   STATUS, Z
09D6   2???           03592         goto    _3BYTE_SUB_N_STOP_not_zero2
09D7   0800           03593         movf    INDF0, W
09D8   1903           03594         btfsc   STATUS, Z
09D9   0008           03595         return                                          ; counter at 0 already so stop updating it      
09DA   2???           03596         goto    _3BYTE_SUB_N_STOP_not_zero2     
09DB                  03597 _3BYTE_SUB_N_STOP_not_zero1     
09DB   0012           03598         moviw   FSR0++                          ; use this command to inc the INDF (less code than the 1
                            6 bit math needed to do it the normal way. 
09DC                  03599 _3BYTE_SUB_N_STOP_not_zero2     
09DC   0870           03600         movf    g_temp, W
09DD   0280           03601         subwf   INDF0, F                        ; f - W, C = 0 if W > f, C = 1 if W <= f
09DE   1803           03602         btfsc   STATUS, C
09DF   0008           03603         return
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 72


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

09E0   0013           03604         moviw   FSR0--                          ; use this command to dec the INDF (less code than the 1
                            6 bit math needed to do it the normal way.      
09E1   3001           03605         movlw   0x01
09E2   0280           03606         subwf   INDF0, F                        ; f - W, C = 0 if W > f, C = 1 if W <= f
09E3   1803           03607         btfsc   STATUS, C
09E4   0008           03608         return
09E5   0013           03609         moviw   FSR0--                          ; use this command to dec the INDF (less code than the 1
                            6 bit math needed to do it the normal way.      
09E6   3001           03610         movlw   0x01
09E7   0280           03611         subwf   INDF0, F                        ; f - W, C = 0 if W > f, C = 1 if W <= f
09E8   1803           03612         btfsc   STATUS, C
09E9   0008           03613         return
                      03614         ; if all 3 bytes have a carry counter rolled. set it to 0
09EA   3000           03615         movlw   0x00
09EB   001A           03616         movwi   FSR0++
09EC   001A           03617         movwi   FSR0++
09ED   001A           03618         movwi   FSR0++  
09EE   0008           03619         return
                      03620         
                      03621 ;################################################################################
                      03622 ; cycle the LFSR (sudo random) generator 16 bits and return the new lower 8 result in W
                      03623 ;################################################################################
09EF                  03624 _2_CYCLE_LFSR16
09EF   3010           03625         movlw   0x10
09F0   00B6           03626         movwf   LFSR_count
09F1   2???           03627         goto    cycle_lfsr_loop
                      03628         
                      03629         ; no return here sharing code with another function return is in that function
                      03630         
                      03631 ;################################################################################
                      03632 ; cycle the LFSR (sudo random) generator 8 bits and return the new result in W
                      03633 ;################################################################################
09F2                  03634 _2_CYCLE_LFSR
09F2   3008           03635         movlw   0x08
09F3   00B6           03636         movwf   LFSR_count
09F4                  03637 cycle_lfsr_loop
                      03638         ; seed register with inial value
09F4   1070           03639         bcf             g_temp, 0
09F5   1832           03640         btfsc   LFSR_0, 0
09F6   1470           03641         bsf             g_temp, 0
                      03642         ; test bit invert result if set
09F7   1932           03643         btfsc   LFSR_0, 2
09F8   09F0           03644         comf    g_temp, f
                      03645         ; test bit invert result if set
09F9   1B32           03646         btfsc   LFSR_0, 6
09FA   09F0           03647         comf    g_temp, f
                      03648         ; test bit invert result if set
09FB   1BB2           03649         btfsc   LFSR_0, 7
09FC   09F0           03650         comf    g_temp, f
                      03651         
                      03652         ; set carry bit
09FD   1003           03653         bcf             STATUS, C
09FE   1870           03654         btfsc   g_temp, 0
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 73


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

09FF   1403           03655         bsf             STATUS, C
                      03656         
                      03657         ; rotat the bits 
0A00   0CB5           03658         rrf             LFSR_3, F
0A01   0CB4           03659         rrf             LFSR_2, F
0A02   0CB3           03660         rrf             LFSR_1, F
0A03   0CB2           03661         rrf             LFSR_0, F
0A04   0BB6           03662         decfsz  LFSR_count, F
0A05   2???           03663         goto    cycle_lfsr_loop
0A06   0832           03664         movf    LFSR_0, W
0A07   0008           03665         return  
                      03666                 
                      03667 ;################################################################################
                      03668 ; cycle the LFSR (sudo random) generator 8 bits and return the new result in W
                      03669 ;################################################################################
0A08                  03670 _2_SELECT_PINK  
0A08   000B           03671         brw
0A09   3401           03672         retlw   d'1'
0A0A   3402           03673         retlw   d'2'
0A0B   3418           03674         retlw   d'24'
0A0C   3419           03675         retlw   d'25'
0A0D   341A           03676         retlw   d'26'
0A0E   341B           03677         retlw   d'27'
0A0F   341D           03678         retlw   d'29'
0A10   341E           03679         retlw   d'30'
0A11   341F           03680         retlw   d'31'
0A12   3420           03681         retlw   d'32'
0A13   3421           03682         retlw   d'33'
0A14   3422           03683         retlw   d'34'
0A15   3423           03684         retlw   d'35'
0A16   3424           03685         retlw   d'36'
0A17   3481           03686         retlw   d'1' + 0x80
0A18   3482           03687         retlw   d'2' + 0x80
0A19   3483           03688         retlw   d'3' + 0x80
0A1A   3484           03689         retlw   d'4' + 0x80
0A1B   3485           03690         retlw   d'5' + 0x80
0A1C   3486           03691         retlw   d'6' + 0x80
0A1D   3487           03692         retlw   d'7' + 0x80
0A1E   3488           03693         retlw   d'8' + 0x80
0A1F   3489           03694         retlw   d'9' + 0x80
0A20   348A           03695         retlw   d'10' + 0x80
0A21   348B           03696         retlw   d'11' + 0x80
0A22   348C           03697         retlw   d'12' + 0x80
0A23   348D           03698         retlw   d'13' + 0x80
0A24   348E           03699         retlw   d'14' + 0x80
0A25   348F           03700         retlw   d'15' + 0x80
0A26   3490           03701         retlw   d'16' + 0x80
0A27   3491           03702         retlw   d'17' + 0x80
0A28   3492           03703         retlw   d'18' + 0x80
0A29   3493           03704         retlw   d'19' + 0x80
0A2A   3494           03705         retlw   d'20' + 0x80
0A2B   3495           03706         retlw   d'21' + 0x80
0A2C   3496           03707         retlw   d'22' + 0x80
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 74


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0A2D   3497           03708         retlw   d'23' + 0x80
0A2E   3498           03709         retlw   d'24' + 0x80
0A2F   3499           03710         retlw   d'25' + 0x80
0A30   349A           03711         retlw   d'26' + 0x80
0A31   349B           03712         retlw   d'27' + 0x80
0A32   349C           03713         retlw   d'28' + 0x80
0A33   349D           03714         retlw   d'29' + 0x80
0A34   34A0           03715         retlw   d'32' + 0x80
0A35   34A1           03716         retlw   d'33' + 0x80
0A36   34A2           03717         retlw   d'34' + 0x80
0A37   34A3           03718         retlw   d'35' + 0x80
                      03719         
                      03720 ;#########################################################      
                      03721 ; This function returns the heart off count for the various badge modes
                      03722 ;#########################################################      
0A38                  03723 _2_SELECT_HEART
0A38   082C           03724         movf    badge_status, W         ; check if dead if so do not update the LED anymore (LED updated
                             to dead status in death routine) 
0A39   3903           03725         andlw   0x03
0A3A   000B           03726         brw                                                     ; jump to LED reset value
0A3B   341F           03727         retlw   heart_led_sleep         ; dead  (not used make = to sleep)
0A3C   341F           03728         retlw   heart_led_sleep         ; sleep
0A3D   340F           03729         retlw   heart_led_active        ; active
0A3E   3404           03730         retlw   heart_led_hyper         ; hyper
                      03731         
                      03732 ;#########################################################      
                      03733 ; This function updates the oLED set to value in W and adds one if badge is sick
                      03734 ;#########################################################      
0A3F                  03735 _2_set_oLED_mode
0A3F   00C3           03736         movwf   oLED_set                                ; new set to move to 
0A40   3023           03737         movlw   high(ram_status)                        ;  bit 7 0 = dead, bit 6 0 = uber on, bit 5 0 = 
                            quest done, bit 4 0 = quest start, bit 3 = 0 has egg, bit 2 = 0 is cured, bit 1 = 0 has pink eye
0A41   0087           03738         movwf   FSR1H
0A42   3070           03739         movlw   low(ram_status)
0A43   0086           03740         movwf   FSR1L   
0A44   0801           03741         movf    INDF1, W
0A45   3906           03742         andlw   0x06
0A46   3A04           03743         xorlw   0x04                                    ; check if badge has pink eye but has not been c
                            ured yet. 
0A47   1903           03744         btfsc   STATUS, Z
0A48   0AC3           03745         incf    oLED_set, F
0A49   01C2           03746         clrf    oLED_delay                              ; stop the counter update first then clear the i
                            nternal phase
0A4A   01C1           03747         clrf    oLED_phase
0A4B   01C5           03748         clrf    oLED_seq_cnt    
                      03749         ; clear out any one shots that may be in progress
0A4C   1049           03750         bcf     oLED_ctrl, 0                            ; bit 0 = one shot start, 1 = one shot done     
0A4D   10C9           03751         bcf     oLED_ctrl, 1                            ; bit 0 = one shot start, 1 = one shot done     
0A4E   0008           03752         return
                      03753 
                      03754 ;#########################################################      
                      03755 ; This function updates the oLED set to value in W and adds one if badge is sick
                      03756 ;#########################################################      
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 75


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0A4F                  03757 _2_set_oLED_mode_one_shot
0A4F   00C3           03758         movwf   oLED_set                                ; new set to move to 
0A50   3023           03759         movlw   high(ram_status)                        ;  bit 7 0 = dead, bit 6 0 = uber on, bit 5 0 = 
                            quest done, bit 4 0 = quest start, bit 3 = 0 has egg, bit 2 = 0 is cured, bit 1 = 0 has pink eye
0A51   0087           03760         movwf   FSR1H
0A52   3070           03761         movlw   low(ram_status)
0A53   0086           03762         movwf   FSR1L   
0A54   0801           03763         movf    INDF1, W
0A55   3906           03764         andlw   0x06
0A56   3A04           03765         xorlw   0x04                                    ; check if badge has pink eye but has not been c
                            ured yet. 
0A57   1903           03766         btfsc   STATUS, Z
0A58   0AC3           03767         incf    oLED_set, F
0A59   01C2           03768         clrf    oLED_delay                              ; stop the counter update first then clear the i
                            nternal phase
0A5A   01C1           03769         clrf    oLED_phase
0A5B   01C5           03770         clrf    oLED_seq_cnt    
                      03771         ; clear out any one shots that may be in progress
0A5C   1049           03772         bcf             oLED_ctrl, 0                            ; bit 0 = one shot start, 1 = one shot d
                            one     
0A5D   10C9           03773         bcf             oLED_ctrl, 1                            ; bit 0 = one shot start, 1 = one shot d
                            one     
0A5E   1449           03774         bsf             oLED_ctrl, 0                    ; bit 0 = one shot start, 1 = one shot done     
0A5F   0008           03775         return
                      03776         
                      03777         
                      03778         
                      03779 ;-------------------------------------------------------------------------------------- 
                      03780         
0A60                  03781 LED_SELFTEST
                      03782         ; start of LED self test code
0A60   01A4           03783         clrf    seq_cnt
0A61                  03784 LED_SELFTEST_LOOP1
0A61   0824           03785         movf    seq_cnt, W
0A62   2???           03786         call    _2_LED_ST_LUT1
0A63   00A2           03787         movwf   i2c_off                     ; address byte
0A64   30FF           03788         movlw   0xff
0A65   00A3           03789         movwf   i2c_dat0                    
0A66   2???           03790         call    _2_LED_WRITE_1  
0A67   2???           03791         call    _2_LED_SET_1                    ; update the leds to the new state
                      03792         
0A68   3002           03793         movlw   0x02
0A69   00F3           03794         movwf   delay_cnt
0A6A                  03795 LED_SELFTEST_DELAY1
0A6A   0873           03796         movf    delay_cnt, W
0A6B   1D03           03797         btfss   STATUS, Z
0A6C   2???           03798         goto    LED_SELFTEST_DELAY1
                      03799 
0A6D   0824           03800         movf    seq_cnt, W
0A6E   2???           03801         call    _2_LED_ST_LUT1
0A6F   00A2           03802         movwf   i2c_off                     ; address byte
0A70   3000           03803         movlw   0x00
0A71   00A3           03804         movwf   i2c_dat0                    
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 76


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0A72   2???           03805         call    _2_LED_WRITE_1  
0A73   2???           03806         call    _2_LED_SET_1                    ; update the leds to the new state
                      03807 
0A74   0AA4           03808         incf    seq_cnt, F
0A75   0824           03809         movf    seq_cnt, W
0A76   3C23           03810         sublw   d'35'           ; C = 0 when W > k, C = 1 when W <= K
0A77   1803           03811         btfsc   STATUS, C
0A78   2???           03812         goto    LED_SELFTEST_LOOP1
                      03813         
0A79   2???           03814         call    _2_LED_SET_1                    ; update the leds to the new state
                      03815 
0A7A   01A4           03816         clrf    seq_cnt
0A7B                  03817 LED_SELFTEST_LOOP2
0A7B   0824           03818         movf    seq_cnt, W
0A7C   2???           03819         call    _2_LED_ST_LUT2
0A7D   00A2           03820         movwf   i2c_off                     ; address byte
0A7E   30FF           03821         movlw   0xff
0A7F   00A3           03822         movwf   i2c_dat0                    
0A80   2???           03823         call    _2_LED_WRITE_2  
0A81   2???           03824         call    _2_LED_SET_2                    ; update the leds to the new state
                      03825         
0A82   3002           03826         movlw   0x02
0A83   00F3           03827         movwf   delay_cnt
0A84                  03828 LED_SELFTEST_DELAY2
0A84   0873           03829         movf    delay_cnt, W
0A85   1D03           03830         btfss   STATUS, Z
0A86   2???           03831         goto    LED_SELFTEST_DELAY2
                      03832 
0A87   0824           03833         movf    seq_cnt, W
0A88   2???           03834         call    _2_LED_ST_LUT2
0A89   00A2           03835         movwf   i2c_off                     ; address byte
0A8A   3000           03836         movlw   0x00
0A8B   00A3           03837         movwf   i2c_dat0                    
0A8C   2???           03838         call    _2_LED_WRITE_2  
                      03839 
0A8D   0AA4           03840         incf    seq_cnt, F
0A8E   0824           03841         movf    seq_cnt, W
0A8F   3C23           03842         sublw   d'35'           ; C = 0 when W > k, C = 1 when W <= K
0A90   1803           03843         btfsc   STATUS, C
0A91   2???           03844         goto    LED_SELFTEST_LOOP2
                      03845         
0A92   2???           03846         call    _2_LED_SET_2                    ; update the leds to the new state
                      03847         
0A93   1D8C           03848         btfss   PORTA, 3                        ; social button
0A94   2???           03849         goto    LED_SELFTEST
0A95   3180           03850         movlp   0x00
0A96   2???           03851         goto    LED_SELFTEST_DONE
                      03852         
                      03853 
                      03854         
                      03855 ;-------------------------------------------------------------------------------------------------------
                            -------------------------------------------     
0A97                  03856 MAINLOOP2_postcon
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 77


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03857         
                      03858         ; delay in this mode 
0A97   083D           03859         movf    game_tick, W
0A98   1D03           03860         btfss   STATUS, Z
0A99   2???           03861         goto    MAINLOOP2
                      03862 
                      03863         ; set eye animation
0A9A                  03864 MAINLOOP2_postcon_cycle_oLED            
0A9A   2???           03865         call    _2_CYCLE_LFSR
0A9B   390F           03866         andlw   0x0F
0A9C   00C3           03867         movwf   oLED_set        
                      03868         ; skip the HBDH set
0A9D   3C0C           03869         sublw   LAST_PRE_Hyr0n_animation                        ; k - W, C = 0 if W > k, C = 1 if W <= k
                                    
0A9E   1C03           03870         btfss   STATUS, C
0A9F   2???           03871         goto    MAINLOOP2_postcon_cycle_oLED            
0AA0   01C2           03872         clrf    oLED_delay                              ; stop the counter update first then clear the i
                            nternal phase
0AA1   01C1           03873         clrf    oLED_phase
0AA2   01C5           03874         clrf    oLED_seq_cnt            
                      03875 
                      03876         ; clean up leds (causes a glitch on refresh if staying set)
0AA3   14F1           03877         bsf     g_flags, 1      ; bit 0 = update flash, bit 1 = force stomach off, bit 2 = force poo off
                                    
0AA4   1571           03878         bsf     g_flags, 2      ; bit 0 = update flash, bit 1 = force stomach off, bit 2 = force poo off
                                    
                      03879         
                      03880         ; food LED
0AA5   30FF           03881         movlw   0xFF
0AA6   00BB           03882         movwf   food_cnt
0AA7   2???           03883         call    _2_CYCLE_LFSR   
0AA8   3C20           03884         sublw   0x20                    ; k - W, C = 0 if W > k, C = 1 if W <= k        
0AA9   1803           03885         btfsc   STATUS, C
0AAA   01BB           03886         clrf    food_cnt
                      03887 
                      03888         ; poo LED
0AAB   30FF           03889         movlw   0xFF
0AAC   00BC           03890         movwf   poo_cnt
0AAD   2???           03891         call    _2_CYCLE_LFSR   
0AAE   3CE0           03892         sublw   0xE0                    ; k - W, C = 0 if W > k, C = 1 if W <= k        
0AAF   1803           03893         btfsc   STATUS, C
0AB0   01BC           03894         clrf    poo_cnt
                      03895         
                      03896         ; Set up FSR
0AB1   3023           03897         movlw   high(ram_status)        ;  bit 7 0 = dead, bit 6 0 = uber on, bit 5 0 = quest done, bit 
                            4 0 = quest start, bit 3 = 0 has egg, bit 2 = 0 is cured, bit 1 = 0 has pink eye, bit 0 = 0 con 
0AB2   0087           03898         movwf   FSR1H
0AB3   3070           03899         movlw   low(ram_status)
0AB4   0086           03900         movwf   FSR1L   
                      03901         
                      03902         ; Egg LED
0AB5   1581           03903         bsf     INDF1, 3                ;  bit 7 0 = dead, bit 6 0 = uber on, bit 5 0 = quest done, bit 
                            4 0 = quest start, bit 3 = 0 has egg, bit 2 = 0 is cured, bit 1 = 0 has pink eye, bit 0 = 0 con 
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 78


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0AB6   2???           03904         call    _2_CYCLE_LFSR   
0AB7   3C10           03905         sublw   0x10                    ; k - W, C = 0 if W > k, C = 1 if W <= k        
0AB8   1803           03906         btfsc   STATUS, C
0AB9   1181           03907         bcf     INDF1, 3                ;  bit 7 0 = dead, bit 6 0 = uber on, bit 5 0 = quest done, bit 
                            4 0 = quest start, bit 3 = 0 has egg, bit 2 = 0 is cured, bit 1 = 0 has pink eye, bit 0 = 0 con 
                      03908         
                      03909         ; PRECON mode
0ABA   1001           03910         bcf     INDF1, 0                ;  bit 7 0 = dead, bit 6 0 = uber on, bit 5 0 = quest done, bit 
                            4 0 = quest start, bit 3 = 0 has egg, bit 2 = 0 is cured, bit 1 = 0 has pink eye, bit 0 = 0 con 
0ABB   2???           03911         call    _2_CYCLE_LFSR   
0ABC   3C08           03912         sublw   0x08                    ; k - W, C = 0 if W > k, C = 1 if W <= k        
0ABD   1803           03913         btfsc   STATUS, C
0ABE   1401           03914         bsf     INDF1, 0                ;  bit 7 0 = dead, bit 6 0 = uber on, bit 5 0 = quest done, bit 
                            4 0 = quest start, bit 3 = 0 has egg, bit 2 = 0 is cured, bit 1 = 0 has pink eye, bit 0 = 0 con 
                      03915                 
                      03916         ; uber mode
0ABF   1701           03917         bsf     INDF1, 6                ;  bit 7 0 = dead, bit 6 0 = uber on, bit 5 0 = quest done, bit 
                            4 0 = quest start, bit 3 = 0 has egg, bit 2 = 0 is cured, bit 1 = 0 has pink eye, bit 0 = 0 con 
0AC0   2???           03918         call    _2_CYCLE_LFSR   
0AC1   3C10           03919         sublw   0x10                    ; k - W, C = 0 if W > k, C = 1 if W <= k        
0AC2   1803           03920         btfsc   STATUS, C
0AC3   1301           03921         bcf     INDF1, 6                ;  bit 7 0 = dead, bit 6 0 = uber on, bit 5 0 = quest done, bit 
                            4 0 = quest start, bit 3 = 0 has egg, bit 2 = 0 is cured, bit 1 = 0 has pink eye, bit 0 = 0 con 
                      03922 
                      03923         ; quest modes
0AC4   1601           03924         bsf     INDF1, 4                ;  bit 7 0 = dead, bit 6 0 = uber on, bit 5 0 = quest done, bit 
                            4 0 = quest start, bit 3 = 0 has egg, bit 2 = 0 is cured, bit 1 = 0 has pink eye, bit 0 = 0 con 
0AC5   1681           03925         bsf     INDF1, 5                ;  bit 7 0 = dead, bit 6 0 = uber on, bit 5 0 = quest done, bit 
                            4 0 = quest start, bit 3 = 0 has egg, bit 2 = 0 is cured, bit 1 = 0 has pink eye, bit 0 = 0 con 
0AC6   2???           03926         call    _2_CYCLE_LFSR   
0AC7   3C10           03927         sublw   0x10                    ; k - W, C = 0 if W > k, C = 1 if W <= k        
0AC8   1C03           03928         btfss   STATUS, C
0AC9   2???           03929         goto    MAINLOOP2_postcon_no_quest
0ACA   1201           03930         bcf     INDF1, 4                ;  bit 7 0 = dead, bit 6 0 = uber on, bit 5 0 = quest done, bit 
                            4 0 = quest start, bit 3 = 0 has egg, bit 2 = 0 is cured, bit 1 = 0 has pink eye, bit 0 = 0 con 
                      03931         ; Clear quest ID (controls white breathing vs green blink)
0ACB   3023           03932         movlw   high(ram_questID)       
0ACC   0087           03933         movwf   FSR1H
0ACD   308E           03934         movlw   low(ram_questID)
0ACE   0086           03935         movwf   FSR1L   
0ACF   30FF           03936         movlw   0xFF
0AD0   001E           03937         movwi   FSR1++
0AD1   0081           03938         movwf   INDF1
0AD2   2???           03939         call    _2_CYCLE_LFSR   
0AD3   3C80           03940         sublw   0x80                    ; k - W, C = 0 if W > k, C = 1 if W <= k        
0AD4   1C03           03941         btfss   STATUS, C
0AD5   0181           03942         clrf    INDF1
0AD6                  03943 MAINLOOP2_postcon_no_quest
                      03944         
                      03945         ; heart 
0AD6   082C           03946         movf    badge_status, W
0AD7   39FC           03947         andlw   0xFC
0AD8   00AC           03948         movwf   badge_status
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 79


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0AD9   2???           03949         call    _2_CYCLE_LFSR   
0ADA   3903           03950         andlw   0x03
0ADB   04AC           03951         iorwf   badge_status,F
                      03952         
                      03953         
0ADC   30FF           03954         movlw   POSTCON_MODE_TIME
0ADD   00BD           03955         movwf   game_tick               
                      03956         
                      03957 ;-------------------------------------------------------------------------------------------------------
                            -------------------------------------------     
0ADE                  03958 MAINLOOP2 
                      03959 
                      03960         ; this is all oLED management related
0ADE   3198           03961         movlp   0x18
0ADF   2???           03962         goto    MAINLOOP3
0AE0                  03963 MAINLOOP3_return        
                      03964         
                      03965         
                      03966         
                      03967         ; control LED updates
                      03968         ; heart
0AE0   0873           03969         movf    delay_cnt, W
0AE1   1D03           03970         btfss   STATUS, Z
0AE2   2???           03971         goto    MAINLOOP2_no_heart
0AE3   082C           03972         movf    badge_status, W         ; check if dead if so do not update the LED anymore (LED updated
                             to dead status in death routine) 
0AE4   3903           03973         andlw   0x03
0AE5   1903           03974         btfsc   STATUS, Z
0AE6   2???           03975         goto    MAINLOOP2_no_heart
0AE7   0AAD           03976         incf    heart_seq, F
0AE8   0AF3           03977         incf    delay_cnt, F
0AE9   082D           03978         movf    heart_seq, W
0AEA   3A01           03979         xorlw   0x01
0AEB   1903           03980         btfsc   STATUS, Z
0AEC   2???           03981         goto    MAINLOOP2_heart_on
0AED   082D           03982         movf    heart_seq, W
0AEE   3A02           03983         xorlw   0x02
0AEF   1903           03984         btfsc   STATUS, Z
0AF0   2???           03985         goto    MAINLOOP2_heart_off
0AF1   082D           03986         movf    heart_seq, W
0AF2   3A03           03987         xorlw   0x03
0AF3   1903           03988         btfsc   STATUS, Z
0AF4   2???           03989         goto    MAINLOOP2_heart_on
0AF5   082D           03990         movf    heart_seq, W
0AF6   3A04           03991         xorlw   0x04
0AF7   1903           03992         btfsc   STATUS, Z
0AF8   2???           03993         goto    MAINLOOP2_heart_off
0AF9   2???           03994         call    _2_SELECT_HEART
0AFA   022D           03995         subwf   heart_seq, W                    ; f - W, C = 0 if W > f, C = 1 if W <= f        
0AFB   1803           03996         btfsc   STATUS, C
0AFC   01AD           03997         clrf    heart_seq
0AFD   2???           03998         goto    MAINLOOP2_no_heart
0AFE                  03999 MAINLOOP2_heart_off     
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 80


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0AFE   301E           04000         movlw   D'30'                       ; address byte
0AFF   00A2           04001         movwf   i2c_off                     ; address byte
0B00   3000           04002         movlw   0x00                            
0B01   00A3           04003         movwf   i2c_dat0                    
0B02   2???           04004         call    _2_LED_WRITE_2
0B03   2???           04005         call    _2_LED_SET_2                    ; update the leds to the new state
0B04   2???           04006         goto    MAINLOOP2_no_heart
0B05                  04007 MAINLOOP2_heart_on
0B05   301E           04008         movlw   d'30'
0B06   00A2           04009         movwf   i2c_off                     ; address byte
0B07   30FF           04010         movlw   icon_pwms
0B08   00A3           04011         movwf   i2c_dat0                    
0B09   2???           04012         call    _2_LED_WRITE_2  
0B0A   2???           04013         call    _2_LED_SET_2                    ; update the leds to the new state
0B0B                  04014 MAINLOOP2_no_heart      
                      04015         ; egg LED
0B0B   3023           04016         movlw   high(ram_status)        ;  bit 7 0 = dead, bit 6 0 = uber on, bit 5 0 = quest done, bit 
                            4 0 = quest start, bit 3 = 0 has egg, bit 2 = 0 is cured, bit 1 = 0 has pink eye, bit 0 = 0 con 
0B0C   0087           04017         movwf   FSR1H
0B0D   3070           04018         movlw   low(ram_status)
0B0E   0086           04019         movwf   FSR1L   
0B0F   0801           04020         movf    INDF1, W
0B10   3908           04021         andlw   0x08                    ; has egg
0B11   1D03           04022         btfss   STATUS, Z
0B12   2???           04023         goto    MAINLOOP2_no_egg        
0B13   152C           04024         bsf     badge_status, 2         ; set egg present bit
0B14   084C           04025         movf    egg_delay, W
0B15   1D03           04026         btfss   STATUS,Z
0B16   2???           04027         goto    MAINLOOP2_no_egg_update
0B17   3001           04028         movlw   0x01
0B18   00CC           04029         movwf   egg_delay       
0B19   1DB9           04030         btfss   badge_ctrl, 3           ; bit 0 = logo tick , bit 1 = poo led, bit 2 = postcon mode, bit
                             3 = egg up/down
0B1A   2???           04031         goto    MAINLOOP2_egg_down
0B1B                  04032 MAINLOOP2_egg_up        
0B1B   15B9           04033         bsf     badge_ctrl, 3           ; bit 0 = logo tick , bit 1 = poo led, bit 2 = postcon mode, bit
                             3 = egg up/down
0B1C   3008           04034         movlw   0x08
0B1D   07CB           04035         addwf   egg_breath, F
0B1E   1C03           04036         btfss   STATUS, C
0B1F   2???           04037         goto    MAINLOOP2_egg_ready
0B20   30FF           04038         movlw   0xFF
0B21   00CB           04039         movwf   egg_breath
0B22                  04040 MAINLOOP2_egg_down
0B22   11B9           04041         bcf     badge_ctrl, 3           ; bit 0 = logo tick , bit 1 = poo led, bit 2 = postcon mode, bit
                             3 = egg up/down
0B23   3008           04042         movlw   0x08
0B24   02CB           04043         subwf   egg_breath, F
0B25   1803           04044         btfsc   STATUS, C
0B26   2???           04045         goto    MAINLOOP2_egg_ready
0B27   01CB           04046         clrf    egg_breath
0B28   2???           04047         goto    MAINLOOP2_egg_up
0B29                  04048 MAINLOOP2_egg_ready     
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 81


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0B29   3024           04049         movlw   d'36'
0B2A   00A2           04050         movwf   i2c_off                     ; address byte
0B2B   084B           04051         movf    egg_breath, W
0B2C   00A3           04052         movwf   i2c_dat0                    
0B2D   2???           04053         call    _2_LED_WRITE_2  
0B2E   2???           04054         call    _2_LED_SET_2                    ; update the leds to the new state      
0B2F   2???           04055         goto    MAINLOOP2_no_egg_update
0B30                  04056 MAINLOOP2_no_egg        
0B30   1D2C           04057         btfss   badge_status, 2
0B31   2???           04058         goto    MAINLOOP2_no_egg_update
0B32   3024           04059         movlw   D'36'                           ; address byte
0B33   00A2           04060         movwf   i2c_off                     ; address byte
0B34   3000           04061         movlw   0x00                            
0B35   00A3           04062         movwf   i2c_dat0                    
0B36   2???           04063         call    _2_LED_WRITE_2
0B37   2???           04064         call    _2_LED_SET_2                    ; update the leds to the new state
0B38   112C           04065         bcf             badge_status, 2
0B39                  04066 MAINLOOP2_no_egg_update
                      04067         
                      04068         
                      04069         
0B39                  04070 UPDATE_LOGO             
                      04071         ; update counters
                      04072         ; check for quest done
0B39   3023           04073         movlw   high(ram_status)        ;  bit 7 0 = dead, bit 6 0 = uber on, bit 5 0 = quest done, bit 
                            4 0 = quest start, bit 3 = 0 has egg, bit 2 = 0 is cured, bit 1 = 0 has pink eye, bit 0 = 0 con 
0B3A   0087           04074         movwf   FSR1H
0B3B   3070           04075         movlw   low(ram_status)
0B3C   0086           04076         movwf   FSR1L   
0B3D   1E81           04077         btfss   INDF1, 5                        ; 0 = quest done
0B3E   2???           04078         goto    LOGO_not_quest
                      04079         ; check for quest mode
0B3F   1A01           04080         btfsc   INDF1, 4                        ; 0 = in quest mode
0B40   2???           04081         goto    LOGO_not_quest
                      04082         ; check if quest is complete
0B41   3023           04083         movlw   high(ram_questID)       
0B42   0087           04084         movwf   FSR1H
0B43   308E           04085         movlw   low(ram_questID)
0B44   0086           04086         movwf   FSR1L   
0B45   0901           04087         comf    INDF1, W
0B46   1D03           04088         btfss   STATUS, Z
0B47   2???           04089         goto    LOGO_quest_done
0B48   0014           04090         moviw   ++FSR1                          ; easier than 16 bit math
0B49   0901           04091         comf    INDF1, W
0B4A   1903           04092         btfsc   STATUS, Z
0B4B   2???           04093         goto    LOGO_quest
0B4C                  04094 LOGO_quest_done 
                      04095         ; check if update delay is done
0B4C   1C39           04096         btfss   badge_ctrl, 0
0B4D   2???           04097         goto    LOGO_update_done
0B4E   1039           04098         bcf     badge_ctrl, 0   
                      04099         ; quest ID recorded so task is done (blink green)
0B4F   01B1           04100         clrf    logo_a                          ; amber LEDs off
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 82


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0B50   01AE           04101         clrf    logo_r
0B51   01B0           04102         clrf    logo_b
0B52   1F2C           04103         btfss   badge_status, 6                 ; bit 0,1 = 0 dead, 1 sleep, 2 active, 3 hyper; bit 2 = 
                            egg led state; bit 3 = stomach led state; bit 4 = amber dir; bit 5 = red dir; bit 6 = green dir;
0B53   2???           04104         goto    LOGO_green_blink_on
0B54   01AF           04105         clrf    logo_g
0B55   132C           04106         bcf     badge_status, 6                 ; bit 0,1 = 0 dead, 1 sleep, 2 active, 3 hyper; bit 2 = 
                            egg led state; bit 3 = stomach led state; bit 4 = amber dir; bit 5 = red dir; bit 6 = green dir;
0B56   2???           04107         goto    LOGO_load_leds  
0B57                  04108 LOGO_green_blink_on
0B57   30FF           04109         movlw   0xFF
0B58   00AF           04110         movwf   logo_g
0B59   172C           04111         bsf     badge_status, 6                 ; bit 0,1 = 0 dead, 1 sleep, 2 active, 3 hyper; bit 2 = 
                            egg led state; bit 3 = stomach led state; bit 4 = amber dir; bit 5 = red dir; bit 6 = green dir;
0B5A   2???           04112         goto    LOGO_load_leds  
0B5B                  04113 LOGO_quest
0B5B   01B1           04114         clrf    logo_a                          ; amber LEDs off
0B5C   1EAC           04115         btfss   badge_status, 5                 ; bit 0,1 = 0 dead, 1 sleep, 2 active, 3 hyper; bit 2 = 
                            egg led state; bit 3 = stomach led state; bit 4 = amber dir; bit 5 = red dir; bit 6 = green dir;
0B5D   2???           04116         goto    LOGO_down_white
                      04117 
0B5E   0AAE           04118         incf    logo_r, F
0B5F   082E           04119         movf    logo_r, W
0B60   00AE           04120         movwf   logo_r
0B61   00AF           04121         movwf   logo_g
0B62   00B0           04122         movwf   logo_b
                      04123         
0B63   092E           04124         comf    logo_r, W
0B64   1903           04125         btfsc   STATUS, Z
0B65   12AC           04126         bcf     badge_status, 5
0B66   2???           04127         goto    LOGO_skip_white
                      04128         
0B67                  04129 LOGO_down_white
0B67   03AE           04130         decf    logo_r, F
0B68   082E           04131         movf    logo_r, W
0B69   00AE           04132         movwf   logo_r
0B6A   00AF           04133         movwf   logo_g
0B6B   00B0           04134         movwf   logo_b
0B6C   1903           04135         btfsc   STATUS, Z
0B6D   16AC           04136         bsf     badge_status, 5
                      04137 
0B6E                  04138 LOGO_skip_white 
0B6E   2???           04139         goto    LOGO_load_leds
                      04140 
0B6F                  04141 LOGO_not_quest
                      04142         ; check if con started
0B6F   3023           04143         movlw   high(ram_status)        ;  bit 7 0 = dead, bit 6 0 = uber on, bit 5 0 = quest done, bit 
                            4 0 = quest start, bit 3 = 0 has egg, bit 2 = 0 is cured, bit 1 = 0 has pink eye, bit 0 = 0 con 
0B70   0087           04144         movwf   FSR1H
0B71   3070           04145         movlw   low(ram_status)
0B72   0086           04146         movwf   FSR1L   
0B73   1C01           04147         btfss   INDF1, 0                        ; if set non uber mode
0B74   2???           04148         goto    LOGO_not_quest_con_on
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 83


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      04149         ; check if update delay is done
0B75   0873           04150         movf    delay_cnt, W
0B76   1D03           04151         btfss   STATUS, Z       
0B77   2???           04152         goto    LOGO_update_done
0B78   3001           04153         movlw   0x01                    ; SUPPPER slow delay
0B79   00F3           04154         movwf   delay_cnt
0B7A   2???           04155         goto    LOGO_not_quest_update
                      04156         
0B7B                  04157 LOGO_not_quest_con_on   
                      04158         ; check if uber if so fast mode else slow
0B7B   3023           04159         movlw   high(ram_status)        ;  bit 7 0 = dead, bit 6 0 = uber on, bit 5 0 = quest done, bit 
                            4 0 = quest start, bit 3 = 0 has egg, bit 2 = 0 is cured, bit 1 = 0 has pink eye, bit 0 = 0 con 
0B7C   0087           04160         movwf   FSR1H
0B7D   3070           04161         movlw   low(ram_status)
0B7E   0086           04162         movwf   FSR1L   
0B7F   1F01           04163         btfss   INDF1, 6                        ; if set non uber mode
0B80   2???           04164         goto    LOGO_not_quest_update
                      04165         ; check if update delay is done
0B81   3001           04166         movlw   0x01
0B82   02BE           04167         subwf   logo_cntL, F                    ; f - W, C = 0 if W > f, C = 1 if W <= f
0B83   3000           04168         movlw   0x00
0B84   3BBF           04169         subwfb  logo_cntH, F                    ; f - W - #B, C = 0 if (W + #B) > f, C = 1 if (W + #B) <
                            = f
0B85   1803           04170         btfsc   STATUS, C
0B86   2???           04171         goto    LOGO_update_done
0B87   30FF           04172         movlw   LOW(LOGO_SPEED)
0B88   00BE           04173         movwf   logo_cntL       
0B89   3002           04174         movlw   HIGH(LOGO_SPEED)
0B8A   00BF           04175         movwf   logo_cntH       
                      04176         
                      04177         
0B8B                  04178 LOGO_not_quest_update   
                      04179 ; old code power draw too high.         
                      04180 ;       ; normal fade mode
                      04181 ;       btfss   badge_status, 4                 ; bit 0,1 = 0 dead, 1 sleep, 2 active, 3 hyper; bit 2 = 
                            egg led state; bit 3 = stomach led state; bit 4 = amber dir; bit 5 = red dir; bit 6 = green dir;
                      04182 ;       goto    LOGO_down_amber
                      04183 ;       incf    logo_a, F
                      04184 ;       comf    logo_a, W
                      04185 ;       btfsc   STATUS, Z
                      04186 ;       bcf     badge_status, 4
                      04187 ;       goto    LOGO_skip_amber
                      04188 ;LOGO_down_amber        
                      04189 ;       decf    logo_a, F
                      04190 ;       movf    logo_a, W
                      04191 ;       btfsc   STATUS, Z
                      04192 ;       bsf     badge_status, 4
                      04193 ;LOGO_skip_amber        
                      04194 ;
                      04195 ;       btfss   badge_status, 5                 ; bit 0,1 = 0 dead, 1 sleep, 2 active, 3 hyper; bit 2 = 
                            egg led state; bit 3 = stomach led state; bit 4 = amber dir; bit 5 = red dir; bit 6 = green dir;
                      04196 ;       goto    LOGO_down_red
                      04197 ;       incf    logo_r, F
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 84


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      04198 ;       comf    logo_r, W
                      04199 ;       btfsc   STATUS, Z
                      04200 ;       bcf     badge_status, 5
                      04201 ;       goto    LOGO_skip_red
                      04202 ;LOGO_down_red  
                      04203 ;       decf    logo_r, F
                      04204 ;       movf    logo_r, W
                      04205 ;       btfsc   STATUS, Z
                      04206 ;       bsf     badge_status, 5
                      04207 ;       movf    logo_r, W
                      04208 ;       xorlw   0x20
                      04209 ;       btfss   STATUS, Z
                      04210 ;       goto    LOGO_skip_red
                      04211 ;       movlw   0x04
                      04212 ;       subwf   logo_r, F
                      04213 ;LOGO_skip_red  
                      04214 ;
                      04215 ;       btfss   badge_status, 6                 ; bit 0,1 = 0 dead, 1 sleep, 2 active, 3 hyper; bit 2 = 
                            egg led state; bit 3 = stomach led state; bit 4 = amber dir; bit 5 = red dir; bit 6 = green dir;
                      04216 ;       goto    LOGO_down_green
                      04217 ;       incf    logo_g, F
                      04218 ;       comf    logo_g, W
                      04219 ;       btfsc   STATUS, Z
                      04220 ;       bcf     badge_status, 6
                      04221 ;       goto    LOGO_skip_green
                      04222 ;LOGO_down_green        
                      04223 ;       decf    logo_g, F
                      04224 ;       movf    logo_g, W
                      04225 ;       btfsc   STATUS, Z
                      04226 ;       bsf     badge_status, 6
                      04227 ;       movf    logo_g, W
                      04228 ;       xorlw   0x10
                      04229 ;       btfss   STATUS, Z
                      04230 ;       goto    LOGO_skip_green
                      04231 ;       movlw   0x07
                      04232 ;       subwf   logo_g, F
                      04233 ;LOGO_skip_green        
                      04234 ;
                      04235 ;       btfss   badge_status, 7                 ; bit 0,1 = 0 dead, 1 sleep, 2 active, 3 hyper; bit 2 = 
                            egg led state; bit 3 = stomach led state; bit 4 = amber dir; bit 5 = red dir; bit 6 = green dir;
                      04236 ;       goto    LOGO_down_blue
                      04237 ;       incf    logo_b, F
                      04238 ;       comf    logo_b, W
                      04239 ;       btfsc   STATUS, Z
                      04240 ;       bcf     badge_status, 7
                      04241 ;       goto    LOGO_skip_blue
                      04242 ;LOGO_down_blue 
                      04243 ;       decf    logo_b, F
                      04244 ;       movf    logo_b, W
                      04245 ;       btfsc   STATUS, Z
                      04246 ;       bsf     badge_status, 7
                      04247 ;       movf    logo_b, W
                      04248 ;       xorlw   0x10
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 85


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      04249 ;       btfss   STATUS, Z
                      04250 ;       goto    LOGO_skip_blue
                      04251 ;       movlw   0x0A
                      04252 ;       subwf   logo_b, F
                      04253 ;LOGO_skip_blue 
                      04254 
                      04255         
                      04256         
                      04257 ; new hopefully lower power method
                      04258         ; amber up
0B8B   084D           04259         movf    logo_seq, W
0B8C   1D03           04260         btfss   STATUS, Z
0B8D   2???           04261         goto    LOGO_not_seq0
0B8E   0AB1           04262         incf    logo_a, F
0B8F   0931           04263         comf    logo_a, W
0B90   1903           04264         btfsc   STATUS, Z
0B91   0ACD           04265         incf    logo_seq, F
0B92   2???           04266         goto    LOGO_load_leds  
0B93                  04267 LOGO_not_seq0   
                      04268         ; amber down
0B93   084D           04269         movf    logo_seq, W
0B94   3A01           04270         xorlw   0x01
0B95   1D03           04271         btfss   STATUS, Z
0B96   2???           04272         goto    LOGO_not_seq1
0B97   03B1           04273         decf    logo_a, F
0B98   0831           04274         movf    logo_a, W
0B99   1903           04275         btfsc   STATUS, Z
0B9A   0ACD           04276         incf    logo_seq, F
0B9B   2???           04277         goto    LOGO_load_leds  
0B9C                  04278 LOGO_not_seq1
                      04279         ; red up
0B9C   084D           04280         movf    logo_seq, W
0B9D   3A02           04281         xorlw   0x02
0B9E   1D03           04282         btfss   STATUS, Z
0B9F   2???           04283         goto    LOGO_not_seq2
0BA0   0AAE           04284         incf    logo_r, F
0BA1   092E           04285         comf    logo_r, W
0BA2   1903           04286         btfsc   STATUS, Z
0BA3   0ACD           04287         incf    logo_seq, F
0BA4   2???           04288         goto    LOGO_load_leds  
0BA5                  04289 LOGO_not_seq2   
                      04290         ; red down
0BA5   084D           04291         movf    logo_seq, W
0BA6   3A03           04292         xorlw   0x03
0BA7   1D03           04293         btfss   STATUS, Z
0BA8   2???           04294         goto    LOGO_not_seq3
0BA9   03AE           04295         decf    logo_r, F
0BAA   082E           04296         movf    logo_r, W
0BAB   1903           04297         btfsc   STATUS, Z
0BAC   0ACD           04298         incf    logo_seq, F
0BAD   2???           04299         goto    LOGO_load_leds  
0BAE                  04300 LOGO_not_seq3
                      04301         ; amber up
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 86


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0BAE   084D           04302         movf    logo_seq, W
0BAF   3A04           04303         xorlw   0x04
0BB0   1D03           04304         btfss   STATUS, Z
0BB1   2???           04305         goto    LOGO_not_seq4
0BB2   0AB1           04306         incf    logo_a, F
0BB3   0931           04307         comf    logo_a, W
0BB4   1903           04308         btfsc   STATUS, Z
0BB5   0ACD           04309         incf    logo_seq, F
0BB6   2???           04310         goto    LOGO_load_leds  
0BB7                  04311 LOGO_not_seq4
                      04312         ; amber down
0BB7   084D           04313         movf    logo_seq, W
0BB8   3A05           04314         xorlw   0x05
0BB9   1D03           04315         btfss   STATUS, Z
0BBA   2???           04316         goto    LOGO_not_seq5
0BBB   03B1           04317         decf    logo_a, F
0BBC   0831           04318         movf    logo_a, W
0BBD   1903           04319         btfsc   STATUS, Z
0BBE   0ACD           04320         incf    logo_seq, F
0BBF   2???           04321         goto    LOGO_load_leds  
0BC0                  04322 LOGO_not_seq5
                      04323         ; red up
0BC0   084D           04324         movf    logo_seq, W
0BC1   3A06           04325         xorlw   0x06
0BC2   1D03           04326         btfss   STATUS, Z
0BC3   2???           04327         goto    LOGO_not_seq6
0BC4   0AAF           04328         incf    logo_g, F
0BC5   092F           04329         comf    logo_g, W
0BC6   1903           04330         btfsc   STATUS, Z
0BC7   0ACD           04331         incf    logo_seq, F
0BC8   2???           04332         goto    LOGO_load_leds  
0BC9                  04333 LOGO_not_seq6
                      04334         ; red down
0BC9   084D           04335         movf    logo_seq, W
0BCA   3A07           04336         xorlw   0x07
0BCB   1D03           04337         btfss   STATUS, Z
0BCC   2???           04338         goto    LOGO_not_seq7
0BCD   03AF           04339         decf    logo_g, F
0BCE   082F           04340         movf    logo_g, W
0BCF   1903           04341         btfsc   STATUS, Z
0BD0   0ACD           04342         incf    logo_seq, F
0BD1   2???           04343         goto    LOGO_load_leds  
0BD2                  04344 LOGO_not_seq7
                      04345         ; amber up
0BD2   084D           04346         movf    logo_seq, W
0BD3   3A08           04347         xorlw   0x08
0BD4   1D03           04348         btfss   STATUS, Z
0BD5   2???           04349         goto    LOGO_not_seq8
0BD6   0AB1           04350         incf    logo_a, F
0BD7   0931           04351         comf    logo_a, W
0BD8   1903           04352         btfsc   STATUS, Z
0BD9   0ACD           04353         incf    logo_seq, F
0BDA   2???           04354         goto    LOGO_load_leds  
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 87


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0BDB                  04355 LOGO_not_seq8
                      04356         ; amber down
0BDB   084D           04357         movf    logo_seq, W
0BDC   3A09           04358         xorlw   0x09
0BDD   1D03           04359         btfss   STATUS, Z
0BDE   2???           04360         goto    LOGO_not_seq9
0BDF   03B1           04361         decf    logo_a, F
0BE0   0831           04362         movf    logo_a, W
0BE1   1903           04363         btfsc   STATUS, Z
0BE2   0ACD           04364         incf    logo_seq, F
0BE3   2???           04365         goto    LOGO_load_leds  
0BE4                  04366 LOGO_not_seq9
                      04367         ; red up
0BE4   084D           04368         movf    logo_seq, W
0BE5   3A0A           04369         xorlw   0x0A
0BE6   1D03           04370         btfss   STATUS, Z
0BE7   2???           04371         goto    LOGO_not_seqA
0BE8   0AB0           04372         incf    logo_b, F
0BE9   0930           04373         comf    logo_b, W
0BEA   1903           04374         btfsc   STATUS, Z
0BEB   0ACD           04375         incf    logo_seq, F
0BEC   2???           04376         goto    LOGO_load_leds  
0BED                  04377 LOGO_not_seqA
                      04378         ; red down
0BED   084D           04379         movf    logo_seq, W
0BEE   3A0B           04380         xorlw   0x0B
0BEF   1D03           04381         btfss   STATUS, Z
0BF0   2???           04382         goto    LOGO_not_seqB
0BF1   03B0           04383         decf    logo_b, F
0BF2   0830           04384         movf    logo_b, W
0BF3   1D03           04385         btfss   STATUS, Z
0BF4   2???           04386         goto    LOGO_load_leds  
0BF5   0ACD           04387         incf    logo_seq, F     
0BF6                  04388 LOGO_not_seqB
                      04389         ; catch all to clean things up if out of sync
0BF6   01CD           04390         clrf    logo_seq
                      04391         
0BF7                  04392 LOGO_load_leds  
0BF7   2???           04393         call    _2_I2C_START    
0BF8   3078           04394         movlw   0x78                            ; ISSI chip address
0BF9   2???           04395         call    _2_SEND_W_I2C
0BFA   3003           04396         movlw   d'3'                            ; reg offset
0BFB   2???           04397         call    _2_SEND_W_I2C   
0BFC   3005           04398         movlw   0x05                            ; loop though 5 times to update all 4 led banks
0BFD   00A0           04399         movwf   temp    
0BFE                  04400 LOGO_update_loop1       
0BFE   0831           04401         movf    logo_a, W                       ; amber leds
0BFF   2???           04402         call    _2_SEND_W_I2C
0C00   082E           04403         movf    logo_r, W                       ; red leds
0C01   2???           04404         call    _2_SEND_W_I2C
0C02   082F           04405         movf    logo_g, W                       ; green leds
0C03   2???           04406         call    _2_SEND_W_I2C
0C04   0830           04407         movf    logo_b, W                       ; blue leds
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 88


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0C05   2???           04408         call    _2_SEND_W_I2C
0C06   0BA0           04409         decfsz  temp, F
0C07   2???           04410         goto    LOGO_update_loop1
0C08   0831           04411         movf    logo_a, W                       
0C09   2???           04412         call    _2_SEND_W_I2C           ; last amber led 
0C0A   2???           04413         call    _2_I2C_STOP     
                      04414         
0C0B   2???           04415         call    _2_LED_SET_1                    ; update the leds to the new state      
0C0C   2???           04416         call    _2_LED_SET_2                    ; update the leds to the new state      
                      04417         
0C0D                  04418 LOGO_update_done
                      04419                 
                      04420         
                      04421 
0C0D                  04422 UPDATE_BODY
0C0D   2???           04423         call    _2_CYCLE_LFSR           ; ok this was a lazy hack to keep the LFSR updating even when th
                            e con is not running. This is used by the once code as well so don't want stale data out there. 
                      04424         
                      04425         
                      04426         ; check if a sparkle LED is on right now
0C0E   0837           04427         movf    sparkle_last, W         ; if 0 (init value) skip this code
0C0F   1903           04428         btfsc   STATUS, Z
0C10   2???           04429         goto    BODY_bank_done_off
                      04430 
                      04431         ; set up the delay to the next LED on 
0C11   3023           04432         movlw   high(ram_status)        ;  bit 7 0 = dead, bit 6 0 = uber on, bit 5 0 = quest done, bit 
                            4 0 = quest start, bit 3 = 0 has egg, bit 2 = 0 is cured, bit 1 = 0 has pink eye, bit 0 = 0 con 
0C12   0087           04433         movwf   FSR1H
0C13   3070           04434         movlw   low(ram_status)
0C14   0086           04435         movwf   FSR1L   
0C15   1F01           04436         btfss   INDF1, 6                        
0C16   2???           04437         goto    UPDATE_BODY_uber
0C17   0801           04438         movf    INDF1, W
0C18   3930           04439         andlw   0x30
0C19   3A20           04440         xorlw   0x20
0C1A   1D03           04441         btfss   STATUS, Z
0C1B   2???           04442         goto    UPDATE_BODY_not_quest
                      04443         ; check if quest is done
0C1C   3023           04444         movlw   high(ram_questID)       
0C1D   0087           04445         movwf   FSR1H
0C1E   308E           04446         movlw   low(ram_questID)
0C1F   0086           04447         movwf   FSR1L   
0C20   0901           04448         comf    INDF1, W
0C21   1D03           04449         btfss   STATUS, Z
0C22   2???           04450         goto    UPDATE_BODY_quest_done
0C23   0014           04451         moviw   ++FSR1                          ; easier than 16 bit math
0C24   0901           04452         comf    INDF1, W
0C25   1D03           04453         btfss   STATUS, Z
0C26   2???           04454         goto    UPDATE_BODY_quest_done
0C27   3010           04455         movlw   0x10                    ; normal quest in progress
0C28   00B8           04456         movwf   sparkle_skip
0C29   2???           04457         goto    UPDATE_BODY_not_uber
0C2A                  04458 UPDATE_BODY_quest_done  
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 89


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0C2A   30FF           04459         movlw   0xFF                    ; normal quest done
0C2B   00B8           04460         movwf   sparkle_skip
0C2C   2???           04461         goto    UPDATE_BODY_not_uber    
0C2D                  04462 UPDATE_BODY_not_quest   
0C2D   30FF           04463         movlw   0xFF                    ; normal non quest mode
0C2E   00B8           04464         movwf   sparkle_skip
0C2F   2???           04465         goto    UPDATE_BODY_not_uber
0C30                  04466 UPDATE_BODY_uber
0C30   3001           04467         movlw   0x01                    ; uber mode                     
0C31   00B8           04468         movwf   sparkle_skip
0C32                  04469 UPDATE_BODY_not_uber    
                      04470         
                      04471         ; turn off last random on LED. 
0C32   1FB7           04472         btfss   sparkle_last, 7
0C33   2???           04473         goto    BODY_bank1_off
0C34   13B7           04474         bcf     sparkle_last, 7
0C35   2???           04475         call    _2_I2C_START    
0C36   307E           04476         movlw   0x7E                        ; ISSI chip address
0C37   2???           04477         call    _2_SEND_W_I2C
0C38   0837           04478         movf    sparkle_last, W                 ; reg offset
0C39   2???           04479         call    _2_SEND_W_I2C   
0C3A   3000           04480         movlw   0x00                            ; reg value
0C3B   2???           04481         call    _2_SEND_W_I2C
0C3C   2???           04482         call    _2_I2C_STOP
0C3D   01B7           04483         clrf    sparkle_last
0C3E   2???           04484         goto    BODY_bank_done_off
0C3F                  04485 BODY_bank1_off
0C3F   2???           04486         call    _2_I2C_START    
0C40   3078           04487         movlw   0x78                        ; ISSI chip address
0C41   2???           04488         call    _2_SEND_W_I2C
0C42   0837           04489         movf    sparkle_last, W                 ; reg offset
0C43   2???           04490         call    _2_SEND_W_I2C   
0C44   3000           04491         movlw   0x00                            ; reg value
0C45   2???           04492         call    _2_SEND_W_I2C
0C46   2???           04493         call    _2_I2C_STOP     
0C47   01B7           04494         clrf    sparkle_last
0C48                  04495 BODY_bank_done_off      
                      04496 
                      04497         ; check if con has started
0C48   3023           04498         movlw   high(ram_status)        ;  bit 7 0 = dead, bit 6 0 = uber on, bit 5 0 = quest done, bit 
                            4 0 = quest start, bit 3 = 0 has egg, bit 2 = 0 is cured, bit 1 = 0 has pink eye, bit 0 = 0 con 
0C49   0087           04499         movwf   FSR1H
0C4A   3070           04500         movlw   low(ram_status)
0C4B   0086           04501         movwf   FSR1L   
0C4C   1801           04502         btfsc   INDF1, 0                        ; 0 = con started
0C4D   2???           04503         goto    BODY_bank_skip  
                      04504         
                      04505         ; non uber skip a few cycle before next blink
0C4E   0BB8           04506         decfsz  sparkle_skip, F
0C4F   2???           04507         goto    BODY_bank_skip
                      04508         
                      04509         ; randomly select LED and value
0C50                  04510 BODY_lfsr_loop          
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 90


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0C50   2???           04511         call    _2_CYCLE_LFSR
0C51   393F           04512         andlw   0x3F
0C52   00A1           04513         movwf   temp1
0C53   3C2E           04514         sublw   d'46'                   ; k - W, C = 0 if W > k, C = 1 if W <= k        
0C54   1C03           04515         btfss   STATUS, C
0C55   2???           04516         goto    BODY_lfsr_loop
0C56   0821           04517         movf    temp1, W
0C57   2???           04518         call    _2_SELECT_PINK
0C58   00A1           04519         movwf   temp1
0C59   00B7           04520         movwf   sparkle_last
0C5A   1FA1           04521         btfss   temp1, 7
0C5B   2???           04522         goto    BODY_bank1
0C5C   13A1           04523         bcf     temp1, 7
0C5D   2???           04524         call    _2_I2C_START    
0C5E   307E           04525         movlw   0x7E                        ; ISSI chip address
0C5F   2???           04526         call    _2_SEND_W_I2C
0C60   0821           04527         movf    temp1, W                        ; reg offset
0C61   2???           04528         call    _2_SEND_W_I2C   
0C62   2???           04529         call    _2_CYCLE_LFSR
                      04530         ;movlw  0xFF                            ; reg value
0C63   2???           04531         call    _2_SEND_W_I2C
0C64   2???           04532         call    _2_I2C_STOP     
0C65   2???           04533         goto    BODY_bank_done
0C66                  04534 BODY_bank1      
0C66   2???           04535         call    _2_I2C_START    
0C67   3078           04536         movlw   0x78                        ; ISSI chip address
0C68   2???           04537         call    _2_SEND_W_I2C
0C69   0821           04538         movf    temp1, W                        ; reg offset
0C6A   2???           04539         call    _2_SEND_W_I2C   
0C6B   2???           04540         call    _2_CYCLE_LFSR
                      04541         ;movlw  0xFF                        ; reg value
0C6C   2???           04542         call    _2_SEND_W_I2C
0C6D   2???           04543         call    _2_I2C_STOP     
0C6E                  04544 BODY_bank_done  
0C6E   2???           04545         call    _2_LED_SET_1                    ; update the leds to the new state      
0C6F   2???           04546         call    _2_LED_SET_2                    ; update the leds to the new state      
0C70                  04547 BODY_bank_skip  
                      04548 
                      04549         
                      04550         
                      04551         
                      04552         ; check if warning lights need to be updated
0C70   1CF1           04553         btfss   g_flags, 1      ; bit 0 = update flash, bit 1 = force stomach off, bit 2 = force poo off
0C71   2???           04554         goto    MAINLOOP2_no_force_stomach
                      04555         ; turn off stomach
0C72   301F           04556         movlw   D'31'                       ; address byte
0C73   00A2           04557         movwf   i2c_off                     ; address byte
0C74   3000           04558         movlw   0x00                            
0C75   00A3           04559         movwf   i2c_dat0                    
0C76   2???           04560         call    _2_LED_WRITE_2
0C77   2???           04561         call    _2_LED_SET_2                    ; update the leds to the new state
0C78   10F1           04562         bcf             g_flags, 1      ; bit 0 = update flash, bit 1 = force stomach off, bit 2 = force
                             poo off
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 91


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0C79                  04563 MAINLOOP2_no_force_stomach
                      04564         ; turn off poo
0C79   1D71           04565         btfss   g_flags, 2      ; bit 0 = update flash, bit 1 = force stomach off, bit 2 = force poo off
0C7A   2???           04566         goto    MAINLOOP2_no_force_poo
                      04567         ; turn off stomach
0C7B   301C           04568         movlw   D'28'                       ; address byte
0C7C   00A2           04569         movwf   i2c_off                     ; address byte
0C7D   3000           04570         movlw   0x00                            
0C7E   00A3           04571         movwf   i2c_dat0                    
0C7F   2???           04572         call    _2_LED_WRITE_1
0C80   2???           04573         call    _2_LED_SET_1                    ; update the leds to the new state
0C81   1171           04574         bcf             g_flags, 2      ; bit 0 = update flash, bit 1 = force stomach off, bit 2 = force
                             poo off
0C82                  04575 MAINLOOP2_no_force_poo          
                      04576         
                      04577         ; update counter values
0C82   082B           04578         movf    time_passed, W
0C83   1903           04579         btfsc   STATUS, Z
0C84   2???           04580         goto    MAINLOOP2_no_counter_update
0C85   00A0           04581         movwf   temp
0C86   01AB           04582         clrf    time_passed
                      04583         
                      04584         ; if in postcon mode don't update counters or auto switch modes. (done above in the postcon rano
                            mizer code) 
0C87   1939           04585         btfsc   badge_ctrl, 2       ; bit 0 = logo tick , bit 1 = poo led, bit 2 = postcon mode 
0C88   2???           04586         goto    MAINLOOP2_postcon_skip_chks
                      04587         
                      04588         ; check if con is running if not skip all 
0C89   3023           04589         movlw   high(ram_status)        ;  bit 7 0 = dead, bit 6 0 = uber on, bit 5 0 = quest done, bit 
                            4 0 = quest start, bit 3 = 0 has egg, bit 2 = 0 is cured, bit 1 = 0 has pink eye, bit 0 = 0 con 
0C8A   0087           04590         movwf   FSR1H
0C8B   3070           04591         movlw   low(ram_status)
0C8C   0086           04592         movwf   FSR1L   
0C8D   0801           04593         movf    INDF1, W
0C8E   00A1           04594         movwf   temp1
0C8F   3901           04595         andlw   0x01                            ; con started?
0C90   1D03           04596         btfss   STATUS, Z
0C91   2???           04597         goto    MAINLOOP2_no_counter_update
                      04598         ; check if badge is dead        
0C92   0801           04599         movf    INDF1, W
0C93   3980           04600         andlw   0x80                            ; is badge dead
0C94   1903           04601         btfsc   STATUS, Z
0C95   2???           04602         goto    MAINLOOP2_dead_led_skip 
                      04603 
0C96                  04604 MAINLOOP2_postcon_skip_chks     
                      04605         
                      04606         ; this should tick over once a second use to blink warning lights as well       
0C96   3051           04607         movlw   food_warn
0C97   023B           04608         subwf   food_cnt, W                     ; f - W, C = 0 if W > f, C = 1 if W <= f        
0C98   1803           04609         btfsc   STATUS, C
0C99   2???           04610         goto    MAINLOOP2_no_food_warn
0C9A   19AC           04611         btfsc   badge_status, 3         ; bit 0,1 = 0 dead, 1 sleep, 2 active, 3 hyper; bit 2 = egg led 
                            state; bit 3 = stomach led state; bit 4 = amber dir; bit 5 = red dir; bit 6 = green dir; bit 7 =
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 92


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0C9B   2???           04612         goto    MAINLOOP2_stomach_off
                      04613         ; turn on stomach
0C9C   301F           04614         movlw   D'31'                       ; address byte
0C9D   00A2           04615         movwf   i2c_off                     ; address byte
0C9E   30FF           04616         movlw   0xFF                            
0C9F   00A3           04617         movwf   i2c_dat0                    
0CA0   2???           04618         call    _2_LED_WRITE_2  
0CA1   2???           04619         call    _2_LED_SET_2                    ; update the leds to the new state
0CA2   15AC           04620         bsf             badge_status, 3
0CA3   2???           04621         goto    MAINLOOP2_no_food_warn
0CA4                  04622 MAINLOOP2_stomach_off   
                      04623         ; turn off stomach
0CA4   301F           04624         movlw   D'31'                       ; address byte
0CA5   00A2           04625         movwf   i2c_off                     ; address byte
0CA6   3000           04626         movlw   0x00                            
0CA7   00A3           04627         movwf   i2c_dat0                    
0CA8   2???           04628         call    _2_LED_WRITE_2
0CA9   2???           04629         call    _2_LED_SET_2                    ; update the leds to the new state
0CAA   11AC           04630         bcf             badge_status, 3
0CAB                  04631 MAINLOOP2_no_food_warn  
                      04632 
                      04633         ; this should tick over once a second use to blink warning lights as well       
0CAB   3080           04634         movlw   poo_warn
0CAC   023C           04635         subwf   poo_cnt, W                      ; f - W, C = 0 if W > f, C = 1 if W <= f        
0CAD   1C03           04636         btfss   STATUS, C
0CAE   2???           04637         goto    MAINLOOP2_no_poo_warn
0CAF   18B9           04638         btfsc   badge_ctrl, 1           ; bit 0 = body uber, bit 1 = poo led    
0CB0   2???           04639         goto    MAINLOOP2_poo_off
                      04640         ; turn on stomach
0CB1   301C           04641         movlw   D'28'                       ; address byte
0CB2   00A2           04642         movwf   i2c_off                     ; address byte
0CB3   30FF           04643         movlw   0xFF                            
0CB4   00A3           04644         movwf   i2c_dat0                    
0CB5   2???           04645         call    _2_LED_WRITE_1
0CB6   2???           04646         call    _2_LED_SET_1                    ; update the leds to the new state
0CB7   14B9           04647         bsf             badge_ctrl, 1
0CB8   2???           04648         goto    MAINLOOP2_no_poo_warn
0CB9                  04649 MAINLOOP2_poo_off       
                      04650         ; turn off stomach
0CB9   301C           04651         movlw   D'28'                       ; address byte
0CBA   00A2           04652         movwf   i2c_off                     ; address byte
0CBB   3000           04653         movlw   0x00                            
0CBC   00A3           04654         movwf   i2c_dat0                    
0CBD   2???           04655         call    _2_LED_WRITE_1
0CBE   2???           04656         call    _2_LED_SET_1                    ; update the leds to the new state
0CBF   10B9           04657         bcf             badge_ctrl, 1
0CC0                  04658 MAINLOOP2_no_poo_warn   
                      04659         
0CC0                  04660 MAINLOOP2_dead_led_skip 
                      04661         
                      04662 
                      04663         ; if in postcon mode don't update counters or auto switch modes. (done above in the postcon rano
                            mizer code) 
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 93


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0CC0   1939           04664         btfsc   badge_ctrl, 2       ; bit 0 = logo tick , bit 1 = poo led, bit 2 = postcon mode 
0CC1   2???           04665         goto    MAINLOOP2_return_2_MAINLOOP
                      04666         
                      04667         
                      04668         ; check if there is an egg (this counter runs even when dead...)
0CC2   19A1           04669         btfsc   temp1, 3                        ; 0 = has egg     ; bit 7 0 = dead, bit 6 0 = uber on, b
                            it 5 0 = quest done, bit 4 0 = quest start, bit 3 = 0 has egg, bit 2 = 0 is cured, bit 1 = 0 has
0CC3   2???           04670         goto    MAINLOOP2_no_counter_egg
0CC4   3023           04671         movlw   high(ram_prego) 
0CC5   0085           04672         movwf   FSR0H
0CC6   3083           04673         movlw   low(ram_prego)
0CC7   0084           04674         movwf   FSR0L   
0CC8   0820           04675         movf    temp, W
0CC9   2???           04676         call    _2_3BYTE_SUB_N_STOP
0CCA                  04677 MAINLOOP2_no_counter_egg        
                      04678         ; check badge status and add time where it should go
0CCA   082C           04679         movf    badge_status, W
0CCB   3903           04680         andlw   0x03
0CCC   3A01           04681         xorlw   0x01
0CCD   1D03           04682         btfss   STATUS, Z
0CCE   2???           04683         goto    MAINLOOP2_no_counter_sleep
0CCF   3023           04684         movlw   high(ram_sleep) 
0CD0   0085           04685         movwf   FSR0H
0CD1   307A           04686         movlw   low(ram_sleep)
0CD2   0084           04687         movwf   FSR0L   
0CD3   0820           04688         movf    temp, W
0CD4   2???           04689         call    _2_3BYTE_SUB_N_STOP     
0CD5                  04690 MAINLOOP2_no_counter_sleep      
0CD5   082C           04691         movf    badge_status, W
0CD6   3903           04692         andlw   0x03
0CD7   3A02           04693         xorlw   0x02
0CD8   1D03           04694         btfss   STATUS, Z
0CD9   2???           04695         goto    MAINLOOP2_no_counter_active
0CDA   3023           04696         movlw   high(ram_active)        
0CDB   0085           04697         movwf   FSR0H
0CDC   307D           04698         movlw   low(ram_active)
0CDD   0084           04699         movwf   FSR0L   
0CDE   0820           04700         movf    temp, W
0CDF   2???           04701         call    _2_3BYTE_SUB_N_STOP     
0CE0                  04702 MAINLOOP2_no_counter_active     
0CE0   082C           04703         movf    badge_status, W
0CE1   3903           04704         andlw   0x03
0CE2   3A03           04705         xorlw   0x03
0CE3   1D03           04706         btfss   STATUS, Z
0CE4   2???           04707         goto    MAINLOOP2_no_counter_hyper
0CE5   3023           04708         movlw   high(ram_hyper) 
0CE6   0085           04709         movwf   FSR0H
0CE7   3080           04710         movlw   low(ram_hyper)
0CE8   0084           04711         movwf   FSR0L   
0CE9   0820           04712         movf    temp, W
0CEA   2???           04713         call    _2_3BYTE_SUB_N_STOP     
0CEB                  04714 MAINLOOP2_no_counter_hyper
                      04715         ; no need to check the dead state as there is no counter for that one. 
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 94


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      04716                 
0CEB                  04717 MAINLOOP2_no_counter_update             
                      04718 
                      04719         
                      04720         
                      04721         ; check if con is started
0CEB   3023           04722         movlw   high(ram_status)        ;  bit 7 0 = dead, bit 6 0 = uber on, bit 5 0 = quest done, bit 
                            4 0 = quest start, bit 3 = 0 has egg, bit 2 = 0 is cured, bit 1 = 0 has pink eye, bit 0 = 0 con 
0CEC   0087           04723         movwf   FSR1H
0CED   3070           04724         movlw   low(ram_status)
0CEE   0086           04725         movwf   FSR1L   
0CEF   0801           04726         movf    INDF1, W
0CF0   3901           04727         andlw   0x01                            ; con started?
0CF1   1D03           04728         btfss   STATUS, Z
0CF2   2???           04729         goto    MAINLOOP2_DEEP_SLEEP
                      04730         ; check if badge is dead        
0CF3   0801           04731         movf    INDF1, W
0CF4   3980           04732         andlw   0x80                            ; is badge dead
0CF5   1903           04733         btfsc   STATUS, Z
0CF6   2???           04734         goto    MAINLOOP2_return_2_MAINLOOP
                      04735         ;------------------------------------------------------------------------
                      04736         ; stuff here that is only valid when not dead and con start (most things)
                      04737         ;------------------------------------------------------------------------       
                      04738 
                      04739         
                      04740         ; change mode when timer expires
0CF7   0829           04741         movf    delay_downH, W
0CF8   1D03           04742         btfss   STATUS, Z
0CF9   2???           04743         goto    MAINLOOP2_no_mode_shift 
0CFA   082A           04744         movf    delay_downL, W
0CFB   1D03           04745         btfss   STATUS, Z
0CFC   2???           04746         goto    MAINLOOP2_no_mode_shift 
0CFD                  04747 MAINLOOP2_mode_shift
0CFD   082C           04748         movf    badge_status, W
0CFE   3903           04749         andlw   0x03
0CFF   3A03           04750         xorlw   0x03
0D00   1D03           04751         btfss   STATUS, Z
0D01   2???           04752         goto    MAINLOOP2_shift_sleep
0D02   102C           04753         bcf             badge_status, 0                 ; move from hyper to active..
0D03   3058           04754         movlw   low(active_to_sleep)
0D04   00AA           04755         movwf   delay_downL
0D05   3002           04756         movlw   high(active_to_sleep)
0D06   00A9           04757         movwf   delay_downH     
                      04758         ; update the eye animation 
0D07   3004           04759         movlw   0x04                                    ; set to normal animation
0D08   2???           04760         call    _2_set_oLED_mode                
0D09   2???           04761         goto    MAINLOOP2_no_mode_shift
0D0A                  04762 MAINLOOP2_shift_sleep   
0D0A   082C           04763         movf    badge_status, W
0D0B   3903           04764         andlw   0x03
0D0C   3A02           04765         xorlw   0x02
0D0D   1D03           04766         btfss   STATUS, Z
0D0E   2???           04767         goto    MAINLOOP2_no_mode_shift
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 95


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0D0F   10AC           04768         bcf             badge_status, 1                 ; move from active to sleep
0D10   142C           04769         bsf             badge_status, 0                 ; move from active to sleep
                      04770         ; indicate that this needs to be saved on next mainloop (sleep only happens every 15 min and goo
                            d op to save counters). 
0D11   1471           04771         bsf             g_flags, 0              
                      04772         ; no downshift timer here
                      04773         ; update the eye animation 
0D12   3006           04774         movlw   0x06                                    ; set to sleep animation
0D13   2???           04775         call    _2_set_oLED_mode                
0D14                  04776 MAINLOOP2_no_mode_shift 
                      04777         
                      04778         ; check food consumption
0D14   083D           04779         movf    game_tick, W
0D15   1D03           04780         btfss   STATUS, Z
0D16   2???           04781         goto    MAINLOOP2_no_tick
                      04782         ; check if sleeping (con start and dead check is above)
0D17   082C           04783         movf    badge_status, W         ; bit 0,1 = 0 dead, 1 sleep, 2 active, 3 hyper; bit 2 = egg led 
                            state; bit 3 = stomach led state; bit 4 = amber dir; bit 5 = red dir; bit 6 = green dir; bit 7 =
0D18   3903           04784         andlw   0x03
0D19   3A01           04785         xorlw   0x01
0D1A   1903           04786         btfsc   STATUS, Z
0D1B   2???           04787         goto    MAINLOOP2_no_tick
                      04788         ; reload game_tick
0D1C   302D           04789         movlw   game_tick_time
0D1D   00BD           04790         movwf   game_tick
                      04791         ; check for the sickness
0D1E   3023           04792         movlw   high(ram_status)        ;  bit 7 0 = dead, bit 6 0 = uber on, bit 5 0 = quest done, bit 
                            4 0 = quest start, bit 3 = 0 has egg, bit 2 = 0 is cured, bit 1 = 0 has pink eye, bit 0 = 0 con 
0D1F   0087           04793         movwf   FSR1H
0D20   3070           04794         movlw   low(ram_status)
0D21   0086           04795         movwf   FSR1L   
0D22   1881           04796         btfsc   INDF1, 1
0D23   2???           04797         goto    MAINLOOP2_not_sick
0D24   1D01           04798         btfss   INDF1, 2
0D25   2???           04799         goto    MAINLOOP2_not_sick
                      04800         ; this badge is sick use the higher food rates
                      04801         ; check for hyper
0D26   082C           04802         movf    badge_status, W
0D27   3903           04803         andlw   0x03
0D28   3A03           04804         xorlw   0x03
0D29   1D03           04805         btfss   STATUS, Z
0D2A   2???           04806         goto    MAINLOOP2_active_sick
                      04807         ; update food counter (subtract value and die if 0)
0D2B   3006           04808         movlw   food_hyper_sick
0D2C   02BB           04809         subwf   food_cnt, F                     ; f - W, C = 0 if W > f, C = 1 if W <= f        
0D2D   1C03           04810         btfss   STATUS, C
0D2E   2???           04811         goto    MAINLOOP2_die
                      04812         ; update poo countere (add 1 for every used up to 0xFF)
0D2F   3006           04813         movlw   food_hyper_sick
0D30   07C0           04814         addwf   poo_temp, F                     
                      04815 ;       btfss   STATUS, C
0D31   2???           04816         goto    MAINLOOP2_poop_chk
                      04817 ;       movlw   0xFF
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 96


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      04818 ;       movwf   poo_cnt         
                      04819 ;       goto    MAINLOOP2_no_tick
0D32                  04820 MAINLOOP2_active_sick   
                      04821         ; update food counter (subtract value and die if 0)
0D32   3002           04822         movlw   food_active_sick
0D33   02BB           04823         subwf   food_cnt, F                     ; f - W, C = 0 if W > f, C = 1 if W <= f        
0D34   1C03           04824         btfss   STATUS, C
0D35   2???           04825         goto    MAINLOOP2_die
                      04826         ; update poo countere (add 1 for every used up to 0xFF)
0D36   3002           04827         movlw   food_active_sick
0D37   07C0           04828         addwf   poo_temp, F                     
                      04829 ;       btfss   STATUS, C
0D38   2???           04830         goto    MAINLOOP2_poop_chk
                      04831 ;       movlw   0xFF
                      04832 ;       movwf   poo_cnt 
                      04833 ;       goto    MAINLOOP2_no_tick
0D39                  04834 MAINLOOP2_not_sick      
                      04835         ; check for hyper
0D39   082C           04836         movf    badge_status, W
0D3A   3903           04837         andlw   0x03
0D3B   3A03           04838         xorlw   0x03
0D3C   1D03           04839         btfss   STATUS, Z
0D3D   2???           04840         goto    MAINLOOP2_active
                      04841         ; update food counter (subtract value and die if 0)
0D3E   3004           04842         movlw   food_hyper
0D3F   02BB           04843         subwf   food_cnt, F                     ; f - W, C = 0 if W > f, C = 1 if W <= f        
0D40   1C03           04844         btfss   STATUS, C
0D41   2???           04845         goto    MAINLOOP2_die
                      04846         ; update poo countere (add 1 for every used up to 0xFF)
0D42   3004           04847         movlw   food_hyper
0D43   07C0           04848         addwf   poo_temp, F                     
                      04849 ;       btfss   STATUS, C
0D44   2???           04850         goto    MAINLOOP2_poop_chk
                      04851 ;       movlw   0xFF
                      04852 ;       movwf   poo_cnt         
                      04853 ;       goto    MAINLOOP2_no_tick
0D45                  04854 MAINLOOP2_active        
                      04855         ; update food counter (subtract value and die if 0)
0D45   3001           04856         movlw   food_active
0D46   02BB           04857         subwf   food_cnt, F                     ; f - W, C = 0 if W > f, C = 1 if W <= f        
0D47   1C03           04858         btfss   STATUS, C
0D48   2???           04859         goto    MAINLOOP2_die
                      04860         ; update poo countere (add 1 for every used up to 0xFF)
0D49   3001           04861         movlw   food_active
0D4A   07C0           04862         addwf   poo_temp, F                     
                      04863 ;       btfss   STATUS, C
0D4B   2???           04864         goto    MAINLOOP2_poop_chk
                      04865 ;       movlw   0xFF
                      04866 ;       movwf   poo_cnt 
                      04867 ;       goto    MAINLOOP2_no_tick
0D4C                  04868 MAINLOOP2_die
                      04869         ; check if badge is undead (founder, lifetime, vendor)
0D4C   1AF1           04870         btfsc   g_flags, 5                      ; bit 0 = update flash, bit 1 = force stomach off, bit 2
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 97


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                             = force poo off, bit 3 = enable TX delay, bit 4 = Hyron badge ID set, bit 5 = undead
0D4D   2???           04871         goto    MAINLOOP2_poop_chk
0D4E   01BB           04872         clrf    food_cnt                        ; when food runs out it will loop around to FF and keep 
                            going lower. Set back to 0 to keep the debug easy. (note 0 food is ok -1 food kills ya)
                      04873         ; update death bit
0D4F   3023           04874         movlw   high(ram_status)        ;  bit 7 0 = dead, bit 6 0 = uber on, bit 5 0 = quest done, bit 
                            4 0 = quest start, bit 3 = 0 has egg, bit 2 = 0 is cured, bit 1 = 0 has pink eye, bit 0 = 0 con 
0D50   0087           04875         movwf   FSR1H
0D51   3070           04876         movlw   low(ram_status)
0D52   0086           04877         movwf   FSR1L   
0D53   1381           04878         bcf             INDF1, 7                        ; set dead bit (inverted)
                      04879         ; turn off heart 
0D54   301E           04880         movlw   D'30'                       ; address byte
0D55   00A2           04881         movwf   i2c_off                     ; address byte
0D56   3000           04882         movlw   0x00                            
0D57   00A3           04883         movwf   i2c_dat0                    
0D58   2???           04884         call    _2_LED_WRITE_2
                      04885         ; turn off stomach
0D59   301F           04886         movlw   D'31'                       ; address byte
0D5A   00A2           04887         movwf   i2c_off                     ; address byte
0D5B   3000           04888         movlw   0x00                            
0D5C   00A3           04889         movwf   i2c_dat0                    
0D5D   2???           04890         call    _2_LED_WRITE_2
0D5E   2???           04891         call    _2_LED_SET_2                    ; update the leds to the new state      
                      04892         ; turn off poo
0D5F   301C           04893         movlw   D'28'                       ; address byte
0D60   00A2           04894         movwf   i2c_off                     ; address byte
0D61   3000           04895         movlw   0x00                            
0D62   00A3           04896         movwf   i2c_dat0                    
0D63   2???           04897         call    _2_LED_WRITE_1
0D64   2???           04898         call    _2_LED_SET_1                    ; update the leds to the new state      
                      04899         ; update badge status
0D65   102C           04900         bcf             badge_status, 0         ; bit 0,1 = 0 dead, 1 sleep, 2 active, 3 hyper; bit 2 = 
                            egg led state; bit 3 = stomach led state; bit 4 = amber dir; bit 5 = red dir; bit 6 = green dir;
0D66   10AC           04901         bcf             badge_status, 1         ; bit 0,1 = 0 dead, 1 sleep, 2 active, 3 hyper; bit 2 = 
                            egg led state; bit 3 = stomach led state; bit 4 = amber dir; bit 5 = red dir; bit 6 = green dir;
                      04902         ; update the death counter
0D67   3023           04903         movlw   high(ram_died)  
0D68   0085           04904         movwf   FSR0H
0D69   3086           04905         movlw   low(ram_died)
0D6A   0084           04906         movwf   FSR0L           
0D6B   2???           04907         call    _2_2BYTE_DEC_N_STOP     
                      04908         ; indicate that this needs to be saved on next mainloop. 
0D6C   1471           04909         bsf             g_flags, 0      
                      04910         ; update the eye animation 
0D6D   3008           04911         movlw   0x08                                    ; set to dead animation
0D6E   2???           04912         call    _2_set_oLED_mode
                      04913         
                      04914         
                      04915         
0D6F                  04916 MAINLOOP2_poop_chk
                      04917         ; check if there are enough temp poop points
0D6F   3003           04918         movlw   food2poop
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 98


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0D70   0240           04919         subwf   poo_temp, W                     ; f - W, C = 0 if W > f, C = 1 if W <= f
0D71   1C03           04920         btfss   STATUS, C
0D72   2???           04921         goto    MAINLOOP2_no_tick
0D73   3003           04922         movlw   food2poop
0D74   02C0           04923         subwf   poo_temp, F                     ; f - W, C = 0 if W > f, C = 1 if W <= f
0D75   3001           04924         movlw   0x01
0D76   07BC           04925         addwf   poo_cnt, F                      
0D77   1C03           04926         btfss   STATUS, C
0D78   2???           04927         goto    MAINLOOP2_poop_chk
0D79   30FF           04928         movlw   0xFF
0D7A   00BC           04929         movwf   poo_cnt 
0D7B   2???           04930         goto    MAINLOOP2_poop_chk
0D7C                  04931 MAINLOOP2_no_tick               
                      04932         
                      04933         ; debbounce button
0D7C   083A           04934         movf    button_up, W
0D7D   1903           04935         btfsc   STATUS, Z
0D7E   2???           04936         goto    mainloop_button_chk             ; if debounce count is zero go check for a button press
0D7F   03BA           04937         decf    button_up, F                    ; subtract one from counter
0D80   198C           04938         btfsc   PORTA, 3                                ; social button
0D81   2???           04939         goto    mainloop_button_chk_done
0D82   3040           04940         movlw   0x40                                    ; this debounce time is in 2 spots!
0D83   00BA           04941         movwf   button_up                               ; if button detected low during debounce reset t
                            he timer (maybe held down)
0D84   2???           04942         goto    mainloop_button_chk_done
                      04943         
0D85                  04944 mainloop_button_chk             
                      04945         ; check for button press 
0D85   198C           04946         btfsc   PORTA, 3                                ; social button
0D86   2???           04947         goto    mainloop_button_chk_done
                      04948         ; set up for debounce
0D87   3040           04949         movlw   0x40                                    ; this debounce time is in 2 spots!
0D88   00BA           04950         movwf   button_up
                      04951         ;move mode to hyper and set up timer to down shift to active
0D89   3003           04952         movlw   0x03                            ; hyper mode
0D8A   04AC           04953         iorwf   badge_status, F
0D8B   302C           04954         movlw   low(hyper_to_active)
0D8C   00AA           04955         movwf   delay_downL
0D8D   3001           04956         movlw   high(hyper_to_active)
0D8E   00A9           04957         movwf   delay_downH
                      04958         
                      04959         ; update button click counter
0D8F   3023           04960         movlw   high(ram_button)        
0D90   0085           04961         movwf   FSR0H
0D91   3077           04962         movlw   low(ram_button)
0D92   0084           04963         movwf   FSR0L   
0D93   3001           04964         movlw   0x01
0D94   2???           04965         call    _2_3BYTE_SUB_N_STOP     
                      04966 
                      04967                 
                      04968         ; update the eye animation 
0D95   3002           04969         movlw   0x02                                    ; set to hyper animation
0D96   2???           04970         call    _2_set_oLED_mode        
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 99


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0D97   3002           04971         movlw   0x02                                    ; set to hyper animation
0D98   00CA           04972         movwf   oLED_last                               ; save the previous setting
0D99   300A           04973         movlw   0x0A                                    ; set to eye beam animation
0D9A   2???           04974         call    _2_set_oLED_mode_one_shot       
                      04975         
                      04976         
                      04977         ;------------------
0D9B   014E           04978         movlb   d'14'
                      04979         ;------------------     
0D9C   1A19           04980         btfsc   PIE3, TX1IE                             ; make sure TX routine is NOT already running. 
0D9D   2???           04981         goto    mainloop_button_chk_done
                      04982         ;------------------
0D9E   0142           04983         movlb   d'2'
                      04984         ;------------------     
0D9F   01A7           04985         clrf    ir_tx_seq
0DA0   01A8           04986         clrf    ir_tx_chksum
                      04987         ; status updated other places just flow it here
0DA1   01AA           04988         clrf    tx_type
                      04989                 
                      04990         ;------------------
0DA2   014E           04991         movlb   d'14'
                      04992         ;------------------     
0DA3   1619           04993         bsf     PIE3, TX1IE                             ; enable Uart2 transmit IRQ             
                      04994                 
0DA4                  04995 mainloop_button_chk_done
                      04996         ;------------------
0DA4   0140           04997         movlb   d'0'
                      04998         ;------------------             
                      04999 
0DA5                  05000 MAINLOOP2_return_2_MAINLOOP
0DA5   3180           05001         movlp   0x00                                    ; select page 1
0DA6   2???           05002         goto    MAINLOOP
                      05003         
                      05004         
                      05005         
                      05006         
                      05007         
                      05008         
                      05009         
0DA7                  05010 MAINLOOP2_DEEP_SLEEP
                      05011         
                      05012         ; debbounce button
0DA7   083A           05013         movf    button_up, W
0DA8   1903           05014         btfsc   STATUS, Z
0DA9   2???           05015         goto    deepsleep_button_chk    ; if debounce count is zero go check for a button press
0DAA   03BA           05016         decf    button_up, F                    ; subtract one from counter
0DAB   198C           05017         btfsc   PORTA, 3                                ; social button
0DAC   2???           05018         goto    deepsleep_button_chk_done
0DAD   3040           05019         movlw   0x40                                    ; this debounce time is in 2 spots!
0DAE   00BA           05020         movwf   button_up                               ; if button detected low during debounce reset t
                            he timer (maybe held down)
0DAF   2???           05021         goto    deepsleep_button_chk_done
                      05022         
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 100


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0DB0                  05023 deepsleep_button_chk            
                      05024         ; check for button press 
0DB0   198C           05025         btfsc   PORTA, 3                                ; social button
0DB1   2???           05026         goto    deepsleep_button_chk_done
                      05027         ; set up for debounce
0DB2   3040           05028         movlw   0x40                                    ; this debounce time is in 2 spots!
0DB3   00BA           05029         movwf   button_up
                      05030         ;set one shot wake animation here
0DB4   1449           05031         bsf             oLED_ctrl, 0                    ; bit 0 = one shot start, 1 = one shot done
0DB5   01CA           05032         clrf    oLED_last                               ; set last animation to precon. 
0DB6   3001           05033         movlw   0x01                                    ; sleep lazy eye
0DB7   00C3           05034         movwf   oLED_set                                ; new set to move to 
0DB8   01C5           05035         clrf    oLED_seq_cnt
                      05036         
0DB9                  05037 deepsleep_button_chk_done       
0DB9   3180           05038         movlp   0x00                                    ; select page 1
0DBA   2???           05039         goto    MAINLOOP
                      05040         
                      05041         
                      05042         
                      05043         
                      05044 
                      05045         
                      05046 
                      05047         
                      05048         
                      05049         
                      05050         
                      05051         
                      05052         
                      05053 ;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                      05054 ; FLASH goto / call break here need to update the counter manually to jump back and forth from here.... 
                      05055 ;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%      
                      05056 ;put the following at address 1000h
                      05057         org     1000h           
                      05058 
                      05059 ;################################################################################
                      05060 ; cycle the LFSR (sudo random) generator and return the new lower 8 result in W
                      05061 ;################################################################################
1000                  05062 _3_CYCLE_LFSR
1000   3188           05063         movlp   0x08
1001   2???           05064         call    _2_CYCLE_LFSR
1002   3190           05065         movlp   0x10
1003   0008           05066         return  
                      05067         
                      05068 
                      05069         
1004                  05070 DECRYPT_PACKET
                      05071         
                      05072         ;------------------
1004   0142           05073         movlb   d'2'
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 101


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05074         ;------------------
                      05075         
                      05076         ; ram buffer is twisted (first in is last byte) fix this        
1005   3023           05077         movlw   high(start_rx_buffer)   
1006   0087           05078         movwf   FSR1H
1007   3020           05079         movlw   low(start_rx_buffer)
1008   0086           05080         movwf   FSR1L
1009   3009           05081         movlw   0x09
100A   0786           05082         addwf   FSR1L, F
100B   3001           05083         movlw   high(temp_crypt0)
100C   0085           05084         movwf   FSR0H
100D   3050           05085         movlw   low(temp_crypt0)
100E   0084           05086         movwf   FSR0L   
100F   300A           05087         movlw   0x0A
1010   00B3           05088         movwf   loop_i
1011                  05089 DECRYPT_PACKET_swap_packet      
1011   0017           05090         moviw   FSR1--
1012   001A           05091         movwi   FSR0++
1013   0BB3           05092         decfsz  loop_i, F
1014   2???           05093         goto    DECRYPT_PACKET_swap_packet      
                      05094         
                      05095         ; copy decrypt key to ram
1015   309F           05096         movlw   high(start_key)
1016   0085           05097         movwf   FSR0H
1017   3070           05098         movlw   low(start_key)
1018   0084           05099         movwf   FSR0L
1019   3001           05100         movlw   high(temp_key0)
101A   0087           05101         movwf   FSR1H
101B   3040           05102         movlw   low(temp_key0)
101C   0086           05103         movwf   FSR1L
101D   300A           05104         movlw   0x0A
101E   00B3           05105         movwf   loop_i
101F                  05106 DECRYPT_PACKET_key_move_loop
101F   0012           05107         moviw   FSR0++
1020   001E           05108         movwi   FSR1++
1021   0BB3           05109         decfsz  loop_i, F
1022   2???           05110         goto    DECRYPT_PACKET_key_move_loop
                      05111 
                      05112         
                      05113         ; cycle key
                      05114         ;for ($i = 0; $i < $rounds; $i++){
1023   01B3           05115         clrf    loop_i
1024                  05116 DECRYPT_PACKET_cycle_key_i
                      05117         
                      05118         ;$k0 = $temp_key[0 + $wbytes];
1024   3001           05119         movlw   high(temp_key0)
1025   0087           05120         movwf   FSR1H
1026   3040           05121         movlw   low(temp_key0)
1027   3E05           05122         addlw   crypto_wbytes
1028   0086           05123         movwf   FSR1L   
1029   0801           05124         movf    INDF1, W
102A   00B4           05125         movwf   k0
                      05126         
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 102


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05127         ;$ak = 0;
102B   01B8           05128         clrf    ak
                      05129         
                      05130         ;for ($j = 0; $j < $wbytes-1; $j++) {
102C   01B5           05131         clrf    loop_j
102D                  05132 DECRYPT_PACKET_cycle_key_j
                      05133         
                      05134         ;$ak += $temp_key[$j] + $temp_key[$j + 1 + $wbytes];
102D   01B9           05135         clrf    ak1
102E   30F0           05136         movlw   0xF0
102F   0586           05137         andwf   FSR1L, F
1030   0835           05138         movf    loop_j, W
1031   0786           05139         addwf   FSR1L, F
1032   0801           05140         movf    INDF1, W
1033   07B8           05141         addwf   ak, F
1034   1803           05142         btfsc   STATUS, C
1035   0AB9           05143         incf    ak1, F
1036   3006           05144         movlw   (crypto_wbytes + 1)
1037   0786           05145         addwf   FSR1, F
1038   0017           05146         moviw   FSR1--
1039   07B8           05147         addwf   ak, F
103A   1803           05148         btfsc   STATUS, C
103B   0AB9           05149         incf    ak1, F
                      05150         
                      05151         ;$temp_key[$j + $wbytes] = ($ak) & 0xFF;
                      05152         ;decf   FSR1L, F taken care of by above moviw --
103C   0838           05153         movf    ak, W
103D   0081           05154         movwf   INDF1
                      05155         
                      05156         ;$ak = $ak >> 8;
103E   0839           05157         movf    ak1, W
103F   00B8           05158         movwf   ak
1040   0AB5           05159         incf    loop_j, F
1041   0835           05160         movf    loop_j, W
1042   3A04           05161         xorlw   (crypto_wbytes - 1)
1043   1D03           05162         btfss   STATUS, Z
1044   2???           05163         goto    DECRYPT_PACKET_cycle_key_j      
                      05164                 
                      05165         ;$ak += $temp_key[$wbytes - 1] + $k0;
1045   30F0           05166         movlw   0xF0
1046   0586           05167         andwf   FSR1L, F
1047   3004           05168         movlw   (crypto_wbytes - 1)
1048   0786           05169         addwf   FSR1L, F
1049   0801           05170         movf    INDF1, W
104A   07B8           05171         addwf   ak, F
104B   0834           05172         movf    k0, W
104C   07B8           05173         addwf   ak, F
                      05174         
                      05175         ;$temp_key[$wbytes - 1 + $wbytes] = $ak & 0xFF;
104D   3005           05176         movlw   crypto_wbytes
104E   0786           05177         addwf   FSR1L, F
104F   0838           05178         movf    ak, W
1050   0081           05179         movwf   INDF1
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 103


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05180                 
                      05181         ;$temp_key[$wbytes] = ($temp_key[$wbytes] ^ $i) & 0xFF;
1051   30F0           05182         movlw   0xF0
1052   0586           05183         andwf   FSR1L, F
1053   3005           05184         movlw   crypto_wbytes
1054   0786           05185         addwf   FSR1L, F
1055   0833           05186         movf    loop_i, W
1056   0681           05187         xorwf   INDF1, F
                      05188         
                      05189         ;$k0 = $temp_key[$wbytes - 1];
1057   0015           05190         moviw   --FSR1
1058   00B4           05191         movwf   k0      
                      05192         
                      05193         ;for ($j = $wbytes-1; $j > 0; $j--) {
1059   3004           05194         movlw   (crypto_wbytes - 1)
105A   00B5           05195         movwf   loop_j
105B                  05196 DECRYPT_PACKET_cycle_key_j2
                      05197         
                      05198         ; $temp_key[$j] = ((($temp_key[$j] << 3) | ($temp_key[$j - 1] >> 5)) ^ $temp_key[$j + $wbytes]) 
                            & 0xFF;
105B   30F0           05199         movlw   0xF0
105C   0586           05200         andwf   FSR1L, F
105D   0835           05201         movf    loop_j, W
105E   0786           05202         addwf   FSR1L, F
105F   1003           05203         bcf             STATUS, C
1060   0D81           05204         rlf             INDF1, F
1061   1003           05205         bcf             STATUS, C
1062   0D81           05206         rlf             INDF1, F
1063   1003           05207         bcf             STATUS, C
1064   0D81           05208         rlf             INDF1, F
1065   0386           05209         decf    FSR1L, F
1066   0016           05210         moviw   FSR1++
1067   00B8           05211         movwf   ak
1068   3005           05212         movlw   0x05
1069   00B6           05213         movwf   crypt_cnt
106A                  05214 DECRYPT_PACKET_cycle_key_shift
106A   1003           05215         bcf     STATUS, C
106B   0CB8           05216         rrf     ak, F
106C   0BB6           05217         decfsz  crypt_cnt, F
106D   2???           05218         goto    DECRYPT_PACKET_cycle_key_shift
106E   0838           05219         movf    ak, W
106F   0481           05220         iorwf   INDF1, F
1070   3005           05221         movlw   crypto_wbytes
1071   0786           05222         addwf   FSR1L, F
1072   0801           05223         movf    INDF1, W
1073   00B8           05224         movwf   ak
1074   3005           05225         movlw   crypto_wbytes
1075   0286           05226         subwf   FSR1L, F
1076   0838           05227         movf    ak, W
1077   0681           05228         xorwf   INDF1, F
1078   0BB5           05229         decfsz  loop_j, F
1079   2???           05230         goto    DECRYPT_PACKET_cycle_key_j2     
                      05231         
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 104


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05232         ; $temp_key[0] = ((($temp_key[0] << 3) | ($k0 >> 5)) ^ $temp_key[0 + $wbytes]) & 0xFF
107A   30F0           05233         movlw   0xF0
107B   0586           05234         andwf   FSR1L, F
107C   1003           05235         bcf             STATUS, C
107D   0D81           05236         rlf             INDF1, F
107E   1003           05237         bcf             STATUS, C
107F   0D81           05238         rlf             INDF1, F
1080   1003           05239         bcf             STATUS, C
1081   0D81           05240         rlf             INDF1, F
1082   3005           05241         movlw   0x05
1083   00B6           05242         movwf   crypt_cnt
1084                  05243 DECRYPT_PACKET_cycle_key_shift2
1084   1003           05244         bcf             STATUS, C
1085   0CB4           05245         rrf             k0, F
1086   0BB6           05246         decfsz  crypt_cnt, F
1087   2???           05247         goto    DECRYPT_PACKET_cycle_key_shift2
1088   0834           05248         movf    k0, W
1089   0481           05249         iorwf   INDF1, F        
108A   3005           05250         movlw   crypto_wbytes
108B   0786           05251         addwf   FSR1L, F
108C   0801           05252         movf    INDF1, W
108D   00B8           05253         movwf   ak
108E   30F0           05254         movlw   0xF0
108F   0586           05255         andwf   FSR1L, F
1090   0838           05256         movf    ak, W
1091   0681           05257         xorwf   INDF1, F        
1092   0AB3           05258         incf    loop_i, F
1093   0833           05259         movf    loop_i, W
1094   3A1A           05260         xorlw   crypto_rounds
1095   1D03           05261         btfss   STATUS, Z
1096   2???           05262         goto    DECRYPT_PACKET_cycle_key_i
                      05263         
                      05264 
                      05265         ; -------------------- start decrypt ------------------------------
                      05266         ;for ($i = $rounds - 1; $i >= 0; $i--){
1097   3019           05267         movlw   (crypto_rounds - 1)
1098   00B3           05268         movwf   loop_i
1099                  05269 DECRYPT_PACKET_decrypt_i
1099   3001           05270         movlw   high(temp_crypt0)
109A   0085           05271         movwf   FSR0H
109B   3050           05272         movlw   low(temp_crypt0)
109C   0084           05273         movwf   FSR0L   
                      05274 
                      05275         
                      05276         ;for($j = 0; $j < $wbytes; $j++){
109D   01B5           05277         clrf    loop_j
109E                  05278 DECRYPT_PACKET_decrypt_j        
                      05279         
                      05280         ;$temp_key[$j] = $temp_key[$j] ^ $temp_key[$j + $wbytes];
109E   30F0           05281         movlw   0xF0
109F   0586           05282         andwf   FSR1L, F
10A0   0835           05283         movf    loop_j, W
10A1   3E05           05284         addlw   crypto_wbytes
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 105


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

10A2   0786           05285         addwf   FSR1L, F
10A3   0801           05286         movf    INDF1, W
10A4   00B8           05287         movwf   ak
10A5   3005           05288         movlw   crypto_wbytes
10A6   0286           05289         subwf   FSR1L, F                        ; F - W, W>F c=0, W<=F c=1 
10A7   0838           05290         movf    ak, W
10A8   0681           05291         xorwf   INDF1, F
                      05292 
                      05293         ;$crypt[$j] = $crypt[$j] ^ $crypt[$j + $wbytes];
10A9   30F0           05294         movlw   0xF0
10AA   0584           05295         andwf   FSR0L, F
10AB   0835           05296         movf    loop_j, W
10AC   3E05           05297         addlw   crypto_wbytes
10AD   0784           05298         addwf   FSR0L, F
10AE   0800           05299         movf    INDF0, W
10AF   00BC           05300         movwf   ac
10B0   3005           05301         movlw   crypto_wbytes
10B1   0284           05302         subwf   FSR0L, F                        ; F - W, W>F c=0, W<=F c=1 
10B2   083C           05303         movf    ac, W
10B3   0680           05304         xorwf   INDF0, F
10B4   0AB5           05305         incf    loop_j, F
10B5   0835           05306         movf    loop_j, W
10B6   3A05           05307         xorlw   crypto_wbytes
10B7   1D03           05308         btfss   STATUS, Z
10B8   2???           05309         goto    DECRYPT_PACKET_decrypt_j        
                      05310         
                      05311         ;$k0 = $temp_key[0];
10B9   30F0           05312         movlw   0xF0
10BA   0586           05313         andwf   FSR1L, F
10BB   0801           05314         movf    INDF1, W
10BC   00B4           05315         movwf   k0
                      05316         
                      05317         ;$c0 = $crypt[0];
10BD   30F0           05318         movlw   0xF0
10BE   0584           05319         andwf   FSR0L, F
10BF   0800           05320         movf    INDF0, W
10C0   00B7           05321         movwf   c0
                      05322         
                      05323         ;for($j = 0; $j < $wbytes - 1; $j++) {
10C1   01B5           05324         clrf    loop_j
10C2                  05325 DECRYPT_PACKET_decrypt_j2
                      05326         
                      05327         ;$temp_key[$j] = ((($temp_key[$j] >> 3) | ($temp_key[$j + 1] << 5))) & 0xFF;
10C2   30F0           05328         movlw   0xF0
10C3   0586           05329         andwf   FSR1L, F
10C4   0835           05330         movf    loop_j, W
10C5   0786           05331         addwf   FSR1L, F
10C6   1003           05332         bcf             STATUS, C
10C7   0C81           05333         rrf             INDF1, F
10C8   1003           05334         bcf             STATUS, C
10C9   0C81           05335         rrf             INDF1, F
10CA   1003           05336         bcf             STATUS, C
10CB   0C81           05337         rrf             INDF1, F
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 106


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

10CC   0A86           05338         incf    FSR1L, F
10CD   0017           05339         moviw   FSR1--
10CE   00B8           05340         movwf   ak
10CF   3005           05341         movlw   0x05
10D0   00B6           05342         movwf   crypt_cnt
10D1                  05343 DECRYPT_PACKET_decrypt_shift
10D1   1003           05344         bcf             STATUS, C
10D2   0DB8           05345         rlf             ak, F
10D3   0BB6           05346         decfsz  crypt_cnt, F
10D4   2???           05347         goto    DECRYPT_PACKET_decrypt_shift
10D5   0838           05348         movf    ak, W
10D6   0481           05349         iorwf   INDF1, F
                      05350         
                      05351         ;$crypt[$j] = ((($crypt[$j] >> 3) | ($crypt[$j + 1] << 5))) & 0xFF;
10D7   30F0           05352         movlw   0xF0
10D8   0584           05353         andwf   FSR0L, F
10D9   0835           05354         movf    loop_j, W
10DA   0784           05355         addwf   FSR0L, F
10DB   1003           05356         bcf             STATUS, C
10DC   0C80           05357         rrf             INDF0, F
10DD   1003           05358         bcf             STATUS, C
10DE   0C80           05359         rrf             INDF0, F
10DF   1003           05360         bcf             STATUS, C
10E0   0C80           05361         rrf             INDF0, F
10E1   0A84           05362         incf    FSR0L, F
10E2   0013           05363         moviw   FSR0--
10E3   00B8           05364         movwf   ak
10E4   3005           05365         movlw   0x05
10E5   00B6           05366         movwf   crypt_cnt
10E6                  05367 DECRYPT_PACKET_decrypt_shift2
10E6   1003           05368         bcf             STATUS, C
10E7   0DB8           05369         rlf             ak, F
10E8   0BB6           05370         decfsz  crypt_cnt, F
10E9   2???           05371         goto    DECRYPT_PACKET_decrypt_shift2
10EA   0838           05372         movf    ak, W
10EB   0480           05373         iorwf   INDF0, F
10EC   0AB5           05374         incf    loop_j, F
10ED   0835           05375         movf    loop_j, W
10EE   3A04           05376         xorlw   (crypto_wbytes - 1)
10EF   1D03           05377         btfss   STATUS, Z
10F0   2???           05378         goto    DECRYPT_PACKET_decrypt_j2
                      05379         
                      05380         ;$temp_key[$wbytes - 1] = ((($temp_key[$wbytes - 1] >> 3) | ($k0 << 5))) & 0xFF;
10F1   30F0           05381         movlw   0xF0
10F2   0586           05382         andwf   FSR1L, F
10F3   3005           05383         movlw   crypto_wbytes
10F4   0786           05384         addwf   FSR1L, F
10F5   0386           05385         decf    FSR1L, F
10F6   1003           05386         bcf             STATUS, C
10F7   0C81           05387         rrf             INDF1, F
10F8   1003           05388         bcf             STATUS, C
10F9   0C81           05389         rrf             INDF1, F
10FA   1003           05390         bcf             STATUS, C
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 107


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

10FB   0C81           05391         rrf             INDF1, F
10FC   3005           05392         movlw   0x05
10FD   00B6           05393         movwf   crypt_cnt
10FE                  05394 DECRYPT_PACKET_decrypt_shift3
10FE   1003           05395         bcf             STATUS, C
10FF   0DB4           05396         rlf             k0, F
1100   0BB6           05397         decfsz  crypt_cnt, F
1101   2???           05398         goto    DECRYPT_PACKET_decrypt_shift3
1102   0834           05399         movf    k0, W
1103   0481           05400         iorwf   INDF1, F        
                      05401         
                      05402         ;$crypt[$wbytes - 1] = ((($crypt[$wbytes - 1] >> 3) | ($c0 << 5))) & 0xFF;
1104   30F0           05403         movlw   0xF0
1105   0584           05404         andwf   FSR0L, F
1106   3005           05405         movlw   crypto_wbytes
1107   0784           05406         addwf   FSR0L, F
1108   0384           05407         decf    FSR0L, F
1109   1003           05408         bcf             STATUS, C
110A   0C80           05409         rrf             INDF0, F
110B   1003           05410         bcf             STATUS, C
110C   0C80           05411         rrf             INDF0, F
110D   1003           05412         bcf             STATUS, C
110E   0C80           05413         rrf             INDF0, F
110F   3005           05414         movlw   0x05
1110   00B6           05415         movwf   crypt_cnt
1111                  05416 DECRYPT_PACKET_decrypt_shift4
1111   1003           05417         bcf             STATUS, C
1112   0DB7           05418         rlf             c0, F
1113   0BB6           05419         decfsz  crypt_cnt, F
1114   2???           05420         goto    DECRYPT_PACKET_decrypt_shift4
1115   0837           05421         movf    c0, W
1116   0480           05422         iorwf   INDF0, F        
                      05423         
                      05424         ;$temp_key[0 + $wbytes] = ($temp_key[0 + $wbytes] ^ $i) & 0xFF;
1117   30F0           05425         movlw   0xF0
1118   0586           05426         andwf   FSR1L, F
1119   3005           05427         movlw   crypto_wbytes
111A   0786           05428         addwf   FSR1L, F
111B   0833           05429         movf    loop_i, W
111C   0681           05430         xorwf   INDF1, F
                      05431         
                      05432         ;for($j = 0; $j < $wbytes; $j++) {
111D   01B5           05433         clrf    loop_j
111E                  05434 DECRYPT_PACKET_decrypt_j3
                      05435         
                      05436         ;$crypt[$j + $wbytes] = ($crypt[$j + $wbytes] ^ $temp_key[$j]) & 0xFF;
111E   30F0           05437         movlw   0xF0
111F   0584           05438         andwf   FSR0L, F
1120   0835           05439         movf    loop_j, W
1121   3E05           05440         addlw   crypto_wbytes
1122   0784           05441         addwf   FSR0L, F
1123   30F0           05442         movlw   0xF0
1124   0586           05443         andwf   FSR1L, F        
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 108


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1125   0835           05444         movf    loop_j, W
1126   0786           05445         addwf   FSR1L, F
1127   0801           05446         movf    INDF1, W
1128   0680           05447         xorwf   INDF0, F
1129   0AB5           05448         incf    loop_j, F
112A   0835           05449         movf    loop_j, W
112B   3A05           05450         xorlw   crypto_wbytes
112C   1D03           05451         btfss   STATUS, Z
112D   2???           05452         goto    DECRYPT_PACKET_decrypt_j3       
                      05453         
                      05454         ;$ak = 0;
112E   01B8           05455         clrf    ak
112F   01B9           05456         clrf    ak1
1130   01BA           05457         clrf    ak2
1131   01BB           05458         clrf    ak3
                      05459         ;$ac = 0;
1132   01BC           05460         clrf    ac
1133   01BD           05461         clrf    ac1
1134   01BE           05462         clrf    ac2
1135   01BF           05463         clrf    ac3
                      05464         
                      05465         ;for($j = 0; $j < $wbytes; $j++) {      
1136   01B5           05466         clrf    loop_j
1137                  05467 DECRYPT_PACKET_decrypt_j4       
                      05468         
                      05469         ;$ak += $temp_key[$j + $wbytes] - $temp_key[$j];
1137   30F0           05470         movlw   0xF0
1138   0586           05471         andwf   FSR1L, F
1139   0835           05472         movf    loop_j, W
113A   3E05           05473         addlw   crypto_wbytes
113B   0786           05474         addwf   FSR1L, F
113C   0801           05475         movf    INDF1, W
113D   07B8           05476         addwf   ak, F
113E   1C03           05477         btfss   STATUS, C
113F   2???           05478         goto    DECRYPT_PACKET_decrypt_no_carry
1140   3001           05479         movlw   0x01
1141   07B9           05480         addwf   ak1, F
1142   1C03           05481         btfss   STATUS, C
1143   2???           05482         goto    DECRYPT_PACKET_decrypt_no_carry
1144   3001           05483         movlw   0x01
1145   07BA           05484         addwf   ak2, F
1146   1C03           05485         btfss   STATUS, C
1147   2???           05486         goto    DECRYPT_PACKET_decrypt_no_carry
1148   3001           05487         movlw   0x01
1149   07BB           05488         addwf   ak3, F
114A                  05489 DECRYPT_PACKET_decrypt_no_carry 
114A   3005           05490         movlw   crypto_wbytes
114B   0286           05491         subwf   FSR1L, F                                ; F - W, W>F c=0, W<=F c=1 
114C   0801           05492         movf    INDF1, W
114D   02B8           05493         subwf   ak, F                                   ; F - W, W>F c=0, W<=F c=1 
114E   1803           05494         btfsc   STATUS, C
114F   2???           05495         goto    DECRYPT_PACKET_decrypt_no_carry2        
1150   3001           05496         movlw   0x01
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 109


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1151   02B9           05497         subwf   ak1, F
1152   1803           05498         btfsc   STATUS, C
1153   2???           05499         goto    DECRYPT_PACKET_decrypt_no_carry2
1154   3001           05500         movlw   0x01
1155   02BA           05501         subwf   ak2, F
1156   1803           05502         btfsc   STATUS, C
1157   2???           05503         goto    DECRYPT_PACKET_decrypt_no_carry2
1158   3001           05504         movlw   0x01
1159   02BB           05505         subwf   ak3, F
115A                  05506 DECRYPT_PACKET_decrypt_no_carry2
                      05507         
                      05508         ;$temp_key[$j + $wbytes] = $ak & 0xFF;
115A   3005           05509         movlw   crypto_wbytes
115B   0786           05510         addwf   FSR1L, F
115C   0838           05511         movf    ak, W
115D   0081           05512         movwf   INDF1
                      05513         
                      05514         ;$ak = $ak >> 8;
115E   0839           05515         movf    ak1, W
115F   00B8           05516         movwf   ak      
1160   083A           05517         movf    ak2, W
1161   00B9           05518         movwf   ak1     
1162   083B           05519         movf    ak3, W
1163   00BA           05520         movwf   ak2     
                      05521         
                      05522         ;$ac += $crypt[$j + $wbytes] - $crypt[$j];
1164   30F0           05523         movlw   0xF0
1165   0584           05524         andwf   FSR0L, F
1166   0835           05525         movf    loop_j, W
1167   3E05           05526         addlw   crypto_wbytes
1168   0784           05527         addwf   FSR0L, F
1169   0800           05528         movf    INDF0, W
116A   07BC           05529         addwf   ac, F
116B   1C03           05530         btfss   STATUS, C
116C   2???           05531         goto    DECRYPT_PACKET_decrypt_no_carry3
116D   3001           05532         movlw   0x01
116E   07BD           05533         addwf   ac1, F
116F   1C03           05534         btfss   STATUS, C
1170   2???           05535         goto    DECRYPT_PACKET_decrypt_no_carry3
1171   3001           05536         movlw   0x01
1172   07BE           05537         addwf   ac2, F
1173   1C03           05538         btfss   STATUS, C
1174   2???           05539         goto    DECRYPT_PACKET_decrypt_no_carry3
1175   3001           05540         movlw   0x01
1176   07BF           05541         addwf   ac3, F
1177                  05542 DECRYPT_PACKET_decrypt_no_carry3
1177   3005           05543         movlw   crypto_wbytes
1178   0284           05544         subwf   FSR0L, F                                ; F - W, W>F c=0, W<=F c=1 
1179   0800           05545         movf    INDF0, W
117A   02BC           05546         subwf   ac, F                                   ; F - W, W>F c=0, W<=F c=1 
117B   1803           05547         btfsc   STATUS, C
117C   2???           05548         goto    DECRYPT_PACKET_decrypt_no_carry4
117D   3001           05549         movlw   0x01
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 110


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

117E   02BD           05550         subwf   ac1, F
117F   1803           05551         btfsc   STATUS, C
1180   2???           05552         goto    DECRYPT_PACKET_decrypt_no_carry4
1181   3001           05553         movlw   0x01
1182   02BE           05554         subwf   ac2, F
1183   1803           05555         btfsc   STATUS, C
1184   2???           05556         goto    DECRYPT_PACKET_decrypt_no_carry4
1185   3001           05557         movlw   0x01
1186   02BF           05558         subwf   ac3, F
1187                  05559 DECRYPT_PACKET_decrypt_no_carry4
                      05560         
                      05561         ;$crypt[$j + $wbytes] = $ac & 0xFF;
1187   3005           05562         movlw   crypto_wbytes
1188   0784           05563         addwf   FSR0L, F
1189   083C           05564         movf    ac, W
118A   0080           05565         movwf   INDF0   
                      05566         
                      05567         ;$ac = $ac >> 8;
118B   083D           05568         movf    ac1, W
118C   00BC           05569         movwf   ac      
118D   083E           05570         movf    ac2, W
118E   00BD           05571         movwf   ac1     
118F   083F           05572         movf    ac3, W
1190   00BE           05573         movwf   ac2     
1191   0AB5           05574         incf    loop_j, F
1192   0835           05575         movf    loop_j, W
1193   3A05           05576         xorlw   crypto_wbytes
1194   1D03           05577         btfss   STATUS, Z
1195   2???           05578         goto    DECRYPT_PACKET_decrypt_j4               
                      05579         
                      05580         ;$k0 = $temp_key[$wbytes - 1 + $wbytes];
1196   30F0           05581         movlw   0xF0
1197   0586           05582         andwf   FSR1L, F
1198   3005           05583         movlw   crypto_wbytes
1199   0786           05584         addwf   FSR1L, F
119A   0786           05585         addwf   FSR1L, F
119B   0386           05586         decf    FSR1L, F
119C   0801           05587         movf    INDF1, W
119D   00B4           05588         movwf   k0
                      05589         
                      05590         ;$c0 = $crypt[$wbytes - 1 + $wbytes];   
119E   30F0           05591         movlw   0xF0
119F   0584           05592         andwf   FSR0L, F
11A0   3005           05593         movlw   crypto_wbytes
11A1   0784           05594         addwf   FSR0L, F
11A2   0784           05595         addwf   FSR0L, F
11A3   0384           05596         decf    FSR0L, F
11A4   0800           05597         movf    INDF0, W
11A5   00B7           05598         movwf   c0      
                      05599         
                      05600         ;for($j = $wbytes - 1; $j > 0; $j--) {
11A6   3004           05601         movlw   (crypto_wbytes - 1)
11A7   00B5           05602         movwf   loop_j
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 111


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

11A8                  05603 DECRYPT_PACKET_decrypt_j5
                      05604         
                      05605         ;$temp_key[$j + $wbytes] = $temp_key[$j - 1 + $wbytes];
11A8   30F0           05606         movlw   0xF0
11A9   0586           05607         andwf   FSR1L, F
11AA   0835           05608         movf    loop_j, W
11AB   3E05           05609         addlw   crypto_wbytes
11AC   0786           05610         addwf   FSR1L, F
11AD   0386           05611         decf    FSR1L, F
11AE   0016           05612         moviw   FSR1++
11AF   0081           05613         movwf   INDF1
                      05614         
                      05615         ;$crypt[$j + $wbytes] = $crypt[$j - 1 + $wbytes];
11B0   30F0           05616         movlw   0xF0
11B1   0584           05617         andwf   FSR0L, F
11B2   0835           05618         movf    loop_j, W
11B3   3E05           05619         addlw   crypto_wbytes
11B4   0784           05620         addwf   FSR0L, F
11B5   0384           05621         decf    FSR0L, F
11B6   0012           05622         moviw   FSR0++
11B7   0080           05623         movwf   INDF0
11B8   0BB5           05624         decfsz  loop_j, F
11B9   2???           05625         goto    DECRYPT_PACKET_decrypt_j5       
                      05626         
                      05627         ;$temp_key[0 + $wbytes] = $k0;
11BA   30F0           05628         movlw   0xF0
11BB   0586           05629         andwf   FSR1L, F
11BC   3005           05630         movlw   crypto_wbytes
11BD   0786           05631         addwf   FSR1L, F
11BE   0834           05632         movf    k0, W
11BF   0081           05633         movwf   INDF1
                      05634         
                      05635         ;$crypt[0 + $wbytes] = $c0;
11C0   30F0           05636         movlw   0xF0
11C1   0584           05637         andwf   FSR0L, F
11C2   3005           05638         movlw   crypto_wbytes
11C3   0784           05639         addwf   FSR0L, F
11C4   0837           05640         movf    c0, W
11C5   0080           05641         movwf   INDF0
11C6   03B3           05642         decf    loop_i, F
11C7   0833           05643         movf    loop_i, W
11C8   3AFF           05644         xorlw   0xFF
11C9   1D03           05645         btfss   STATUS, Z       
11CA   2???           05646         goto    DECRYPT_PACKET_decrypt_i
                      05647         
                      05648         ; -------------------- validate data ------------------------------     
                      05649         ;------------------
11CB   014E           05650         movlb   d'14'
                      05651         ;------------------     
11CC   1A19           05652         btfsc   PIE3, TX1IE                             ; make sure TX routine is NOT already running. 
11CD   2???           05653         goto    RETURN_TO_IRQ_RX1_not_type3
                      05654         ;------------------
11CE   0142           05655         movlb   d'2'
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 112


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05656         ;------------------     
11CF   30F0           05657         movlw   0xF0
11D0   0584           05658         andwf   FSR0L, F
                      05659         ; check badge ID
11D1   0012           05660         moviw   FSR0++
11D2   062C           05661         xorwf   badge_idH, W
11D3   1D03           05662         btfss   STATUS, Z
11D4   2???           05663         goto    RETURN_TO_IRQ_RX1_not_type3
11D5   0012           05664         moviw   FSR0++
11D6   062B           05665         xorwf   badge_idL, W
11D7   1D03           05666         btfss   STATUS, Z
11D8   2???           05667         goto    RETURN_TO_IRQ_RX1_not_type3
                      05668         ; once value
11D9   0012           05669         moviw   FSR0++
11DA   064A           05670         xorwf   onceH, W
11DB   1D03           05671         btfss   STATUS, Z
11DC   2???           05672         goto    RETURN_TO_IRQ_RX1_not_type3
11DD   0012           05673         moviw   FSR0++
11DE   064B           05674         xorwf   onceL, W
11DF   1D03           05675         btfss   STATUS, Z
11E0   2???           05676         goto    RETURN_TO_IRQ_RX1_not_type3
                      05677         ; checksum
11E1   30F0           05678         movlw   0xF0
11E2   0584           05679         andwf   FSR0L, F
11E3   300A           05680         movlw   0x0A
11E4   00B3           05681         movwf   loop_i
11E5   01BC           05682         clrf    ac
11E6                  05683 DECRYPT_PACKET_validate_chksum
11E6   0012           05684         moviw   FSR0++
11E7   07BC           05685         addwf   ac, F
11E8   0BB3           05686         decfsz  loop_i, F
11E9   2???           05687         goto    DECRYPT_PACKET_validate_chksum
11EA   083C           05688         movf    ac, W
11EB   1D03           05689         btfss   STATUS, Z
11EC   2???           05690         goto    RETURN_TO_IRQ_RX1_not_type3
                      05691         ; compute available credits
                      05692         ;------------------
11ED   0140           05693         movlb   d'0'
                      05694         ;------------------     
11EE   0826           05695         movf    countL, W
                      05696         ;------------------
11EF   0142           05697         movlb   d'2'
                      05698         ;------------------     
11F0   00BC           05699         movwf   ac
                      05700         ;------------------
11F1   0140           05701         movlb   d'0'
                      05702         ;------------------     
11F2   0827           05703         movf    countH, W
                      05704         ;------------------
11F3   0142           05705         movlb   d'2'
                      05706         ;------------------     
11F4   00BD           05707         movwf   ac1
11F5   3023           05708         movlw   high(ram_spent)
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 113


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

11F6   0087           05709         movwf   FSR1H
11F7   3071           05710         movlw   low(ram_spent)
11F8   0086           05711         movwf   FSR1L   
11F9   0901           05712         comf    INDF1, W
11FA   00BF           05713         movwf   ac3
11FB   0A86           05714         incf    FSR1L, F
11FC   0901           05715         comf    INDF1, W
11FD   00BE           05716         movwf   ac2     
                      05717         ; subtract spent from total credits
11FE   083E           05718         movf    ac2, W
11FF   02BC           05719         subwf   ac, F           ; f - w, W > F (neg) c = 0, W <= F (pos) C = 1
1200   083F           05720         movf    ac3, W
1201   3BBD           05721         subwfb  ac1, F          ; f - w, W > F (neg) c = 0, W <= F (pos) C = 1
1202   1C03           05722         btfss   STATUS, C
1203   2???           05723         goto    RETURN_TO_IRQ_RX1_not_type3
1204   30F0           05724         movlw   0xF0
1205   0584           05725         andwf   FSR0L, F
1206   3004           05726         movlw   0x04
1207   0784           05727         addwf   FSR0L, F
                      05728         ; subtract requested from total above 
1208   0010           05729         moviw   ++FSR0
1209   02BC           05730         subwf   ac, F           ; f - w, W > F (neg) c = 0, W <= F (pos) C = 1
120A   0011           05731         moviw   --FSR0
120B   3BBD           05732         subwfb  ac1, F          ; f - w, W > F (neg) c = 0, W <= F (pos) C = 1
120C   1C03           05733         btfss   STATUS, C       ; if negitive there was not enough funds so abort
120D   2???           05734         goto    RETURN_TO_IRQ_RX1_not_type3
                      05735         ; if sufficent credits update spent with new value
120E   0010           05736         moviw   ++FSR0
120F   07BE           05737         addwf   ac2, F
1210   0011           05738         moviw   --FSR0
1211   3DBF           05739         addwfc  ac3, F
1212   093E           05740         comf    ac2, W
1213   001F           05741         movwi   FSR1--
1214   093F           05742         comf    ac3, W
1215   001E           05743         movwi   FSR1++
                      05744         ; indicate that this needs to be saved on next mainloop. 
1216   1471           05745         bsf             g_flags, 0      
                      05746         ; invalidate the badge once
1217   01CA           05747         clrf    onceH
1218   09CB           05748         comf    onceL, F
                      05749         ; build up new packet
1219   30F0           05750         movlw   0xF0
121A   0584           05751         andwf   FSR0L, F
121B   3002           05752         movlw   0x02
121C   0784           05753         addwf   FSR0L, F
121D   0012           05754         moviw   FSR0++
121E   00B8           05755         movwf   ak                              ; badge onceH
121F   0012           05756         moviw   FSR0++
1220   00B9           05757         movwf   ak1                             ; badge onceL
1221   0012           05758         moviw   FSR0++
1222   00BA           05759         movwf   ak2                             ; creditsH
1223   0012           05760         moviw   FSR0++
1224   00BB           05761         movwf   ak3                             ; creditsL
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 114


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1225   0012           05762         moviw   FSR0++
1226   00BC           05763         movwf   ac                              ; vendo onceH
1227   0012           05764         moviw   FSR0++
1228   00BD           05765         movwf   ac1                             ; vendo onceM
1229   0012           05766         moviw   FSR0++
122A   00BE           05767         movwf   ac2                             ; vendo onceL
122B   30F0           05768         movlw   0xF0
122C   0584           05769         andwf   FSR0L, F
122D   3002           05770         movlw   0x02
122E   0784           05771         addwf   FSR0L, F
122F   083C           05772         movf    ac, W                   ; vendo onceH
1230   001A           05773         movwi   FSR0++
1231   083D           05774         movf    ac1, W                  ; vendo onceM
1232   001A           05775         movwi   FSR0++
1233   083E           05776         movf    ac2, W                  ; vendo onceL
1234   001A           05777         movwi   FSR0++
1235   083A           05778         movf    ak2, W
1236   001A           05779         movwi   FSR0++
1237   083B           05780         movf    ak3, W
1238   001A           05781         movwi   FSR0++
                      05782         ;------------------
1239   0140           05783         movlb   d'0'
                      05784         ;------------------                     
123A   2???           05785         call    _3_CYCLE_LFSR
                      05786         ;------------------
123B   0142           05787         movlb   d'2'
                      05788         ;------------------             
123C   00BF           05789         movwf   ac3
123D   0638           05790         xorwf   ak, W
123E   1903           05791         btfsc   STATUS, Z
123F   0ABF           05792         incf    ac3, F
1240   083F           05793         movf    ac3, W
1241   001A           05794         movwi   FSR0++
                      05795         ;------------------
1242   0140           05796         movlb   d'0'
                      05797         ;------------------                     
1243   2???           05798         call    _3_CYCLE_LFSR
                      05799         ;------------------
1244   0142           05800         movlb   d'2'
                      05801         ;------------------             
1245   00BF           05802         movwf   ac3
1246   0639           05803         xorwf   ak1, W
1247   1903           05804         btfsc   STATUS, Z
1248   0ABF           05805         incf    ac3, F
1249   083F           05806         movf    ac3, W
124A   001A           05807         movwi   FSR0++
                      05808         ; generate checksum
124B   01A8           05809         clrf    ir_tx_chksum
124C   30F0           05810         movlw   0xF0
124D   0584           05811         andwf   FSR0L, F
124E   3009           05812         movlw   0x09
124F   00B3           05813         movwf   loop_i
1250                  05814 DECRYPT_PACKET_gen_chksum
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 115


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1250   0012           05815         moviw   FSR0++
1251   07A8           05816         addwf   ir_tx_chksum, F
1252   0BB3           05817         decfsz  loop_i, F
1253   2???           05818         goto    DECRYPT_PACKET_gen_chksum
1254   09A8           05819         comf    ir_tx_chksum, F
1255   0A28           05820         incf    ir_tx_chksum, W 
1256   0080           05821         movwf   INDF0   
                      05822         
                      05823         ; -------------------- start encrypt ------------------------------     
1257                  05824 ENCRYPT_PACKET  
                      05825         
                      05826 
                      05827 ; don't need to move the key over if decryption is done. Process leave key in original form ready for us
                            e to encrypt...         
                      05828 ;       ; copy decrypt key to ram
                      05829 ;       movlw   high(start_key)
                      05830 ;       movwf   FSR0H
                      05831 ;       movlw   low(start_key)
                      05832 ;       movwf   FSR0L
                      05833 ;       movlw   high(temp_key0)
                      05834 ;       movwf   FSR1H
                      05835 ;       movlw   low(temp_key0)
                      05836 ;       movwf   FSR1L
                      05837 ;       movlw   0x0A
                      05838 ;       movwf   loop_i
                      05839 ;ENCRYPT_PACKET_key_move_loop
                      05840 ;       moviw   FSR0++
                      05841 ;       movwi   FSR1++
                      05842 ;       decfsz  loop_i, F
                      05843 ;       goto    ENCRYPT_PACKET_key_move_loop    
                      05844         
1257   3001           05845         movlw   high(temp_crypt0)
1258   0085           05846         movwf   FSR0H
1259   3050           05847         movlw   low(temp_crypt0)
125A   0084           05848         movwf   FSR0L   
125B   3001           05849         movlw   high(temp_key0)
125C   0087           05850         movwf   FSR1H
125D   3040           05851         movlw   low(temp_key0)
125E   0086           05852         movwf   FSR1L   
                      05853         
                      05854         
                      05855         ;for ($i = 0; $i < $rounds; $i++){
125F   01B3           05856         clrf    loop_i
1260                  05857 ENCRYPT_PACKET_i
                      05858         
                      05859         ;$c0 = $crypt[0 + $wbytes];
1260   30F0           05860         movlw   0xF0
1261   0584           05861         andwf   FSR0L, F
1262   3005           05862         movlw   crypto_wbytes
1263   0784           05863         addwf   FSR0L, F
1264   0800           05864         movf    INDF0, W
1265   00B7           05865         movwf   c0
                      05866         
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 116


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05867         ;$k0 = $temp_key[0 + $wbytes];
1266   30F0           05868         movlw   0xF0
1267   0586           05869         andwf   FSR1L, F
1268   3005           05870         movlw   crypto_wbytes
1269   0786           05871         addwf   FSR1L, F
126A   0801           05872         movf    INDF1, W
126B   00B4           05873         movwf   k0
                      05874         
                      05875         ;$ac = 0;
126C   01BC           05876         clrf    ac
126D   01BD           05877         clrf    ac1
                      05878         
                      05879         ;$ak = 0;
126E   01B8           05880         clrf    ak
126F   01B9           05881         clrf    ak1
                      05882         
                      05883         ;for ($j = 0; $j < $wbytes-1; $j++) {
1270   01B5           05884         clrf    loop_j
1271                  05885 ENCRYPT_PACKET_j
                      05886 
                      05887         ;$ac += $crypt[$j] + $crypt[($j + 1) + $wbytes]; 
1271   30F0           05888         movlw   0xF0
1272   0584           05889         andwf   FSR0L, F
1273   0835           05890         movf    loop_j, W
1274   0784           05891         addwf   FSR0L, F
1275   0012           05892         moviw   FSR0++
1276   07BC           05893         addwf   ac, F
1277   1803           05894         btfsc   STATUS, C
1278   0ABD           05895         incf    ac1, F
1279   3005           05896         movlw   crypto_wbytes
127A   0784           05897         addwf   FSR0L, F
127B   0013           05898         moviw   FSR0--
127C   07BC           05899         addwf   ac, F
127D   1803           05900         btfsc   STATUS, C
127E   0ABD           05901         incf    ac1, F
                      05902         
                      05903         ;$crypt[$j + $wbytes] = ($ac & 0xFF) ^ $temp_key[$j]; 
127F   083C           05904         movf    ac, W
1280   0080           05905         movwf   INDF0
1281   30F0           05906         movlw   0xF0
1282   0586           05907         andwf   FSR1L, F
1283   0835           05908         movf    loop_j, W
1284   0786           05909         addwf   FSR1L, F
1285   0801           05910         movf    INDF1, W
1286   0680           05911         xorwf   INDF0, F
                      05912         
                      05913         ;$ac = $ac >> 8;
1287   083D           05914         movf    ac1, W
1288   00BC           05915         movwf   ac
1289   01BD           05916         clrf    ac1
                      05917         
                      05918         ;$ak += $temp_key[$j] + $temp_key[($j + 1) + $wbytes]; 
128A   30F0           05919         movlw   0xF0
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 117


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

128B   0586           05920         andwf   FSR1L, F
128C   0835           05921         movf    loop_j, W
128D   0786           05922         addwf   FSR1L, F
128E   0016           05923         moviw   FSR1++
128F   07B8           05924         addwf   ak, F
1290   1803           05925         btfsc   STATUS, C
1291   0AB9           05926         incf    ak1, F
1292   3005           05927         movlw   crypto_wbytes
1293   0786           05928         addwf   FSR1L, F
1294   0017           05929         moviw   FSR1--
1295   07B8           05930         addwf   ak, F
1296   1803           05931         btfsc   STATUS, C
1297   0AB9           05932         incf    ak1, F
                      05933 
                      05934         ;$temp_key[$j + $wbytes] = ($ak & 0xFF);         
1298   0838           05935         movf    ak, W
1299   0081           05936         movwf   INDF1
                      05937 
                      05938         ;$ak = $ak >> 8;        
129A   0839           05939         movf    ak1, W
129B   00B8           05940         movwf   ak      
129C   01B9           05941         clrf    ak1
                      05942                 
129D   0AB5           05943         incf    loop_j, F
129E   0835           05944         movf    loop_j, W
129F   3A04           05945         xorlw   (crypto_wbytes - 1)
12A0   1D03           05946         btfss   STATUS, Z
12A1   2???           05947         goto    ENCRYPT_PACKET_j                        
                      05948 
                      05949         ;$ac += $crypt[$wbytes-1] + $c0; 
12A2   30F0           05950         movlw   0xF0
12A3   0584           05951         andwf   FSR0L, F
12A4   3005           05952         movlw   crypto_wbytes
12A5   0784           05953         addwf   FSR0L, F
12A6   0384           05954         decf    FSR0L, F
12A7   0800           05955         movf    INDF0, W
12A8   07BC           05956         addwf   ac, F
12A9   0837           05957         movf    c0, W
12AA   07BC           05958         addwf   ac, F
                      05959         
                      05960         ;$crypt[($wbytes-1) + $wbytes] = ($ac & 0xFF) ^ $temp_key[$wbytes-1];
12AB   3005           05961         movlw   crypto_wbytes
12AC   0784           05962         addwf   FSR0L, F
12AD   083C           05963         movf    ac, W
12AE   0080           05964         movwf   INDF0
12AF   30F0           05965         movlw   0xF0
12B0   0586           05966         andwf   FSR1L, F
12B1   3005           05967         movlw   crypto_wbytes
12B2   0786           05968         addwf   FSR1L, F
12B3   0386           05969         decf    FSR1L, F
12B4   0801           05970         movf    INDF1, W
12B5   0680           05971         xorwf   INDF0, F        
                      05972         
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 118


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05973         ;$ak += $temp_key[$wbytes-1] + $k0; 
12B6   0801           05974         movf    INDF1, W
12B7   07B8           05975         addwf   ak, F
12B8   0834           05976         movf    k0, W
12B9   07B8           05977         addwf   ak, F
                      05978         
                      05979         ;$temp_key[($wbytes-1) + $wbytes] = ($ak & 0xFF);
12BA   3005           05980         movlw   crypto_wbytes
12BB   0786           05981         addwf   FSR1L, F
12BC   0838           05982         movf    ak, W
12BD   0081           05983         movwf   INDF1
                      05984         
                      05985         ;$temp_key[$wbytes] = $temp_key[$wbytes] ^ ($i & 0xFF);
12BE   30F0           05986         movlw   0xF0
12BF   0586           05987         andwf   FSR1L, F
12C0   3005           05988         movlw   crypto_wbytes
12C1   0786           05989         addwf   FSR1L, F
12C2   0833           05990         movf    loop_i, W
12C3   0681           05991         xorwf   INDF1, F
                      05992         
                      05993         
                      05994         ;$c0 = $crypt[$wbytes-1];
12C4   30F0           05995         movlw   0xF0
12C5   0584           05996         andwf   FSR0L, F
12C6   3005           05997         movlw   crypto_wbytes
12C7   0784           05998         addwf   FSR0L, F
12C8   0384           05999         decf    FSR0L, F        
12C9   0800           06000         movf    INDF0, W
12CA   00B7           06001         movwf   c0
                      06002         
                      06003         ;$k0 = $temp_key[$wbytes-1];
12CB   0386           06004         decf    FSR1L, F
12CC   0801           06005         movf    INDF1, W
12CD   00B4           06006         movwf   k0
                      06007         
                      06008         ;for ($j = $wbytes-1; $j > 0; $j--){
12CE   3004           06009         movlw   (crypto_wbytes - 1)
12CF   00B5           06010         movwf   loop_j
12D0                  06011 ENCRYPT_PACKET_j2
                      06012         
                      06013         ;$crypt[$j] = (($crypt[$j] << 3 | ($crypt[$j - 1] >> 5)) ^ $crypt[$j + $wbytes]) & 0xFF;
12D0   30F0           06014         movlw   0xF0
12D1   0584           06015         andwf   FSR0L, F
12D2   0835           06016         movf    loop_j, W
12D3   0784           06017         addwf   FSR0L, F
12D4   1003           06018         bcf             STATUS, C
12D5   0D80           06019         rlf             INDF0, F
12D6   1003           06020         bcf             STATUS, C
12D7   0D80           06021         rlf             INDF0, F
12D8   1003           06022         bcf             STATUS, C
12D9   0D80           06023         rlf             INDF0, F
12DA   0011           06024         moviw   --FSR0
12DB   00BC           06025         movwf   ac
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 119


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

12DC   3005           06026         movlw   0x05
12DD   00B6           06027         movwf   crypt_cnt
12DE                  06028 ENCRYPT_PACKET_shift
12DE   1003           06029         bcf             STATUS, C
12DF   0CBC           06030         rrf             ac, F
12E0   0BB6           06031         decfsz  crypt_cnt, F
12E1   2???           06032         goto    ENCRYPT_PACKET_shift
12E2   0A84           06033         incf    FSR0L, F
12E3   083C           06034         movf    ac, W
12E4   0480           06035         iorwf   INDF0, F        
12E5   3005           06036         movlw   crypto_wbytes
12E6   0784           06037         addwf   FSR0L, F
12E7   0800           06038         movf    INDF0, W
12E8   00BC           06039         movwf   ac
12E9   3005           06040         movlw   crypto_wbytes
12EA   0284           06041         subwf   FSR0L, F
12EB   083C           06042         movf    ac, W
12EC   0680           06043         xorwf   INDF0, F                
                      06044         
                      06045         ;$temp_key[$j] = ((($temp_key[$j] << 3) | ($temp_key[($j - 1)] >> 5)) ^ $temp_key[$j + $wbytes])
                             & 0xFF;        
12ED   30F0           06046         movlw   0xF0
12EE   0586           06047         andwf   FSR1L, F
12EF   0835           06048         movf    loop_j, W
12F0   0786           06049         addwf   FSR1L, F
12F1   1003           06050         bcf             STATUS, C
12F2   0D81           06051         rlf             INDF1, F
12F3   1003           06052         bcf             STATUS, C
12F4   0D81           06053         rlf             INDF1, F
12F5   1003           06054         bcf             STATUS, C
12F6   0D81           06055         rlf             INDF1, F
12F7   0015           06056         moviw   --FSR1
12F8   00B8           06057         movwf   ak
12F9   3005           06058         movlw   0x05
12FA   00B6           06059         movwf   crypt_cnt
12FB                  06060 ENCRYPT_PACKET_shift2
12FB   1003           06061         bcf             STATUS, C
12FC   0CB8           06062         rrf             ak, F
12FD   0BB6           06063         decfsz  crypt_cnt, F
12FE   2???           06064         goto    ENCRYPT_PACKET_shift2
12FF   0A86           06065         incf    FSR1L, F
1300   0838           06066         movf    ak, W
1301   0481           06067         iorwf   INDF1, F        
1302   3005           06068         movlw   crypto_wbytes
1303   0786           06069         addwf   FSR1L, F
1304   0801           06070         movf    INDF1, W
1305   00B8           06071         movwf   ak
1306   3005           06072         movlw   crypto_wbytes
1307   0286           06073         subwf   FSR1L, F
1308   0838           06074         movf    ak, W
1309   0681           06075         xorwf   INDF1, F                
130A   0BB5           06076         decfsz  loop_j, F
130B   2???           06077         goto    ENCRYPT_PACKET_j2       
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 120


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      06078         
                      06079         
                      06080         ;$crypt[0] = ((($crypt[0] << 3) | ($c0 >> 5)) ^ $crypt[0 + $wbytes]) & 0xFF;
130C   30F0           06081         movlw   0xF0
130D   0584           06082         andwf   FSR0L, F
130E   1003           06083         bcf             STATUS, C
130F   0D80           06084         rlf             INDF0, F
1310   1003           06085         bcf             STATUS, C
1311   0D80           06086         rlf             INDF0, F
1312   1003           06087         bcf             STATUS, C
1313   0D80           06088         rlf             INDF0, F
1314   3005           06089         movlw   0x05
1315   00B6           06090         movwf   crypt_cnt
1316                  06091 ENCRYPT_PACKET_shift3
1316   1003           06092         bcf             STATUS, C
1317   0CB7           06093         rrf             c0, F
1318   0BB6           06094         decfsz  crypt_cnt, F
1319   2???           06095         goto    ENCRYPT_PACKET_shift3
131A   0837           06096         movf    c0, W
131B   0480           06097         iorwf   INDF0, F        
131C   3005           06098         movlw   crypto_wbytes
131D   0784           06099         addwf   FSR0L, F
131E   0800           06100         movf    INDF0, W
131F   00BC           06101         movwf   ac
1320   3005           06102         movlw   crypto_wbytes
1321   0284           06103         subwf   FSR0L, F
1322   083C           06104         movf    ac, W
1323   0680           06105         xorwf   INDF0, F        
                      06106         
                      06107         ;$temp_key[0] = ((($temp_key[0] << 3) | ($k0 >> 5)) ^ $temp_key[0 + $wbytes]) & 0xFF;
1324   30F0           06108         movlw   0xF0
1325   0586           06109         andwf   FSR1L, F
1326   1003           06110         bcf             STATUS, C
1327   0D81           06111         rlf             INDF1, F
1328   1003           06112         bcf             STATUS, C
1329   0D81           06113         rlf             INDF1, F
132A   1003           06114         bcf             STATUS, C
132B   0D81           06115         rlf             INDF1, F
132C   3005           06116         movlw   0x05
132D   00B6           06117         movwf   crypt_cnt
132E                  06118 ENCRYPT_PACKET_shift4
132E   1003           06119         bcf             STATUS, C
132F   0CB4           06120         rrf             k0, F
1330   0BB6           06121         decfsz  crypt_cnt, F
1331   2???           06122         goto    ENCRYPT_PACKET_shift4
1332   0834           06123         movf    k0, W
1333   0481           06124         iorwf   INDF1, F        
1334   3005           06125         movlw   crypto_wbytes
1335   0786           06126         addwf   FSR1L, F
1336   0801           06127         movf    INDF1, W
1337   00B8           06128         movwf   ak
1338   3005           06129         movlw   crypto_wbytes
1339   0286           06130         subwf   FSR1L, F
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 121


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

133A   0838           06131         movf    ak, W
133B   0681           06132         xorwf   INDF1, F        
133C   0AB3           06133         incf    loop_i, F
133D   0833           06134         movf    loop_i, W
133E   3A1A           06135         xorlw   crypto_rounds
133F   1D03           06136         btfss   STATUS, Z
1340   2???           06137         goto    ENCRYPT_PACKET_i        
                      06138         
                      06139         ; set up packet send
1341   01A7           06140         clrf    ir_tx_seq
1342   01A8           06141         clrf    ir_tx_chksum
                      06142         ; status updated other places just flow it here
1343   3004           06143         movlw   0x04
1344   00AA           06144         movwf   tx_type         
1345   15F1           06145         bsf             g_flags, 3                              ; bit 0 = update flash, bit 1 = force st
                            omach off, bit 2 = force poo off, bit 3 = enable TX delay
                      06146         ;------------------
1346   014E           06147         movlb   d'14'
                      06148         ;------------------     
1347   1619           06149         bsf     PIE3, TX1IE                             ; enable Uart2 transmit IRQ                     
                                            
1348                  06150 RETURN_TO_IRQ_RX1_not_type3     
                      06151         ;------------------
1348   0142           06152         movlb   d'2'
                      06153         ;------------------             
1349   3180           06154         movlp   0x00
134A   2???           06155         goto    IRQ_RX1_not_type3
                      06156         
                      06157         
                      06158 
                      06159 ;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                      06160 ; FLASH goto / call break here need to update the counter manually to jump back and forth from here.... 
                      06161 ;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%      
                      06162 ;put the following at address 1000h
                      06163         org     1800h           
                      06164 
                      06165 ;################################################################################
                      06166 ; cycle the LFSR (sudo random) generator and return the new lower 8 result in W
                      06167 ;################################################################################
1800                  06168 _4_CYCLE_LFSR
1800   3188           06169         movlp   0x08
1801   2???           06170         call    _2_CYCLE_LFSR
1802   3198           06171         movlp   0x18
1803   0008           06172         return  
                      06173         
                      06174 ;#########################################################
                      06175 ; This configures the MSSP to I2C
                      06176 ;#########################################################
1804                  06177 _4_CFG_I2C
1804   3180           06178         movlp   0x00
1805   2???           06179         call    _CFG_I2C
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 122


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1806   3198           06180         movlp   0x18
1807   0008           06181         return
                      06182         
                      06183 ;#########################################################
                      06184 ; This configures the MSSP to SPI
                      06185 ;#########################################################
1808                  06186 _4_CFG_SPI
1808   0808           06187         movf    BSR, W
1809   00F2           06188         movwf   current_bsr
                      06189         ;------------------
180A   017D           06190         movlb   d'61'
                      06191         ;------------------
                      06192         ; input PPS signals
180B   3010           06193         movlw   0x10                                    ; RC0
180C   00C6           06194         movwf   SSP1DATPPS      
                      06195         
                      06196         ;------------------
180D   017E           06197         movlb   d'62'
                      06198         ;------------------     
                      06199         ; output PPS signals
180E   3015           06200         movlw   0x15                            ; SCK1/SCL1
180F   00A2           06201         movwf   RC2PPS
1810   3016           06202         movlw   0x16                            ; SDO1/SDA1
1811   00A1           06203         movwf   RC1PPS
                      06204         
                      06205         
                      06206         ;movlw  0x01                            ; enable weak pull up on portC 0
                      06207         ;movwf  WPUC    
                      06208         
                      06209         
                      06210         
                      06211         ;------------------
1812   0143           06212         movlb   d'3'
                      06213         ;------------------
                      06214         ; disable MSSP engine 
1813   0190           06215         clrf    SSP1CON1                    ; reset MSSP
1814   0191           06216         clrf    SSP1CON2
1815   0192           06217         clrf    SSP1CON3
1816   018F           06218         clrf    SSP1STAT
1817   30FF           06219         movlw   0xFF
1818   008E           06220         movwf   SSP1MSK
                      06221         ;movlw  0x80                        ; SMP = 1, CKE = 0
1819   30C0           06222         movlw   0xC0                        ; SMP = 1, CKE = 1
181A   008F           06223         movwf   SSP1STAT        
181B   3007           06224         movlw   0x07                        ; 0x07 with a 32MHz FOSC = 1MHz
181C   008D           06225         movwf   SSP1ADD                     ; clock = FOSC/((ADD<7:0> + 1) *4)
181D   302A           06226         movlw   0x2A                        ; port enabled, CKP = 1, S{O master mode user baud calc   
181E   0090           06227         movwf   SSP1CON1        
                      06228         
181F   0872           06229         movf    current_bsr, W
1820   0088           06230         movwf   BSR
1821   0008           06231         return
                      06232         
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 123


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      06233 ;#########################################################
                      06234 ; send the value in the W register out the SPI bus and return the value we get back in W
                      06235 ;#########################################################
1822                  06236 _4_SEND_RCV_W_SPI
1822   00F0           06237         movwf   g_temp
1823   0808           06238         movf    BSR, W
1824   00F2           06239         movwf   current_bsr
                      06240         ;------------------
1825   014E           06241         movlb   d'14'
                      06242         ;------------------     
1826   100F           06243         bcf     PIR3, SSP1IF                ; clear interrupt flag
1827   108F           06244         bcf     PIR3, BCL1IF                ; clear interrupt flag (i2c col)
                      06245         ;------------------
1828   0143           06246         movlb   d'3'
                      06247         ;------------------
1829   0870           06248         movf    g_temp, W
182A   008C           06249         movwf   SSP1BUF 
                      06250         ;------------------
182B   014E           06251         movlb   d'14'
                      06252         ;------------------     
182C                  06253 __WAIT_SPI_BYTE_DONE    
182C   1C0F           06254         btfss   PIR3, SSP1IF
182D   2???           06255         goto    __WAIT_SPI_BYTE_DONE
182E   100F           06256         bcf     PIR3, SSP1IF                ; clear interrupt flag
                      06257         ;------------------
182F   0143           06258         movlb   d'3'
                      06259         ;------------------
1830   080C           06260         movf    SSP1BUF, W                      ; read byte 
1831   00F0           06261         movwf   g_temp
                      06262         
1832   0872           06263         movf    current_bsr, W
1833   0088           06264         movwf   BSR
                      06265         
1834   0870           06266         movf    g_temp, W
1835   0008           06267         return          
                      06268         
                      06269 
                      06270         
                      06271 ;#########################################################
                      06272 ; Address the oLED display
                      06273 ; page in i2c_off and colum number in W
                      06274 ;#########################################################
1836                  06275 _4_ADDRESS_oLED
1836   00A3           06276         movwf   i2c_dat0
                      06277         ; Address the starting block of pixles to update
1837   121A           06278         bcf             LATC, 4                 ; oLED D/#C pin
1838   131A           06279         bcf             LATC, 6                         ; oLED CS pin
1839   3020           06280         movlw   0x20                            ; set memory addressing mode
183A   2???           06281         call    _4_SEND_RCV_W_SPI       
                      06282         ; discard this byte     
                      06283         ;movlw  0x00                            ; horisontal addressing mode
                      06284         ;movlw  0x01                            ; vertical addressing mode
183B   3002           06285         movlw   0x02                            ; page addressing mode
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 124


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

183C   2???           06286         call    _4_SEND_RCV_W_SPI       
                      06287         ; discard this byte     
183D   171A           06288         bsf             LATC, 6                         ; oLED CS pin   
                      06289         ;bcf            LATC, 4                         ; oLED D/#C pin
183E   131A           06290         bcf             LATC, 6                         ; oLED CS pin
183F   0822           06291         movf    i2c_off, W
1840   3907           06292         andlw   0x07
1841   38B0           06293         iorlw   0xB0                            ; select memory addressing page (0xB0 to 0xB7 valid. B0 
                            is stripe with lowest corner, B4 is stripe with upper corner of the screen, B5-7 not used)
1842   2???           06294         call    _4_SEND_RCV_W_SPI       
                      06295         ; discard this byte     
1843   171A           06296         bsf             LATC, 6                         ; oLED CS pin
                      06297         ;bcf            LATC, 4                         ; oLED D/#C pin
1844   131A           06298         bcf             LATC, 6                         ; oLED CS pin
1845   0823           06299         movf    i2c_dat0, W
1846   390F           06300         andlw   0x0F                                    ; select memory addressing column low nibble
1847   2???           06301         call    _4_SEND_RCV_W_SPI       
                      06302         ; discard this byte     
1848   171A           06303         bsf             LATC, 6                         ; oLED CS pin
                      06304         ;bcf            LATC, 4                         ; oLED D/#C pin
1849   131A           06305         bcf             LATC, 6                         ; oLED CS pin
184A   0E23           06306         swapf   i2c_dat0, W
184B   390F           06307         andlw   0x0F
184C   3810           06308         iorlw   0x10                            ; select memory addressing column high nibble
184D   2???           06309         call    _4_SEND_RCV_W_SPI       
                      06310         ; discard this byte     
184E   171A           06311         bsf             LATC, 6                         ; oLED CS pin
                      06312         
184F   0008           06313         return
                      06314         
                      06315         
                      06316 ;---------------------------------------------------------------------------------------        
                      06317         
1850                  06318 oLED_INIT       
1850   2???           06319         call    _4_CFG_SPI
                      06320         
                      06321         ; init the oLED display.... 
                      06322         ; may need to drive reset hight then low then high again.... 
1851   159A           06323         bsf             LATC, 3                         ; #oLED_Reset
1852   3001           06324         movlw   0x01
1853   00F3           06325         movwf   delay_cnt
1854                  06326 oLED_INIT_DELAY
1854   0873           06327         movf    delay_cnt, W
1855   1D03           06328         btfss   STATUS, Z
1856   2???           06329         goto    oLED_INIT_DELAY
                      06330         
1857   121A           06331         bcf             LATC, 4                         ; oLED D/#C pin
1858   131A           06332         bcf             LATC, 6                         ; oLED CS pin
1859   30AE           06333         movlw   0xAE                            ; set display off
185A   2???           06334         call    _4_SEND_RCV_W_SPI       
                      06335         ; discard this byte     
185B   171A           06336         bsf             LATC, 6                         ; oLED CS pin
                      06337 
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 125


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      06338         ;bcf            LATC, 4                 ; oLED D/#C pin
185C   131A           06339         bcf             LATC, 6                         ; oLED CS pin
185D   3040           06340         movlw   0x40                            ; set display start line:COM0
185E   2???           06341         call    _4_SEND_RCV_W_SPI       
                      06342         ; discard this byte     
185F   171A           06343         bsf             LATC, 6                         ; oLED CS pin
                      06344         
                      06345         ;bcf            LATC, 4                 ; oLED D/#C pin
1860   131A           06346         bcf             LATC, 6                         ; oLED CS pin
1861   3081           06347         movlw   0x81                            ; set contrast control
1862   2???           06348         call    _4_SEND_RCV_W_SPI       
                      06349         ; discard this byte     
1863   302F           06350         movlw   0x2F                            ;
1864   2???           06351         call    _4_SEND_RCV_W_SPI       
                      06352         ; discard this byte     
1865   171A           06353         bsf             LATC, 6                         ; oLED CS pin   
                      06354         
                      06355         ;bcf            LATC, 4                 ; oLED D/#C pin
1866   131A           06356         bcf             LATC, 6                         ; oLED CS pin
1867   30A0           06357         movlw   0xA0                            ; set segment re-map
1868   2???           06358         call    _4_SEND_RCV_W_SPI       
                      06359         ; discard this byte     
1869   171A           06360         bsf             LATC, 6                         ; oLED CS pin
                      06361         
                      06362         ;bcf            LATC, 4                 ; oLED D/#C pin
186A   131A           06363         bcf             LATC, 6                         ; oLED CS pin
186B   30A4           06364         movlw   0xA4                            ; entire display on
186C   2???           06365         call    _4_SEND_RCV_W_SPI       
                      06366         ; discard this byte     
186D   171A           06367         bsf             LATC, 6                         ; oLED CS pin
                      06368         
                      06369         ;bcf            LATC, 4                 ; oLED D/#C pin
186E   131A           06370         bcf             LATC, 6                         ; oLED CS pin
186F   30A6           06371         movlw   0xA6                            ; set inverse off
                      06372         ;movlw  0xA7                            ; set inverse on
1870   2???           06373         call    _4_SEND_RCV_W_SPI       
                      06374         ; discard this byte     
1871   171A           06375         bsf             LATC, 6                         ; oLED CS pin
                      06376         
                      06377         ;bcf            LATC, 4                 ; oLED D/#C pin
1872   131A           06378         bcf             LATC, 6                         ; oLED CS pin
1873   30A8           06379         movlw   0xA8                            ; set multiplex ratio
1874   2???           06380         call    _4_SEND_RCV_W_SPI       
                      06381         ; discard this byte     
1875   3027           06382         movlw   0x27                            ; 1/40 duty ratio
1876   2???           06383         call    _4_SEND_RCV_W_SPI       
                      06384         ; discard this byte     
1877   171A           06385         bsf             LATC, 6                         ; oLED CS pin
                      06386         
                      06387         ;bcf            LATC, 4                 ; oLED D/#C pin
1878   131A           06388         bcf             LATC, 6                         ; oLED CS pin
1879   30C0           06389         movlw   0xC0                            ; set com output scan direction
187A   2???           06390         call    _4_SEND_RCV_W_SPI       
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 126


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      06391         ; discard this byte     
187B   171A           06392         bsf             LATC, 6                         ; oLED CS pin
                      06393         
                      06394         ;bcf            LATC, 4                 ; oLED D/#C pin
187C   131A           06395         bcf             LATC, 6                         ; oLED CS pin
187D   30D3           06396         movlw   0xD3                            ; set display offset
187E   2???           06397         call    _4_SEND_RCV_W_SPI       
                      06398         ; discard this byte     
187F   3000           06399         movlw   0x00                            ;
1880   2???           06400         call    _4_SEND_RCV_W_SPI       
                      06401         ; discard this byte     
1881   171A           06402         bsf             LATC, 6                         ; oLED CS pin
                      06403 
                      06404         ;bcf            LATC, 4                 ; oLED D/#C pin
1882   131A           06405         bcf             LATC, 6                         ; oLED CS pin
1883   30D5           06406         movlw   0xD5                            ; set display clock divide ratio
1884   2???           06407         call    _4_SEND_RCV_W_SPI       
                      06408         ; discard this byte     
1885   3080           06409         movlw   0x80                            ; 105Hz
1886   2???           06410         call    _4_SEND_RCV_W_SPI       
                      06411         ; discard this byte     
1887   171A           06412         bsf             LATC, 6                         ; oLED CS pin
                      06413         
                      06414         ;bcf            LATC, 4                 ; oLED D/#C pin
1888   131A           06415         bcf             LATC, 6                         ; oLED CS pin
1889   30D9           06416         movlw   0xD9                            ; set pre-charge period
188A   2???           06417         call    _4_SEND_RCV_W_SPI       
                      06418         ; discard this byte     
188B   3022           06419         movlw   0x22                            ; 
188C   2???           06420         call    _4_SEND_RCV_W_SPI       
                      06421         ; discard this byte     
188D   171A           06422         bsf             LATC, 6                         ; oLED CS pin
                      06423         
                      06424         ;bcf            LATC, 4                 ; oLED D/#C pin
188E   131A           06425         bcf             LATC, 6                         ; oLED CS pin
188F   30DA           06426         movlw   0xDA                            ; set com pins hardware configuration
1890   2???           06427         call    _4_SEND_RCV_W_SPI       
                      06428         ; discard this byte     
1891   3012           06429         movlw   0x12                            ; 
1892   2???           06430         call    _4_SEND_RCV_W_SPI       
                      06431         ; discard this byte     
1893   171A           06432         bsf             LATC, 6                         ; oLED CS pin
                      06433 
                      06434         ;bcf            LATC, 4                 ; oLED D/#C pin
1894   131A           06435         bcf             LATC, 6                         ; oLED CS pin
1895   30AD           06436         movlw   0xAD                            ; set internal IREF
1896   2???           06437         call    _4_SEND_RCV_W_SPI       
                      06438         ; discard this byte     
1897   3030           06439         movlw   0x30                            ; 
1898   2???           06440         call    _4_SEND_RCV_W_SPI       
                      06441         ; discard this byte     
1899   171A           06442         bsf             LATC, 6                         ; oLED CS pin
                      06443         
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 127


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      06444         ;bcf            LATC, 4                 ; oLED D/#C pin
189A   131A           06445         bcf             LATC, 6                         ; oLED CS pin
189B   30DB           06446         movlw   0xDB                            ; set vcomh deselect level
189C   2???           06447         call    _4_SEND_RCV_W_SPI       
                      06448         ; discard this byte     
189D   3020           06449         movlw   0x20                            ; 0.77*VCC
189E   2???           06450         call    _4_SEND_RCV_W_SPI       
                      06451         ; discard this byte     
189F   171A           06452         bsf             LATC, 6                         ; oLED CS pin
                      06453         
                      06454         ;bcf            LATC, 4                 ; oLED D/#C pin
18A0   131A           06455         bcf             LATC, 6                         ; oLED CS pin
18A1   308D           06456         movlw   0x8D                            ; set pre-charge period
18A2   2???           06457         call    _4_SEND_RCV_W_SPI       
                      06458         ; discard this byte     
18A3   3014           06459         movlw   0x14                            ; enable charge pump, VCC=7.5V
18A4   2???           06460         call    _4_SEND_RCV_W_SPI       
                      06461         ; discard this byte     
18A5   171A           06462         bsf             LATC, 6                         ; oLED CS pin
                      06463 
                      06464         ;bcf            LATC, 4                 ; oLED D/#C pin
18A6   131A           06465         bcf             LATC, 6                         ; oLED CS pin
18A7   30AF           06466         movlw   0xAF                            ; set display on
18A8   2???           06467         call    _4_SEND_RCV_W_SPI       
                      06468         ; discard this byte     
18A9   171A           06469         bsf             LATC, 6                         ; oLED CS pin
                      06470         
                      06471         ;bcf            LATC, 4                 ; oLED D/#C pin
18AA   131A           06472         bcf             LATC, 6                         ; oLED CS pin
18AB   3020           06473         movlw   0x20                            ; set memory addressing mode
18AC   2???           06474         call    _4_SEND_RCV_W_SPI       
                      06475         ; discard this byte     
18AD   3000           06476         movlw   0x00                            ; horisontal addressing mode
                      06477         ;movlw  0x01                            ; vertical addressing mode
                      06478         ;movlw  0x02                            ; page addressing mode
18AE   2???           06479         call    _4_SEND_RCV_W_SPI       
                      06480         ; discard this byte     
18AF   171A           06481         bsf             LATC, 6                         ; oLED CS pin
                      06482 
                      06483         ;bcf            LATC, 4                 ; oLED D/#C pin
18B0   131A           06484         bcf             LATC, 6                         ; oLED CS pin
18B1   3022           06485         movlw   0x22                            ; set page range
18B2   2???           06486         call    _4_SEND_RCV_W_SPI       
                      06487         ; discard this byte     
18B3   3000           06488         movlw   0x00                            ; start
18B4   2???           06489         call    _4_SEND_RCV_W_SPI       
                      06490         ; discard this byte     
18B5   3007           06491         movlw   0x07                            ; end
18B6   2???           06492         call    _4_SEND_RCV_W_SPI       
                      06493         ; discard this byte     
18B7   171A           06494         bsf             LATC, 6                         ; oLED CS pin
                      06495 
                      06496         
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 128


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      06497         ;bcf            LATC, 4                 ; oLED D/#C pin
18B8   131A           06498         bcf             LATC, 6                         ; oLED CS pin
18B9   3021           06499         movlw   0x21                            ; set column range
18BA   2???           06500         call    _4_SEND_RCV_W_SPI       
                      06501         ; discard this byte     
18BB   3000           06502         movlw   0x00                            ; start
18BC   2???           06503         call    _4_SEND_RCV_W_SPI       
                      06504         ; discard this byte     
18BD   307F           06505         movlw   0x7F                            ; end
18BE   2???           06506         call    _4_SEND_RCV_W_SPI       
                      06507         ; discard this byte     
18BF   171A           06508         bsf             LATC, 6                         ; oLED CS pin
                      06509 
                      06510         ; clear the ram
18C0   161A           06511         bsf             LATC, 4                         ; oLED D/#C pin
18C1   131A           06512         bcf             LATC, 6                         ; oLED CS pin
18C2   3004           06513         movlw   0x04
18C3   00A1           06514         movwf   temp1
18C4   01A0           06515         clrf    temp
18C5                  06516 test_loop       
18C5   3000           06517         movlw   0x00                            ; display data
18C6   2???           06518         call    _4_SEND_RCV_W_SPI       
                      06519         ; discard this byte     
18C7   0BA0           06520         decfsz  temp, F
18C8   2???           06521         goto    test_loop       
18C9   0BA1           06522         decfsz  temp1, F
18CA   2???           06523         goto    test_loop               
18CB   171A           06524         bsf             LATC, 6                         ; oLED CS pin   
                      06525 
                      06526         
                      06527         ; Address the starting block of pixles to update
18CC   3000           06528         movlw   0x00                ; select memory addressing page (0xB0 to 0xB7 valid. B0 is stripe wi
                            th lowest corner, B4 is stripe with upper corner of the screen, B5-7 not used)
18CD   00A2           06529         movwf   i2c_off
18CE   301C           06530         movlw   0x1C                ; starting column
18CF   2???           06531         call    _4_ADDRESS_oLED
                      06532         
                      06533         ; set on one block of pixles
18D0   161A           06534         bsf             LATC, 4                         ; oLED D/#C pin
18D1   131A           06535         bcf             LATC, 6                         ; oLED CS pin
                      06536         ; first edge
18D2   30FF           06537         movlw   0xFF                    ;
18D3   2???           06538         call    _4_SEND_RCV_W_SPI
                      06539         ; top row
18D4   3046           06540         movlw   d'70'
18D5   00A0           06541         movwf   temp
18D6                  06542 test_loop1      
18D6   3001           06543         movlw   0x01                    ;
18D7   2???           06544         call    _4_SEND_RCV_W_SPI       
                      06545         ; discard this byte     
18D8   0BA0           06546         decfsz  temp, F
18D9   2???           06547         goto    test_loop1      
                      06548         ; first edge
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 129


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

18DA   30FF           06549         movlw   0xFF    
18DB   2???           06550         call    _4_SEND_RCV_W_SPI
18DC   171A           06551         bsf             LATC, 6                         ; oLED CS pin
                      06552         
                      06553         
                      06554         ; Address the starting block of pixles to update
18DD   3001           06555         movlw   0x01                ; select memory addressing page (0xB0 to 0xB7 valid. B0 is stripe wi
                            th lowest corner, B4 is stripe with upper corner of the screen, B5-7 not used)
18DE   00A2           06556         movwf   i2c_off
18DF   301C           06557         movlw   0x1C                ; starting column
18E0   2???           06558         call    _4_ADDRESS_oLED
                      06559         
                      06560         ; set on one block of pixles
18E1   161A           06561         bsf             LATC, 4                         ; oLED D/#C pin
18E2   131A           06562         bcf             LATC, 6                         ; oLED CS pin
                      06563         ; first edge
18E3   30FF           06564         movlw   0xFF                    ;
18E4   2???           06565         call    _4_SEND_RCV_W_SPI
                      06566         ; middle
18E5   301B           06567         movlw   d'27'
18E6   00A0           06568         movwf   temp
18E7                  06569 test_loop2      
18E7   3000           06570         movlw   0x00                    ;
18E8   2???           06571         call    _4_SEND_RCV_W_SPI       
                      06572         ; discard this byte     
18E9   0BA0           06573         decfsz  temp, F
18EA   2???           06574         goto    test_loop2
                      06575         
18EB   3090           06576         movlw   0x90                    ;
18EC   2???           06577         call    _4_SEND_RCV_W_SPI               
18ED   3090           06578         movlw   0x90                    ;
18EE   2???           06579         call    _4_SEND_RCV_W_SPI               
18EF   3018           06580         movlw   0x18                    ;
18F0   2???           06581         call    _4_SEND_RCV_W_SPI               
18F1   30E8           06582         movlw   0xE8                    ;
18F2   2???           06583         call    _4_SEND_RCV_W_SPI               
18F3   3008           06584         movlw   0x08                    ;
18F4   2???           06585         call    _4_SEND_RCV_W_SPI               
18F5   3010           06586         movlw   0x10                    ;
18F6   2???           06587         call    _4_SEND_RCV_W_SPI               
18F7   3010           06588         movlw   0x10                    ;
18F8   2???           06589         call    _4_SEND_RCV_W_SPI               
18F9   3020           06590         movlw   0x20                    ;
18FA   2???           06591         call    _4_SEND_RCV_W_SPI               
18FB   30C0           06592         movlw   0xC0                    ;
18FC   2???           06593         call    _4_SEND_RCV_W_SPI               
                      06594         
18FD   3022           06595         movlw   d'34'
18FE   00A0           06596         movwf   temp
18FF                  06597 test_loop2a     
18FF   3000           06598         movlw   0x00                    ;
1900   2???           06599         call    _4_SEND_RCV_W_SPI       
                      06600         ; discard this byte     
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 130


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1901   0BA0           06601         decfsz  temp, F
1902   2???           06602         goto    test_loop2a     
                      06603         
                      06604         ; first edge
1903   30FF           06605         movlw   0xFF    
1904   2???           06606         call    _4_SEND_RCV_W_SPI
1905   171A           06607         bsf             LATC, 6                         ; oLED CS pin
                      06608         
                      06609         
                      06610         ; Address the starting block of pixles to update
1906   3002           06611         movlw   0x02                ; select memory addressing page (0xB0 to 0xB7 valid. B0 is stripe wi
                            th lowest corner, B4 is stripe with upper corner of the screen, B5-7 not used)
1907   00A2           06612         movwf   i2c_off
1908   301C           06613         movlw   0x1C                ; starting column
1909   2???           06614         call    _4_ADDRESS_oLED
                      06615         
                      06616         ; set on one block of pixles
190A   161A           06617         bsf             LATC, 4                         ; oLED D/#C pin
190B   131A           06618         bcf             LATC, 6                         ; oLED CS pin
                      06619         ; first edge
190C   30FF           06620         movlw   0xFF                    ;
190D   2???           06621         call    _4_SEND_RCV_W_SPI
                      06622         ; middle
190E   3015           06623         movlw   d'21'
190F   00A0           06624         movwf   temp
1910                  06625 test_loop3      
1910   3000           06626         movlw   0x00                    ;
1911   2???           06627         call    _4_SEND_RCV_W_SPI       
                      06628         ; discard this byte     
1912   0BA0           06629         decfsz  temp, F
1913   2???           06630         goto    test_loop3      
                      06631         
1914   3038           06632         movlw   0x38                    ;
1915   2???           06633         call    _4_SEND_RCV_W_SPI       
1916   30CE           06634         movlw   0xcE                    ;
1917   2???           06635         call    _4_SEND_RCV_W_SPI       
1918   3010           06636         movlw   0x10                    ;
1919   2???           06637         call    _4_SEND_RCV_W_SPI       
191A   3010           06638         movlw   0x10                    ;
191B   2???           06639         call    _4_SEND_RCV_W_SPI       
191C   3016           06640         movlw   0x16                    ;
191D   2???           06641         call    _4_SEND_RCV_W_SPI       
191E   3008           06642         movlw   0x08                    ;
191F   2???           06643         call    _4_SEND_RCV_W_SPI       
1920   3008           06644         movlw   0x08                    ;
1921   2???           06645         call    _4_SEND_RCV_W_SPI       
1922   3064           06646         movlw   0x64                    ;
1923   2???           06647         call    _4_SEND_RCV_W_SPI       
1924   3063           06648         movlw   0x63                    ;
1925   2???           06649         call    _4_SEND_RCV_W_SPI       
1926   3000           06650         movlw   0x00                    ;
1927   2???           06651         call    _4_SEND_RCV_W_SPI       
1928   3000           06652         movlw   0x00                    ;
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 131


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1929   2???           06653         call    _4_SEND_RCV_W_SPI       
192A   3066           06654         movlw   0x66                    ;
192B   2???           06655         call    _4_SEND_RCV_W_SPI       
192C   3066           06656         movlw   0x66                    ;
192D   2???           06657         call    _4_SEND_RCV_W_SPI       
192E   3000           06658         movlw   0x00                    ;
192F   2???           06659         call    _4_SEND_RCV_W_SPI       
1930   3000           06660         movlw   0x00                    ;
1931   2???           06661         call    _4_SEND_RCV_W_SPI       
1932   30C3           06662         movlw   0xc3                    ;
1933   2???           06663         call    _4_SEND_RCV_W_SPI       
1934   303C           06664         movlw   0x3c                    ;
1935   2???           06665         call    _4_SEND_RCV_W_SPI       
                      06666         
                      06667         
                      06668         
1936   3020           06669         movlw   d'32'  ;23
1937   00A0           06670         movwf   temp
1938                  06671 test_loop3a     
1938   3000           06672         movlw   0x00                    ;
1939   2???           06673         call    _4_SEND_RCV_W_SPI       
                      06674         ; discard this byte     
193A   0BA0           06675         decfsz  temp, F
193B   2???           06676         goto    test_loop3a     
                      06677         ; first edge
193C   30FF           06678         movlw   0xFF    
193D   2???           06679         call    _4_SEND_RCV_W_SPI
193E   171A           06680         bsf             LATC, 6                         ; oLED CS pin
                      06681         
                      06682         
                      06683         ; Address the starting block of pixles to update
193F   3003           06684         movlw   0x03                ; select memory addressing page (0xB0 to 0xB7 valid. B0 is stripe wi
                            th lowest corner, B4 is stripe with upper corner of the screen, B5-7 not used)
1940   00A2           06685         movwf   i2c_off
1941   301C           06686         movlw   0x1C                ; starting column
1942   2???           06687         call    _4_ADDRESS_oLED
                      06688         
                      06689         ; set on one block of pixles
1943   161A           06690         bsf             LATC, 4                         ; oLED D/#C pin
1944   131A           06691         bcf             LATC, 6                         ; oLED CS pin
                      06692         ; first edge
1945   30FF           06693         movlw   0xFF                    ;
1946   2???           06694         call    _4_SEND_RCV_W_SPI
                      06695         ; middle
1947   3017           06696         movlw   d'23'
1948   00A0           06697         movwf   temp
1949                  06698 test_loop4      
1949   3000           06699         movlw   0x00                    ;
194A   2???           06700         call    _4_SEND_RCV_W_SPI       
                      06701         ; discard this byte     
194B   0BA0           06702         decfsz  temp, F
194C   2???           06703         goto    test_loop4
                      06704         
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 132


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

194D   3001           06705         movlw   0x01                    ;
194E   2???           06706         call    _4_SEND_RCV_W_SPI               
194F   3002           06707         movlw   0x02                    ;
1950   2???           06708         call    _4_SEND_RCV_W_SPI               
1951   3002           06709         movlw   0x02                    ;
1952   2???           06710         call    _4_SEND_RCV_W_SPI               
1953   3004           06711         movlw   0x04                    ;
1954   2???           06712         call    _4_SEND_RCV_W_SPI               
1955   3004           06713         movlw   0x04                    ;
1956   2???           06714         call    _4_SEND_RCV_W_SPI               
1957   3008           06715         movlw   0x08                    ;
1958   2???           06716         call    _4_SEND_RCV_W_SPI               
1959   3008           06717         movlw   0x08                    ;
195A   2???           06718         call    _4_SEND_RCV_W_SPI               
195B   3008           06719         movlw   0x08                    ;
195C   2???           06720         call    _4_SEND_RCV_W_SPI               
195D   3008           06721         movlw   0x08                    ;
195E   2???           06722         call    _4_SEND_RCV_W_SPI               
195F   3004           06723         movlw   0x04                    ;
1960   2???           06724         call    _4_SEND_RCV_W_SPI               
1961   3004           06725         movlw   0x04                    ;
1962   2???           06726         call    _4_SEND_RCV_W_SPI               
1963   3002           06727         movlw   0x02                    ;
1964   2???           06728         call    _4_SEND_RCV_W_SPI               
1965   3001           06729         movlw   0x01                    ;
1966   2???           06730         call    _4_SEND_RCV_W_SPI               
                      06731         
1967   3022           06732         movlw   d'34'
1968   00A0           06733         movwf   temp
1969                  06734 test_loop4a     
1969   3000           06735         movlw   0x00                    ;
196A   2???           06736         call    _4_SEND_RCV_W_SPI       
                      06737         ; discard this byte     
196B   0BA0           06738         decfsz  temp, F
196C   2???           06739         goto    test_loop4a     
                      06740         ; first edge
196D   30FF           06741         movlw   0xFF    
196E   2???           06742         call    _4_SEND_RCV_W_SPI
196F   171A           06743         bsf             LATC, 6                         ; oLED CS pin
                      06744         
                      06745         
                      06746         ; Address the starting block of pixles to update
1970   3004           06747         movlw   0x04                ; select memory addressing page (0xB0 to 0xB7 valid. B0 is stripe wi
                            th lowest corner, B4 is stripe with upper corner of the screen, B5-7 not used)
1971   00A2           06748         movwf   i2c_off
1972   301C           06749         movlw   0x1C                ; starting column
1973   2???           06750         call    _4_ADDRESS_oLED
                      06751         
                      06752         ; set on one block of pixles
1974   161A           06753         bsf             LATC, 4                         ; oLED D/#C pin
1975   131A           06754         bcf             LATC, 6                         ; oLED CS pin
                      06755         ; first edge
1976   30FF           06756         movlw   0xFF                    ;
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 133


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1977   2???           06757         call    _4_SEND_RCV_W_SPI
                      06758         ; top row
1978   3046           06759         movlw   d'70'
1979   00A0           06760         movwf   temp
197A                  06761 test_loop5      
197A   3080           06762         movlw   0x80                    ;
197B   2???           06763         call    _4_SEND_RCV_W_SPI       
                      06764         ; discard this byte     
197C   0BA0           06765         decfsz  temp, F
197D   2???           06766         goto    test_loop5      
                      06767         ; first edge
197E   30FF           06768         movlw   0xFF    
197F   2???           06769         call    _4_SEND_RCV_W_SPI
1980   171A           06770         bsf             LATC, 6                         ; oLED CS pin   
                      06771         
1981   3180           06772         movlp   0x00
1982   2???           06773         goto    oLED_INIT_return
                      06774 
                      06775 ;---------------------------------------------------------------------------------------        
                      06776         
1983                  06777 oLED_EEPROM_INIT        
1983   2???           06778         call    _4_CFG_SPI      
                      06779         
                      06780 #ifdef  SKIP_EEPROM_TEST        
                      06781         goto    oLED_SKIP_EEPROM_CHK    
                      06782 #endif  
                      06783         
1984   129A           06784         bcf             LATC, 5                         ; SPI EEPROM CS pin
1985   30AB           06785         movlw   0xAB                            ; Release from deep power down. Should return dummy, dum
                            my, dummy, 0x15
1986   2???           06786         call    _4_SEND_RCV_W_SPI       
                      06787         ; discard this byte
1987   30FF           06788         movlw   0xFF
1988   2???           06789         call    _4_SEND_RCV_W_SPI       
1989   30FF           06790         movlw   0xFF
198A   2???           06791         call    _4_SEND_RCV_W_SPI       
198B   30FF           06792         movlw   0xFF
198C   2???           06793         call    _4_SEND_RCV_W_SPI       
198D   30FF           06794         movlw   0xFF
198E   2???           06795         call    _4_SEND_RCV_W_SPI       
198F   3A15           06796         xorlw   0x15
1990   1D03           06797         btfss   STATUS, Z
1991   2???           06798         goto    oLED_SELFTEST_chk_fail
1992   169A           06799         bsf             LATC, 5                         ; SPI EEPROM CS pin
                      06800         
                      06801 
1993   129A           06802         bcf             LATC, 5                         ; SPI EEPROM CS pin
1994   309F           06803         movlw   0x9F                            ; JEDEC ID, Should return 0x01, 0x40, 0x16
1995   2???           06804         call    _4_SEND_RCV_W_SPI       
                      06805         ; discard this byte
1996   30FF           06806         movlw   0xFF
1997   2???           06807         call    _4_SEND_RCV_W_SPI       
1998   3A01           06808         xorlw   0x01
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 134


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1999   1D03           06809         btfss   STATUS, Z
199A   2???           06810         goto    oLED_SELFTEST_chk_fail  
199B   30FF           06811         movlw   0xFF
199C   2???           06812         call    _4_SEND_RCV_W_SPI       
199D   3A40           06813         xorlw   0x40
199E   1D03           06814         btfss   STATUS, Z
199F   2???           06815         goto    oLED_SELFTEST_chk_fail
19A0   30FF           06816         movlw   0xFF
19A1   2???           06817         call    _4_SEND_RCV_W_SPI       
19A2   3A16           06818         xorlw   0x16
19A3   1D03           06819         btfss   STATUS, Z
19A4   2???           06820         goto    oLED_SELFTEST_chk_fail
19A5   169A           06821         bsf             LATC, 5                         ; SPI EEPROM CS pin
                      06822         
                      06823                 
                      06824 ;       bcf             LATC, 5                         ; SPI EEPROM CS pin
                      06825 ;       movlw   0x06                            ; Write Enable
                      06826 ;       call    _4_SEND_RCV_W_SPI       
                      06827 ;       ; discard this byte
                      06828 ;       bsf             LATC, 5                         ; SPI EEPROM CS pin
                      06829 
                      06830         
                      06831 ;       bcf             LATC, 5                         ; SPI EEPROM CS pin
                      06832 ;       movlw   0x02                            ; write page (256 bytes max) at 24 bit address command
                      06833 ;       call    _4_SEND_RCV_W_SPI       
                      06834 ;       ; discard this byte
                      06835 ;       movlw   0x00
                      06836 ;       call    _4_SEND_RCV_W_SPI       
                      06837 ;       ; discard this byte
                      06838 ;       movlw   0x00
                      06839 ;       call    _4_SEND_RCV_W_SPI       
                      06840 ;       ; discard this byte
                      06841 ;       movlw   0x00
                      06842 ;       call    _4_SEND_RCV_W_SPI       
                      06843 ;       ; discard this byte
                      06844 ;       
                      06845 ;       movlw   0xFE
                      06846 ;       call    _4_SEND_RCV_W_SPI       
                      06847 ;       ; discard this byte
                      06848 ;       movlw   0xED
                      06849 ;       call    _4_SEND_RCV_W_SPI       
                      06850 ;       ; discard this byte
                      06851 ;       movlw   0xB0
                      06852 ;       call    _4_SEND_RCV_W_SPI       
                      06853 ;       ; discard this byte
                      06854 ;       movlw   0xB0
                      06855 ;       call    _4_SEND_RCV_W_SPI       
                      06856 ;       ; discard this byte
                      06857 ;       bsf             LATC, 5                         ; SPI EEPROM CS pin
                      06858         
                      06859         
19A6   129A           06860         bcf             LATC, 5                         ; SPI EEPROM CS pin
19A7   3003           06861         movlw   0x03                            ; Read at 24 bit address command
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 135


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

19A8   2???           06862         call    _4_SEND_RCV_W_SPI       
                      06863         ; discard this byte
19A9   3000           06864         movlw   0x00
19AA   2???           06865         call    _4_SEND_RCV_W_SPI       
                      06866         ; discard this byte
19AB   3000           06867         movlw   0x00
19AC   2???           06868         call    _4_SEND_RCV_W_SPI       
                      06869         ; discard this byte
19AD   3000           06870         movlw   0x00
19AE   2???           06871         call    _4_SEND_RCV_W_SPI       
                      06872         ; discard this byte
19AF   30FF           06873         movlw   0xFF
19B0   2???           06874         call    _4_SEND_RCV_W_SPI       
19B1   3AFE           06875         xorlw   0xFE
19B2   1D03           06876         btfss   STATUS, Z
19B3   2???           06877         goto    oLED_SELFTEST_chk_fail  
19B4   30FF           06878         movlw   0xFF
19B5   2???           06879         call    _4_SEND_RCV_W_SPI       
19B6   3AED           06880         xorlw   0xED
19B7   1D03           06881         btfss   STATUS, Z
19B8   2???           06882         goto    oLED_SELFTEST_chk_fail  
19B9   30FF           06883         movlw   0xFF
19BA   2???           06884         call    _4_SEND_RCV_W_SPI       
19BB   3AB0           06885         xorlw   0xB0
19BC   1D03           06886         btfss   STATUS, Z
19BD   2???           06887         goto    oLED_SELFTEST_chk_fail  
19BE   30FF           06888         movlw   0xFF
19BF   2???           06889         call    _4_SEND_RCV_W_SPI       
19C0   3AB0           06890         xorlw   0xB0
19C1   1D03           06891         btfss   STATUS, Z
19C2   2???           06892         goto    oLED_SELFTEST_chk_fail  
19C3   169A           06893         bsf             LATC, 5                         ; SPI EEPROM CS pin
                      06894         
19C4                  06895 oLED_SKIP_EEPROM_CHK
                      06896         
                      06897         
19C4   3180           06898         movlp   0x00
19C5   2???           06899         goto    oLED_EEPROM_INIT_return
                      06900         
19C6                  06901 oLED_SELFTEST_chk_fail  
19C6   3180           06902         movlp   0x00
19C7   2???           06903         goto    CHECK_SPI_FAIL_INIT
                      06904         
                      06905         
                      06906         
                      06907         ;-----------------------------------------------------------------------------------------------
                            ------------
                      06908         
19C8                  06909 MAINLOOP3       
                      06910         ;------------------
19C8   0140           06911         movlb   d'0'
                      06912         ;------------------     
                      06913 
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 136


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      06914         ; if needed to force the next animation now do
                      06915         ;clrf   oLED_delay                      ; stop the counter update first then clear the internal 
                            phase
                      06916         ;clrf   oLED_phase
                      06917         ;movlw  0x00
                      06918         ;movwf  oLED_set                        ; new set to move to 
                      06919         ;clrf   oLED_seq_cnt
                      06920 
                      06921         
                      06922         ; check if the oLED delay is running 
19C9   0842           06923         movf    oLED_delay, W
19CA   1D03           06924         btfss   STATUS, Z
19CB   2???           06925         goto    MAINLOOP3_oLED_done
                      06926 
                      06927         ; set the MSSP engine back up for I2C 
19CC   2???           06928         call    _4_CFG_SPI      
                      06929         
                      06930         ; check if this seq is done or not
19CD   0845           06931         movf    oLED_seq_cnt, W
19CE   1D03           06932         btfss   STATUS, Z
19CF   2???           06933         goto    MAINLOOP3_oLED_get_next
                      06934         
                      06935         ; check if this is a one shot start
19D0   1C49           06936         btfss   oLED_ctrl, 0                    ; bit 0 = one shot start, 1 = one shot done
19D1   2???           06937         goto    MAINLOOP3_not_oneshot_start
19D2   1049           06938         bcf             oLED_ctrl, 0                    ; bit 0 = one shot start, 1 = one shot done
19D3   14C9           06939         bsf             oLED_ctrl, 1                    ; bit 0 = one shot start, 1 = one shot done
19D4   2???           06940         goto    MAINLOOP3_oneshot_done
19D5                  06941 MAINLOOP3_not_oneshot_start
19D5   1CC9           06942         btfss   oLED_ctrl, 1                    ; bit 0 = one shot start, 1 = one shot done
19D6   2???           06943         goto    MAINLOOP3_oneshot_done
19D7   10C9           06944         bcf             oLED_ctrl, 1                    ; bit 0 = one shot start, 1 = one shot done
19D8   084A           06945         movf    oLED_last, W
19D9   00C3           06946         movwf   oLED_set                                ; restore saved value (back to normal display
19DA                  06947 MAINLOOP3_oneshot_done
                      06948         
                      06949                 
                      06950         ; verify set number is vaild if not set to 0
19DA   0843           06951         movf    oLED_set, W                     ; update next line to be equal to the max number of anim
                            ation sets
19DB   3C0D           06952         sublw   Hyr0n_animation                         ; k - W, C = 0 if W > k, C = 1 if W <= k        
19DC   1C03           06953         btfss   STATUS, C       
19DD   01C3           06954         clrf    oLED_set
                      06955         
                      06956         ; Select the oLED seq from the active set
19DE   3010           06957         movlw   0x10
19DF   00C6           06958         movwf   oLED_seq_addr0
19E0   01C7           06959         clrf    oLED_seq_addr1
19E1   01C8           06960         clrf    oLED_seq_addr2
19E2   0843           06961         movf    oLED_set, W
19E3   00A0           06962         movwf   temp
19E4   1903           06963         btfsc   STATUS, Z
19E5   2???           06964         goto    MAINLOOP3_oLED_set_loop_skip
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 137


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

19E6                  06965 MAINLOOP3_oLED_set_loop 
19E6   3040           06966         movlw   d'64'
19E7   07C6           06967         addwf   oLED_seq_addr0, F
19E8   3000           06968         movlw   0x00
19E9   3DC7           06969         addwfc  oLED_seq_addr1, F
19EA   3DC8           06970         addwfc  oLED_seq_addr2, F
                      06971         ; should check for overflow but should not ever hit it
19EB   0BA0           06972         decfsz  temp, F
19EC   2???           06973         goto    MAINLOOP3_oLED_set_loop
19ED                  06974 MAINLOOP3_oLED_set_loop_skip    
                      06975         ; randomly pick the seq from this set
19ED   2???           06976         call    _4_CYCLE_LFSR
19EE   393C           06977         andlw   0x3C                            ; this is a combined mask to 0-15 and shift left 2 for t
                            he 4 byte alignment of the regs
19EF   07C6           06978         addwf   oLED_seq_addr0, F
19F0   3000           06979         movlw   0x00
19F1   3DC7           06980         addwfc  oLED_seq_addr1, F
19F2   3DC8           06981         addwfc  oLED_seq_addr2, F
                      06982                         
                      06983         ; read out the address and number of frames in this seq
19F3   129A           06984         bcf             LATC, 5                         ; SPI EEPROM CS pin
19F4   3003           06985         movlw   0x03                            ; Read at 24 bit address command
19F5   2???           06986         call    _4_SEND_RCV_W_SPI       
                      06987         ; discard this byte
19F6   0848           06988         movf    oLED_seq_addr2, W
19F7   2???           06989         call    _4_SEND_RCV_W_SPI       
                      06990         ; discard this byte
19F8   0847           06991         movf    oLED_seq_addr1, W
19F9   2???           06992         call    _4_SEND_RCV_W_SPI       
                      06993         ; discard this byte
19FA   0846           06994         movf    oLED_seq_addr0, W
19FB   2???           06995         call    _4_SEND_RCV_W_SPI       
                      06996         ; discard this byte
19FC   30FF           06997         movlw   0xFF
19FD   2???           06998         call    _4_SEND_RCV_W_SPI       
19FE   00C6           06999         movwf   oLED_seq_addr0
19FF   2???           07000         call    _4_SEND_RCV_W_SPI       
1A00   00C7           07001         movwf   oLED_seq_addr1
1A01   2???           07002         call    _4_SEND_RCV_W_SPI       
1A02   00C8           07003         movwf   oLED_seq_addr2
1A03   2???           07004         call    _4_SEND_RCV_W_SPI       
1A04   00C5           07005         movwf   oLED_seq_cnt
1A05   169A           07006         bsf             LATC, 5                         ; SPI EEPROM CS pin     
                      07007         
                      07008         ; load new frame to screen
1A06                  07009 MAINLOOP3_oLED_get_next
                      07010 
1A06   01A1           07011         clrf    temp1
1A07                  07012 MAINLOOP3_oLED_row_loop
                      07013         ; loop though 72 times to read out the row data to a buffer
1A07   3022           07014         movlw   high(start_spi_buffer)
1A08   0085           07015         movwf   FSR0H
1A09   30D0           07016         movlw   low(start_spi_buffer)
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 138


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1A0A   0084           07017         movwf   FSR0L
                      07018         ; send read command + address
1A0B   129A           07019         bcf             LATC, 5                         ; SPI EEPROM CS pin
1A0C   3003           07020         movlw   0x03                            ; Read at 24 bit address command
1A0D   2???           07021         call    _4_SEND_RCV_W_SPI       
                      07022         ; discard this byte
1A0E   0848           07023         movf    oLED_seq_addr2, W
1A0F   2???           07024         call    _4_SEND_RCV_W_SPI       
                      07025         ; discard this byte
1A10   0847           07026         movf    oLED_seq_addr1, W
1A11   2???           07027         call    _4_SEND_RCV_W_SPI       
                      07028         ; discard this byte
1A12   0846           07029         movf    oLED_seq_addr0, W
1A13   2???           07030         call    _4_SEND_RCV_W_SPI       
                      07031         ; discard this byte
1A14   3048           07032         movlw   d'72'
1A15   00A0           07033         movwf   temp
1A16                  07034 MAINLOOP3_oLED_read_row
1A16   2???           07035         call    _4_SEND_RCV_W_SPI       
1A17   001A           07036         movwi   FSR0++
1A18   0BA0           07037         decfsz  temp, F
1A19   2???           07038         goto    MAINLOOP3_oLED_read_row 
1A1A   169A           07039         bsf             LATC, 5                         ; SPI EEPROM CS pin
                      07040         ; update starting address to next block of data
1A1B   3048           07041         movlw   d'72'
1A1C   07C6           07042         addwf   oLED_seq_addr0, F
1A1D   3000           07043         movlw   0x00
1A1E   3DC7           07044         addwfc  oLED_seq_addr1, F
1A1F   3DC8           07045         addwfc  oLED_seq_addr2, F
                      07046 
                      07047         
                      07048         ; loop though 72 times to write out the row data to the oLED
1A20   3022           07049         movlw   high(start_spi_buffer)
1A21   0085           07050         movwf   FSR0H
1A22   30D0           07051         movlw   low(start_spi_buffer)
1A23   0084           07052         movwf   FSR0L
                      07053         ; Address the starting block of pixles to update
1A24   0821           07054         movf    temp1, W                    ; select memory addressing page (0xB0 to 0xB7 valid. B0 is s
                            tripe with lowest corner, B4 is stripe with upper corner of the screen, B5-7 not used)
1A25   00A2           07055         movwf   i2c_off
1A26   301C           07056         movlw   0x1C                            ; starting column
1A27   2???           07057         call    _4_ADDRESS_oLED 
                      07058         ; set on one block of pixles
1A28   161A           07059         bsf             LATC, 4                         ; oLED D/#C pin
1A29   131A           07060         bcf             LATC, 6                         ; oLED CS pin
1A2A   3048           07061         movlw   d'72'
1A2B   00A0           07062         movwf   temp
1A2C                  07063 MAINLOOP3_oLED_write_row
1A2C   0012           07064         moviw   FSR0++
1A2D   2???           07065         call    _4_SEND_RCV_W_SPI
1A2E   0BA0           07066         decfsz  temp, F
1A2F   2???           07067         goto    MAINLOOP3_oLED_write_row        
1A30   171A           07068         bsf             LATC, 6                         ; oLED CS pin   
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 139


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      07069 
1A31   0AA1           07070         incf    temp1, F
1A32   0821           07071         movf    temp1, W
1A33   3A05           07072         xorlw   0x05
1A34   1D03           07073         btfss   STATUS, Z
1A35   2???           07074         goto    MAINLOOP3_oLED_row_loop
                      07075         
                      07076         
                      07077         ; read out the delay value
1A36   129A           07078         bcf             LATC, 5                         ; SPI EEPROM CS pin
1A37   3003           07079         movlw   0x03                            ; Read at 24 bit address command
1A38   2???           07080         call    _4_SEND_RCV_W_SPI       
                      07081         ; discard this byte
1A39   0848           07082         movf    oLED_seq_addr2, W
1A3A   2???           07083         call    _4_SEND_RCV_W_SPI       
                      07084         ; discard this byte
1A3B   0847           07085         movf    oLED_seq_addr1, W
1A3C   2???           07086         call    _4_SEND_RCV_W_SPI       
                      07087         ; discard this byte
1A3D   0846           07088         movf    oLED_seq_addr0, W
1A3E   2???           07089         call    _4_SEND_RCV_W_SPI       
                      07090         ; discard this byte
1A3F   30FF           07091         movlw   0xFF
1A40   2???           07092         call    _4_SEND_RCV_W_SPI       
1A41   00C4           07093         movwf   oLED_dt 
1A42   169A           07094         bsf             LATC, 5                         ; SPI EEPROM CS pin     
1A43   3001           07095         movlw   d'1'
1A44   07C6           07096         addwf   oLED_seq_addr0, F
1A45   3000           07097         movlw   0x00
1A46   3DC7           07098         addwfc  oLED_seq_addr1, F
1A47   3DC8           07099         addwfc  oLED_seq_addr2, F
                      07100                 
                      07101         ; point to the next frame
1A48   03C5           07102         decf    oLED_seq_cnt, F
                      07103                 
                      07104         ; set up the delay timer
                      07105         ;------------------
1A49   0144           07106         movlb   d'4'
                      07107         ;------------------
                      07108         ; stop the timer
1A4A   100E           07109         bcf             T1CON, 0
                      07110         ; clear it
1A4B   018D           07111         clrf    TMR1H
1A4C   018C           07112         clrf    TMR1L
                      07113         ;------------------
1A4D   0140           07114         movlb   d'0'
                      07115         ;------------------
1A4E   01C1           07116         clrf    oLED_phase
                      07117         ; move delay value to the oLED timer
1A4F   0844           07118         movf    oLED_dt, W
1A50   00C2           07119         movwf   oLED_delay
                      07120         ;------------------
1A51   0144           07121         movlb   d'4'
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 140


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      07122         ;------------------
                      07123         ; start timer
1A52   140E           07124         bsf             T1CON, 0
                      07125         ;------------------
1A53   0140           07126         movlb   d'0'
                      07127         ;------------------
                      07128         
                      07129         ; set the MSSP engine back up for I2C 
1A54   2???           07130         call    _4_CFG_I2C
                      07131         
1A55                  07132 MAINLOOP3_oLED_done     
                      07133         
                      07134         
1A55   3188           07135         movlp   0x08
1A56   2???           07136         goto    MAINLOOP3_return
                      07137         
                      07138         ;-----------------------------------------------------------------------------------------------
                            ------------
                      07139         
1A57   0050 0065 0074 07140         de      CODE_VER_STRING
       0065 0072 0020 
       0053 0068 0061 
       0062 0069 006E 
       006F 0020 0032 
       0039 004D 0061 
       0072 0032 0030 
       0032 0032 0020 
       0063 006F 0064 
       0065 0020 0066 
       006F 0072 0020 
       0074 0079 006D 
       006B 0072 0073 
       0020 0043 0079 
       0070 0068 0065 
       0072 0063 006F 
       006E 002
                      07141                         
                      07142         ;### end of program ###
3F8C 37DE 3F9F 1FEF 3F07143         end     
       FE 
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 141


SYMBOL TABLE
  LABEL                             VALUE 

ABDEN                             00000000
ABDOVF                            00000007
ACKDT                             00000005
ACKEN                             00000004
ACKSTAT                           00000006
ACKTIM                            00000007
ADACT                             0000009F
ADACT0                            00000000
ADACT1                            00000001
ADACT2                            00000002
ADACT3                            00000003
ADACT4                            00000004
ADACTPPS                          00001EC3
ADACTPPS0                         00000000
ADACTPPS1                         00000001
ADACTPPS2                         00000002
ADACTPPS3                         00000003
ADACTPPS4                         00000004
ADACTPPS5                         00000005
ADCMD                             00000005
ADCON0                            0000009D
ADCON1                            0000009E
ADCS0                             00000004
ADCS1                             00000005
ADCS2                             00000006
ADDEN                             00000003
ADFM                              00000007
ADFVR0                            00000000
ADFVR1                            00000001
ADIE                              00000000
ADIF                              00000000
ADMSK1                            00000001
ADMSK2                            00000002
ADMSK3                            00000003
ADMSK4                            00000004
ADMSK5                            00000005
ADOEN                             00000002
ADON                              00000000
ADOR                              00000002
ADPREF0                           00000000
ADPREF1                           00000001
ADRES                             0000009B
ADRESH                            0000009C
ADRESH0                           00000000
ADRESH1                           00000001
ADRESH2                           00000002
ADRESH3                           00000003
ADRESH4                           00000004
ADRESH5                           00000005
ADRESH6                           00000006
ADRESH7                           00000007
ADRESL                            0000009B
ADRESL0                           00000000
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 142


SYMBOL TABLE
  LABEL                             VALUE 

ADRESL1                           00000001
ADRESL2                           00000002
ADRESL3                           00000003
ADRESL4                           00000004
ADRESL5                           00000005
ADRESL6                           00000006
ADRESL7                           00000007
ADTIF                             00000001
AHEN                              00000001
ANSA0                             00000000
ANSA1                             00000001
ANSA2                             00000002
ANSA4                             00000004
ANSA5                             00000005
ANSB4                             00000004
ANSB5                             00000005
ANSB6                             00000006
ANSB7                             00000007
ANSC0                             00000000
ANSC1                             00000001
ANSC2                             00000002
ANSC3                             00000003
ANSC4                             00000004
ANSC5                             00000005
ANSC6                             00000006
ANSC7                             00000007
ANSELA                            00001F38
ANSELB                            00001F43
ANSELC                            00001F4E
AS0E                              00000000
AS1E                              00000001
AS2E                              00000002
AS3E                              00000003
AS4E                              00000004
BAUD1CON                          0000011F
BAUD2CON                          00000A1F
BAUDCON                           0000011F
BAUDCON1                          0000011F
BAUDCON2                          00000A1F
BAUDCTL                           0000011F
BAUDCTL1                          0000011F
BAUDCTL2                          00000A1F
BCL1IE                            00000001
BCL1IF                            00000001
BF                                00000000
BODY_bank1                        00000C66
BODY_bank1_off                    00000C3F
BODY_bank_done                    00000C6E
BODY_bank_done_off                00000C48
BODY_bank_skip                    00000C70
BODY_lfsr_loop                    00000C50
BOEN                              00000004
BORCON                            00000811
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 143


SYMBOL TABLE
  LABEL                             VALUE 

BORRDY                            00000000
BRG16                             00000003
BRGH                              00000002
BSR                               00000008
BSR0                              00000000
BSR1                              00000001
BSR2                              00000002
BSR3                              00000003
BSR4                              00000004
BSR5                              00000005
BSR_SHAD                          00001FE6
C                                 00000000
C1EN                              00000007
C1HYS                             00000001
C1IE                              00000000
C1IF                              00000000
C1INTN                            00000000
C1INTP                            00000001
C1NCH0                            00000000
C1NCH1                            00000001
C1NCH2                            00000002
C1OUT_CM1CON0                     00000006
C1OUT_CMOUT                       00000000
C1OUT_CMSTAT                      00000000
C1PCH0                            00000000
C1PCH1                            00000001
C1PCH2                            00000002
C1POL                             00000004
C1SYNC                            00000000
C2EN                              00000007
C2HYS                             00000001
C2IE                              00000001
C2IF                              00000001
C2INTN                            00000000
C2INTP                            00000001
C2NCH0                            00000000
C2NCH1                            00000001
C2NCH2                            00000002
C2OUT_CM2CON0                     00000006
C2OUT_CMOUT                       00000001
C2OUT_CMSTAT                      00000001
C2PCH0                            00000000
C2PCH1                            00000001
C2PCH2                            00000002
C2POL                             00000004
C2SYNC                            00000000
CCP1CAP                           0000030F
CCP1CON                           0000030E
CCP1CTS0                          00000000
CCP1CTS1                          00000001
CCP1CTS2                          00000002
CCP1EN                            00000007
CCP1FMT                           00000004
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 144


SYMBOL TABLE
  LABEL                             VALUE 

CCP1IE                            00000000
CCP1IF                            00000000
CCP1MD                            00000000
CCP1MODE0                         00000000
CCP1MODE1                         00000001
CCP1MODE2                         00000002
CCP1MODE3                         00000003
CCP1OUT                           00000005
CCP1PPS                           00001EA1
CCP1PPS0                          00000000
CCP1PPS1                          00000001
CCP1PPS2                          00000002
CCP1PPS3                          00000003
CCP1PPS4                          00000004
CCP1PPS5                          00000005
CCP2CAP                           00000313
CCP2CON                           00000312
CCP2CTS0                          00000000
CCP2CTS1                          00000001
CCP2CTS2                          00000002
CCP2EN                            00000007
CCP2FMT                           00000004
CCP2IE                            00000001
CCP2IF                            00000001
CCP2MD                            00000001
CCP2MODE0                         00000000
CCP2MODE1                         00000001
CCP2MODE2                         00000002
CCP2MODE3                         00000003
CCP2OUT                           00000005
CCP2PPS                           00001EA2
CCP2PPS0                          00000000
CCP2PPS1                          00000001
CCP2PPS2                          00000002
CCP2PPS3                          00000003
CCP2PPS4                          00000004
CCP2PPS5                          00000005
CCPR1                             0000030C
CCPR1H                            0000030D
CCPR1L                            0000030C
CCPR2                             00000310
CCPR2H                            00000311
CCPR2L                            00000310
CDAFVR0                           00000002
CDAFVR1                           00000003
CDIV0                             00000000
CDIV1                             00000001
CDIV2                             00000002
CDIV3                             00000003
CHECK_SPI_FAIL                    0000063B
CHECK_SPI_FAIL_DELAY1             00000643
CHECK_SPI_FAIL_DELAY2             0000064E
CHECK_SPI_FAIL_INIT               00000631
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 145


SYMBOL TABLE
  LABEL                             VALUE 

CHS0                              00000002
CHS1                              00000003
CHS2                              00000004
CHS3                              00000005
CHS4                              00000006
CHS5                              00000007
CKE                               00000006
CKP                               00000004
CKPOL                             00000006
CKPS0                             00000004
CKPS1                             00000005
CKPS2                             00000006
CKSYNC                            00000005
CLC1CON                           00001E10
CLC1GLS0                          00001E16
CLC1GLS1                          00001E17
CLC1GLS2                          00001E18
CLC1GLS3                          00001E19
CLC1IE                            00000004
CLC1IF                            00000004
CLC1MD                            00000001
CLC1POL                           00001E11
CLC1SEL0                          00001E12
CLC1SEL1                          00001E13
CLC1SEL2                          00001E14
CLC1SEL3                          00001E15
CLC2CON                           00001E1A
CLC2GLS0                          00001E20
CLC2GLS1                          00001E21
CLC2GLS2                          00001E22
CLC2GLS3                          00001E23
CLC2IE                            00000005
CLC2IF                            00000005
CLC2MD                            00000002
CLC2POL                           00001E1B
CLC2SEL0                          00001E1C
CLC2SEL1                          00001E1D
CLC2SEL2                          00001E1E
CLC2SEL3                          00001E1F
CLC3CON                           00001E24
CLC3GLS0                          00001E2A
CLC3GLS1                          00001E2B
CLC3GLS2                          00001E2C
CLC3GLS3                          00001E2D
CLC3IE                            00000006
CLC3IF                            00000006
CLC3MD                            00000003
CLC3POL                           00001E25
CLC3SEL0                          00001E26
CLC3SEL1                          00001E27
CLC3SEL2                          00001E28
CLC3SEL3                          00001E29
CLC4CON                           00001E2E
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 146


SYMBOL TABLE
  LABEL                             VALUE 

CLC4GLS0                          00001E34
CLC4GLS1                          00001E35
CLC4GLS2                          00001E36
CLC4GLS3                          00001E37
CLC4IE                            00000007
CLC4IF                            00000007
CLC4MD                            00000004
CLC4POL                           00001E2F
CLC4SEL0                          00001E30
CLC4SEL1                          00001E31
CLC4SEL2                          00001E32
CLC4SEL3                          00001E33
CLCDATA                           00001E0F
CLCIN0PPS                         00001EBB
CLCIN0PPS0                        00000000
CLCIN0PPS1                        00000001
CLCIN0PPS2                        00000002
CLCIN0PPS3                        00000003
CLCIN0PPS4                        00000004
CLCIN0PPS5                        00000005
CLCIN1PPS                         00001EBC
CLCIN1PPS0                        00000000
CLCIN1PPS1                        00000001
CLCIN1PPS2                        00000002
CLCIN1PPS3                        00000003
CLCIN1PPS4                        00000004
CLCIN1PPS5                        00000005
CLCIN2PPS                         00001EBD
CLCIN2PPS0                        00000000
CLCIN2PPS1                        00000001
CLCIN2PPS2                        00000002
CLCIN2PPS3                        00000003
CLCIN2PPS4                        00000004
CLCIN2PPS5                        00000005
CLCIN3PPS                         00001EBE
CLCIN3PPS0                        00000000
CLCIN3PPS1                        00000001
CLCIN3PPS2                        00000002
CLCIN3PPS3                        00000003
CLCIN3PPS4                        00000004
CLCIN3PPS5                        00000005
CLKRCLK                           00000896
CLKRCLK0                          00000000
CLKRCLK1                          00000001
CLKRCLK2                          00000002
CLKRCLK3                          00000003
CLKRCON                           00000895
CLKRDC0                           00000003
CLKRDC1                           00000004
CLKRDIV0                          00000000
CLKRDIV1                          00000001
CLKRDIV2                          00000002
CLKREN                            00000007
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 147


SYMBOL TABLE
  LABEL                             VALUE 

CLKRMD                            00000001
CM1CON0                           00000990
CM1CON1                           00000991
CM1NCH                            00000992
CM1PCH                            00000993
CM2CON0                           00000994
CM2CON1                           00000995
CM2NCH                            00000996
CM2PCH                            00000997
CMOUT                             0000098F
CMP1MD                            00000001
CMP2MD                            00000002
CMSTAT                            0000098F
CODE_VER_STRING                   "Peter Shabino 29Mar2022 code for tymkrs Cyphercon 2020 badge V5 www.wire2wire.org!"
COSC0                             00000004
COSC1                             00000005
COSC2                             00000006
CPUDOZE                           0000088C
CREN                              00000004
CS                                00000000
CS0                               00000000
CS1                               00000001
CS2                               00000002
CS3                               00000003
CSRC                              00000007
CSWHOLD                           00000007
CSWIE                             00000006
CSWIF                             00000006
CTS0                              00000000
CTS1                              00000001
CTS2                              00000002
CWG1AS0                           00000612
CWG1AS1                           00000613
CWG1CLKCON                        0000060C
CWG1CON0                          00000610
CWG1CON1                          00000611
CWG1CS                            00000000
CWG1DAT                           0000060D
CWG1DAT0                          00000000
CWG1DAT1                          00000001
CWG1DAT2                          00000002
CWG1DAT3                          00000003
CWG1DBF                           0000060F
CWG1DBF0                          00000000
CWG1DBF1                          00000001
CWG1DBF2                          00000002
CWG1DBF3                          00000003
CWG1DBF4                          00000004
CWG1DBF5                          00000005
CWG1DBR                           0000060E
CWG1DBR0                          00000000
CWG1DBR1                          00000001
CWG1DBR2                          00000002
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 148


SYMBOL TABLE
  LABEL                             VALUE 

CWG1DBR3                          00000003
CWG1DBR4                          00000004
CWG1DBR5                          00000005
CWG1EN                            00000007
CWG1IE                            00000000
CWG1IF                            00000000
CWG1IN                            00000005
CWG1LD                            00000006
CWG1LSAC0                         00000002
CWG1LSAC1                         00000003
CWG1LSBD0                         00000004
CWG1LSBD1                         00000005
CWG1MD                            00000000
CWG1MODE0                         00000000
CWG1MODE1                         00000001
CWG1MODE2                         00000002
CWG1OVRA                          00000004
CWG1OVRB                          00000005
CWG1OVRC                          00000006
CWG1OVRD                          00000007
CWG1POLA                          00000000
CWG1POLB                          00000001
CWG1POLC                          00000002
CWG1POLD                          00000003
CWG1PPS                           00001EB1
CWG1PPS0                          00000000
CWG1PPS1                          00000001
CWG1PPS2                          00000002
CWG1PPS3                          00000003
CWG1PPS4                          00000004
CWG1PPS5                          00000005
CWG1REN                           00000006
CWG1SHUTDOWN                      00000007
CWG1STR                           00000614
CWG1STRA                          00000000
CWG1STRB                          00000001
CWG1STRC                          00000002
CWG1STRD                          00000003
D1N                               00000000
D1S0                              00000000
D1S1                              00000001
D1S2                              00000002
D1S3                              00000003
D1S4                              00000004
D1S5                              00000005
D1T                               00000001
D2N                               00000002
D2S0                              00000000
D2S1                              00000001
D2S2                              00000002
D2S3                              00000003
D2S4                              00000004
D2S5                              00000005
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 149


SYMBOL TABLE
  LABEL                             VALUE 

D2T                               00000003
D3N                               00000004
D3S0                              00000000
D3S1                              00000001
D3S2                              00000002
D3S3                              00000003
D3S4                              00000004
D3S5                              00000005
D3T                               00000005
D4N                               00000006
D4S0                              00000000
D4S1                              00000001
D4S2                              00000002
D4S3                              00000003
D4S4                              00000004
D4S5                              00000005
D4T                               00000007
DAC1CON0                          0000090E
DAC1CON1                          0000090F
DAC1EN                            00000007
DAC1MD                            00000006
DAC1NSS                           00000000
DAC1OE1                           00000005
DAC1OE2                           00000004
DAC1PSS0                          00000002
DAC1PSS1                          00000003
DAC1R0                            00000000
DAC1R1                            00000001
DAC1R2                            00000002
DAC1R3                            00000003
DAC1R4                            00000004
DATA_ADDRESS                      00000005
DBF0                              00000000
DBF1                              00000001
DBF2                              00000002
DBF3                              00000003
DBF4                              00000004
DBF5                              00000005
DBR0                              00000000
DBR1                              00000001
DBR2                              00000002
DBR3                              00000003
DBR4                              00000004
DBR5                              00000005
DC                                00000001
DC0                               00000006
DC1                               00000007
DC2                               00000000
DC3                               00000001
DC4                               00000002
DC5                               00000003
DC6                               00000004
DC7                               00000005
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 150


SYMBOL TABLE
  LABEL                             VALUE 

DC8                               00000006
DC9                               00000007
DDS1MD                            00000007
DECRYPT_PACKET                    00001004
DECRYPT_PACKET_cycle_key_i        00001024
DECRYPT_PACKET_cycle_key_j        0000102D
DECRYPT_PACKET_cycle_key_j2       0000105B
DECRYPT_PACKET_cycle_key_shift    0000106A
DECRYPT_PACKET_cycle_key_shift2   00001084
DECRYPT_PACKET_decrypt_i          00001099
DECRYPT_PACKET_decrypt_j          0000109E
DECRYPT_PACKET_decrypt_j2         000010C2
DECRYPT_PACKET_decrypt_j3         0000111E
DECRYPT_PACKET_decrypt_j4         00001137
DECRYPT_PACKET_decrypt_j5         000011A8
DECRYPT_PACKET_decrypt_no_carry   0000114A
DECRYPT_PACKET_decrypt_no_carry2  0000115A
DECRYPT_PACKET_decrypt_no_carry3  00001177
DECRYPT_PACKET_decrypt_no_carry4  00001187
DECRYPT_PACKET_decrypt_shift      000010D1
DECRYPT_PACKET_decrypt_shift2     000010E6
DECRYPT_PACKET_decrypt_shift3     000010FE
DECRYPT_PACKET_decrypt_shift4     00001111
DECRYPT_PACKET_gen_chksum         00001250
DECRYPT_PACKET_key_move_loop      0000101F
DECRYPT_PACKET_swap_packet        00001011
DECRYPT_PACKET_validate_chksum    000011E6
DHEN                              00000000
DOE                               00000004
DOZE0                             00000000
DOZE1                             00000001
DOZE2                             00000002
DOZEN                             00000006
D_A                               00000005
D_NOT_A                           00000005
EN                                00000007
ENCRYPT_PACKET                    00001257
ENCRYPT_PACKET_i                  00001260
ENCRYPT_PACKET_j                  00001271
ENCRYPT_PACKET_j2                 000012D0
ENCRYPT_PACKET_shift              000012DE
ENCRYPT_PACKET_shift2             000012FB
ENCRYPT_PACKET_shift3             00001316
ENCRYPT_PACKET_shift4             0000132E
EXTOEN                            00000007
EXTOR                             00000007
F                                 00000001
FERR                              00000002
FMT                               00000004
FREE                              00000004
FSR0                              00000004
FSR0H                             00000005
FSR0H_SHAD                        00001FE9
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 151


SYMBOL TABLE
  LABEL                             VALUE 

FSR0L                             00000004
FSR0L_SHAD                        00001FE8
FSR0_SHAD                         00001FE8
FSR1                              00000006
FSR1H                             00000007
FSR1H_SHAD                        00001FEB
FSR1L                             00000006
FSR1L_SHAD                        00001FEA
FSR1_SHAD                         00001FEA
FVRCON                            0000090C
FVREN                             00000007
FVRMD                             00000006
FVRRDY                            00000006
G1EN                              00000007
G1POL                             00000000
G2POL                             00000001
G3POL                             00000002
G4D1N                             00000000
G4D1T                             00000001
G4D2N                             00000002
G4D2T                             00000003
G4D3N                             00000004
G4D3T                             00000005
G4D4N                             00000006
G4D4T                             00000007
G4POL                             00000003
GCEN                              00000007
GE                                00000007
GGO_NOT_DONE                      00000003
GIE                               00000007
GOnDONE                           00000001
GPOL                              00000006
GSPM                              00000004
GSS0                              00000000
GSS1                              00000001
GSS2                              00000002
GSS3                              00000003
GSS4                              00000004
GTM                               00000005
GVAL                              00000002
HFFRQ0                            00000000
HFFRQ1                            00000001
HFFRQ2                            00000002
HFOEN                             00000006
HFOR                              00000006
HFTUN0                            00000000
HFTUN1                            00000001
HFTUN2                            00000002
HFTUN3                            00000003
HFTUN4                            00000004
HFTUN5                            00000005
HYS                               00000001
Hyr0nH                            0000014C
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 152


SYMBOL TABLE
  LABEL                             VALUE 

Hyr0nL                            0000014D
Hyr0n_animation                   0000000D
I2C_DAT                           00000005
I2C_READ                          00000002
I2C_START                         00000003
I2C_STOP                          00000004
IDLEN                             00000007
IN                                00000005
INDF0                             00000000
INDF1                             00000001
INIT_update_loop1                 00000614
INIT_update_loop2                 00000620
INLVLA                            00001F3C
INLVLA0                           00000000
INLVLA1                           00000001
INLVLA2                           00000002
INLVLA3                           00000003
INLVLA4                           00000004
INLVLA5                           00000005
INLVLB                            00001F47
INLVLB4                           00000004
INLVLB5                           00000005
INLVLB6                           00000006
INLVLB7                           00000007
INLVLC                            00001F52
INLVLC0                           00000000
INLVLC1                           00000001
INLVLC2                           00000002
INLVLC3                           00000003
INLVLC4                           00000004
INLVLC5                           00000005
INLVLC6                           00000006
INLVLC7                           00000007
INTCON                            0000000B
INTE                              00000000
INTEDG                            00000000
INTF                              00000000
INTN_CLC1CON                      00000003
INTN_CLC2CON                      00000003
INTN_CLC3CON                      00000003
INTN_CLC4CON                      00000003
INTN_CM1CON1                      00000000
INTN_CM2CON1                      00000000
INTPPS                            00001E90
INTPPS0                           00000000
INTPPS1                           00000001
INTPPS2                           00000002
INTPPS3                           00000003
INTPPS4                           00000004
INTPPS5                           00000005
INTP_CLC1CON                      00000004
INTP_CLC2CON                      00000004
INTP_CLC3CON                      00000004
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 153


SYMBOL TABLE
  LABEL                             VALUE 

INTP_CLC4CON                      00000004
INTP_CM1CON1                      00000001
INTP_CM2CON1                      00000001
IOCAF                             00001F3F
IOCAF0                            00000000
IOCAF1                            00000001
IOCAF2                            00000002
IOCAF3                            00000003
IOCAF4                            00000004
IOCAF5                            00000005
IOCAN                             00001F3E
IOCAN0                            00000000
IOCAN1                            00000001
IOCAN2                            00000002
IOCAN3                            00000003
IOCAN4                            00000004
IOCAN5                            00000005
IOCAP                             00001F3D
IOCAP0                            00000000
IOCAP1                            00000001
IOCAP2                            00000002
IOCAP3                            00000003
IOCAP4                            00000004
IOCAP5                            00000005
IOCBF                             00001F4A
IOCBF4                            00000004
IOCBF5                            00000005
IOCBF6                            00000006
IOCBF7                            00000007
IOCBN                             00001F49
IOCBN4                            00000004
IOCBN5                            00000005
IOCBN6                            00000006
IOCBN7                            00000007
IOCBP                             00001F48
IOCBP4                            00000004
IOCBP5                            00000005
IOCBP6                            00000006
IOCBP7                            00000007
IOCCF                             00001F55
IOCCF0                            00000000
IOCCF1                            00000001
IOCCF2                            00000002
IOCCF3                            00000003
IOCCF4                            00000004
IOCCF5                            00000005
IOCCF6                            00000006
IOCCF7                            00000007
IOCCN                             00001F54
IOCCN0                            00000000
IOCCN1                            00000001
IOCCN2                            00000002
IOCCN3                            00000003
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 154


SYMBOL TABLE
  LABEL                             VALUE 

IOCCN4                            00000004
IOCCN5                            00000005
IOCCN6                            00000006
IOCCN7                            00000007
IOCCP                             00001F53
IOCCP0                            00000000
IOCCP1                            00000001
IOCCP2                            00000002
IOCCP3                            00000003
IOCCP4                            00000004
IOCCP5                            00000005
IOCCP6                            00000006
IOCCP7                            00000007
IOCIE                             00000004
IOCIF                             00000004
IOCMD                             00000000
IRQ_RX1_BADGE_CHK_DONE            000003E4
IRQ_RX1_FOUNDER                   000003B2
IRQ_RX1_FOUNDER_CHK               00000336
IRQ_RX1_FOUNDER_QUEST1            00000250
IRQ_RX1_FOUNDER_QUEST2            0000025A
IRQ_RX1_ID_UPDATE_DONE            00000319
IRQ_RX1_NECROLLAMACON             00000281
IRQ_RX1_NECROLLAMACON_CHK         0000035E
IRQ_RX1_NECRO_CHK                 00000277
IRQ_RX1_NOT_PINK_EYE              000002F7
IRQ_RX1_NOT_SICK                  0000032C
IRQ_RX1_OLD_ID                    0000031A
IRQ_RX1_OUTHOUSE                  000003CB
IRQ_RX1_OUTHOUSE_CHK              0000034A
IRQ_RX1_SHIFT_TEMP                000002D8
IRQ_RX1_SNAKE                     000003D6
IRQ_RX1_SNAKE_CHK                 00000354
IRQ_RX1_SPEAKER                   0000039A
IRQ_RX1_VENDO                     00000370
IRQ_RX1_VENDOR                    000003B3
IRQ_RX1_VENDOR_CHK                00000340
IRQ_RX1_VENDO_CHK                 00000368
IRQ_RX1_VENDO_tx_busy             00000398
IRQ_RX1_bad                       000003E4
IRQ_RX1_clear_loop                00000139
IRQ_RX1_ignore_alive              0000029E
IRQ_RX1_ignore_founder            0000026D
IRQ_RX1_ignore_necro              0000029E
IRQ_RX1_ignore_ns_dead_asleep     000003E4
IRQ_RX1_ignore_quest              0000026C
IRQ_RX1_no_FERR                   0000003E
IRQ_RX1_no_OERR                   00000043
IRQ_RX1_no_clear                  00000144
IRQ_RX1_no_con_start              000001A0
IRQ_RX1_not_HBDH                  00000157
IRQ_RX1_not_Hyr0n                 0000018B
IRQ_RX1_not_Hyr0n_norm            00000168
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 155


SYMBOL TABLE
  LABEL                             VALUE 

IRQ_RX1_not_feedme_norm           000003BE
IRQ_RX1_not_mine                  000002BC
IRQ_RX1_not_mine_norm             000002B5
IRQ_RX1_not_type1                 000001B7
IRQ_RX1_not_type3                 000001BE
IRQ_RX1_not_type6                 000001D6
IRQ_RX1_not_type9                 00000205
IRQ_RX1_not_typeA                 0000021D
IRQ_RX1_not_typeB                 00000240
IRQ_RX1_not_vendo                 00000240
IRQ_RX1_sq1                       0000004C
IRQ_RX1_sq10                      000000F5
IRQ_RX1_sq10_skip                 00000109
IRQ_RX1_sq11                      0000010A
IRQ_RX1_sq2                       00000056
IRQ_RX1_sq3                       00000060
IRQ_RX1_sq4                       0000006A
IRQ_RX1_sq5                       00000074
IRQ_RX1_sq6                       00000080
IRQ_RX1_sq7                       00000089
IRQ_RX1_sq8                       000000DB
IRQ_RX1_sq9                       000000E4
IRQ_RX1_type0_len                 00000096
IRQ_RX1_type1_len                 0000009C
IRQ_RX1_type3_len                 000000A3
IRQ_RX1_type5_len                 000000AA
IRQ_RX1_type6_len                 000000B1
IRQ_RX1_type7_len                 000000B8
IRQ_RX1_type9_len                 000000BF
IRQ_RX1_typeA_len                 000000C6
IRQ_RX1_typeB_len                 000000CD
IRQ_RX1_typeC_len                 000000D3
IRQ_RX1_typeDE_len                000000DA
IRQ_TMR0_skip_game_tick           00000019
IRQ_TMR0_sub_down                 0000001F
IRQ_TX1_delay                     000003F6
IRQ_TX1_done                      000004DE
IRQ_TX1_no_delay                  000003FA
IRQ_TX1_sq1                       000003FF
IRQ_TX1_sq10                      00000459
IRQ_TX1_sq10_type1_nctl           000004B1
IRQ_TX1_sq10_type1_nfood          00000476
IRQ_TX1_sq10_type1_nonceh         000004A4
IRQ_TX1_sq10_type1_npoo           00000481
IRQ_TX1_sq10_type1_nstate         0000048C
IRQ_TX1_sq10_type1_nstate1        00000497
IRQ_TX1_sq10_type2                0000046B
IRQ_TX1_sq10_type4                000004BE
IRQ_TX1_sq10_type8                000004CD
IRQ_TX1_sq11                      000004D7
IRQ_TX1_sq2                       00000407
IRQ_TX1_sq3                       0000040F
IRQ_TX1_sq4                       00000417
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 156


SYMBOL TABLE
  LABEL                             VALUE 

IRQ_TX1_sq5                       0000041F
IRQ_TX1_sq6                       00000429
IRQ_TX1_sq7                       0000043D
IRQ_TX1_sq8                       00000447
IRQ_TX1_sq9                       00000450
IRQ_not_RX1                       000003E6
IRQ_not_TMR0                      00000023
IRQ_not_TMR1                      00000036
IRQ_not_TMR1_egg                  00000036
IRQ_not_TMR1_oLED                 00000032
IRQ_not_TX1                       000004E0
IR_PULSE_WIDTH                    00000015
LAST_PRE_Hyr0n_animation          0000000C
LATA                              00000018
LATA0                             00000000
LATA1                             00000001
LATA2                             00000002
LATA4                             00000004
LATA5                             00000005
LATB                              00000019
LATB4                             00000004
LATB5                             00000005
LATB6                             00000006
LATB7                             00000007
LATC                              0000001A
LATC0                             00000000
LATC1                             00000001
LATC2                             00000002
LATC3                             00000003
LATC4                             00000004
LATC5                             00000005
LATC6                             00000006
LATC7                             00000007
LC1D1S0                           00000000
LC1D1S1                           00000001
LC1D1S2                           00000002
LC1D1S3                           00000003
LC1D1S4                           00000004
LC1D1S5                           00000005
LC1D2S0                           00000000
LC1D2S1                           00000001
LC1D2S2                           00000002
LC1D2S3                           00000003
LC1D2S4                           00000004
LC1D2S5                           00000005
LC1D3S0                           00000000
LC1D3S1                           00000001
LC1D3S2                           00000002
LC1D3S3                           00000003
LC1D3S4                           00000004
LC1D3S5                           00000005
LC1D4S0                           00000000
LC1D4S1                           00000001
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 157


SYMBOL TABLE
  LABEL                             VALUE 

LC1D4S2                           00000002
LC1D4S3                           00000003
LC1D4S4                           00000004
LC1D4S5                           00000005
LC1EN                             00000007
LC1G1D1N                          00000000
LC1G1D1T                          00000001
LC1G1D2N                          00000002
LC1G1D2T                          00000003
LC1G1D3N                          00000004
LC1G1D3T                          00000005
LC1G1D4N                          00000006
LC1G1D4T                          00000007
LC1G1POL                          00000000
LC1G2D1N                          00000000
LC1G2D1T                          00000001
LC1G2D2N                          00000002
LC1G2D2T                          00000003
LC1G2D3N                          00000004
LC1G2D3T                          00000005
LC1G2D4N                          00000006
LC1G2D4T                          00000007
LC1G2POL                          00000001
LC1G3D1N                          00000000
LC1G3D1T                          00000001
LC1G3D2N                          00000002
LC1G3D2T                          00000003
LC1G3D3N                          00000004
LC1G3D3T                          00000005
LC1G3D4N                          00000006
LC1G3D4T                          00000007
LC1G3POL                          00000002
LC1G4D1N                          00000000
LC1G4D1T                          00000001
LC1G4D2N                          00000002
LC1G4D2T                          00000003
LC1G4D3N                          00000004
LC1G4D3T                          00000005
LC1G4D4N                          00000006
LC1G4D4T                          00000007
LC1G4POL                          00000003
LC1INTN                           00000003
LC1INTP                           00000004
LC1MODE0                          00000000
LC1MODE1                          00000001
LC1MODE2                          00000002
LC1OUT                            00000005
LC1POL                            00000007
LC2D1S0                           00000000
LC2D1S1                           00000001
LC2D1S2                           00000002
LC2D1S3                           00000003
LC2D1S4                           00000004
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 158


SYMBOL TABLE
  LABEL                             VALUE 

LC2D1S5                           00000005
LC2D2S0                           00000000
LC2D2S1                           00000001
LC2D2S2                           00000002
LC2D2S3                           00000003
LC2D2S4                           00000004
LC2D2S5                           00000005
LC2D3S0                           00000000
LC2D3S1                           00000001
LC2D3S2                           00000002
LC2D3S3                           00000003
LC2D3S4                           00000004
LC2D3S5                           00000005
LC2D4S0                           00000000
LC2D4S1                           00000001
LC2D4S2                           00000002
LC2D4S3                           00000003
LC2D4S4                           00000004
LC2D4S5                           00000005
LC2EN                             00000007
LC2G1D1N                          00000000
LC2G1D1T                          00000001
LC2G1D2N                          00000002
LC2G1D2T                          00000003
LC2G1D3N                          00000004
LC2G1D3T                          00000005
LC2G1D4N                          00000006
LC2G1D4T                          00000007
LC2G1POL                          00000000
LC2G2D1N                          00000000
LC2G2D1T                          00000001
LC2G2D2N                          00000002
LC2G2D2T                          00000003
LC2G2D3N                          00000004
LC2G2D3T                          00000005
LC2G2D4N                          00000006
LC2G2D4T                          00000007
LC2G2POL                          00000001
LC2G3D1N                          00000000
LC2G3D1T                          00000001
LC2G3D2N                          00000002
LC2G3D2T                          00000003
LC2G3D3N                          00000004
LC2G3D3T                          00000005
LC2G3D4N                          00000006
LC2G3D4T                          00000007
LC2G3POL                          00000002
LC2G4D1N                          00000000
LC2G4D1T                          00000001
LC2G4D2N                          00000002
LC2G4D2T                          00000003
LC2G4D3N                          00000004
LC2G4D3T                          00000005
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 159


SYMBOL TABLE
  LABEL                             VALUE 

LC2G4D4N                          00000006
LC2G4D4T                          00000007
LC2G4POL                          00000003
LC2INTN                           00000003
LC2INTP                           00000004
LC2MODE0                          00000000
LC2MODE1                          00000001
LC2MODE2                          00000002
LC2OUT                            00000005
LC2POL                            00000007
LC3D1S0                           00000000
LC3D1S1                           00000001
LC3D1S2                           00000002
LC3D1S3                           00000003
LC3D1S4                           00000004
LC3D1S5                           00000005
LC3D2S0                           00000000
LC3D2S1                           00000001
LC3D2S2                           00000002
LC3D2S3                           00000003
LC3D2S4                           00000004
LC3D2S5                           00000005
LC3D3S0                           00000000
LC3D3S1                           00000001
LC3D3S2                           00000002
LC3D3S3                           00000003
LC3D3S4                           00000004
LC3D3S5                           00000005
LC3D4S0                           00000000
LC3D4S1                           00000001
LC3D4S2                           00000002
LC3D4S3                           00000003
LC3D4S4                           00000004
LC3D4S5                           00000005
LC3EN                             00000007
LC3G1D1N                          00000000
LC3G1D1T                          00000001
LC3G1D2N                          00000002
LC3G1D2T                          00000003
LC3G1D3N                          00000004
LC3G1D3T                          00000005
LC3G1D4N                          00000006
LC3G1D4T                          00000007
LC3G1POL                          00000000
LC3G2D1N                          00000000
LC3G2D1T                          00000001
LC3G2D2N                          00000002
LC3G2D2T                          00000003
LC3G2D3N                          00000004
LC3G2D3T                          00000005
LC3G2D4N                          00000006
LC3G2D4T                          00000007
LC3G2POL                          00000001
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 160


SYMBOL TABLE
  LABEL                             VALUE 

LC3G3D1N                          00000000
LC3G3D1T                          00000001
LC3G3D2N                          00000002
LC3G3D2T                          00000003
LC3G3D3N                          00000004
LC3G3D3T                          00000005
LC3G3D4N                          00000006
LC3G3D4T                          00000007
LC3G3POL                          00000002
LC3G4D1N                          00000000
LC3G4D1T                          00000001
LC3G4D2N                          00000002
LC3G4D2T                          00000003
LC3G4D3N                          00000004
LC3G4D3T                          00000005
LC3G4D4N                          00000006
LC3G4D4T                          00000007
LC3G4POL                          00000003
LC3INTN                           00000003
LC3INTP                           00000004
LC3MODE0                          00000000
LC3MODE1                          00000001
LC3MODE2                          00000002
LC3OUT                            00000005
LC3POL                            00000007
LC4D1S0                           00000000
LC4D1S1                           00000001
LC4D1S2                           00000002
LC4D1S3                           00000003
LC4D1S4                           00000004
LC4D1S5                           00000005
LC4D2S0                           00000000
LC4D2S1                           00000001
LC4D2S2                           00000002
LC4D2S3                           00000003
LC4D2S4                           00000004
LC4D2S5                           00000005
LC4D3S0                           00000000
LC4D3S1                           00000001
LC4D3S2                           00000002
LC4D3S3                           00000003
LC4D3S4                           00000004
LC4D3S5                           00000005
LC4D4S0                           00000000
LC4D4S1                           00000001
LC4D4S2                           00000002
LC4D4S3                           00000003
LC4D4S4                           00000004
LC4D4S5                           00000005
LC4EN                             00000007
LC4G1D1N                          00000000
LC4G1D1T                          00000001
LC4G1D2N                          00000002
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 161


SYMBOL TABLE
  LABEL                             VALUE 

LC4G1D2T                          00000003
LC4G1D3N                          00000004
LC4G1D3T                          00000005
LC4G1D4N                          00000006
LC4G1D4T                          00000007
LC4G1POL                          00000000
LC4G2D1N                          00000000
LC4G2D1T                          00000001
LC4G2D2N                          00000002
LC4G2D2T                          00000003
LC4G2D3N                          00000004
LC4G2D3T                          00000005
LC4G2D4N                          00000006
LC4G2D4T                          00000007
LC4G2POL                          00000001
LC4G3D1N                          00000000
LC4G3D1T                          00000001
LC4G3D2N                          00000002
LC4G3D2T                          00000003
LC4G3D3N                          00000004
LC4G3D3T                          00000005
LC4G3D4N                          00000006
LC4G3D4T                          00000007
LC4G3POL                          00000002
LC4G4D1N                          00000000
LC4G4D1T                          00000001
LC4G4D2N                          00000002
LC4G4D2T                          00000003
LC4G4D3N                          00000004
LC4G4D3T                          00000005
LC4G4D4N                          00000006
LC4G4D4T                          00000007
LC4G4POL                          00000003
LC4INTN                           00000003
LC4INTP                           00000004
LC4MODE0                          00000000
LC4MODE1                          00000001
LC4MODE2                          00000002
LC4OUT                            00000005
LC4POL                            00000007
LD                                00000006
LED_SELFTEST                      00000A60
LED_SELFTEST_DELAY1               00000A6A
LED_SELFTEST_DELAY2               00000A84
LED_SELFTEST_DONE                 0000062D
LED_SELFTEST_LOOP1                00000A61
LED_SELFTEST_LOOP2                00000A7B
LFOEN                             00000004
LFOR                              00000004
LFSR_0                            00000032
LFSR_1                            00000033
LFSR_2                            00000034
LFSR_3                            00000035
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 162


SYMBOL TABLE
  LABEL                             VALUE 

LFSR_count                        00000036
LOGO_SPEED                        000002FF
LOGO_down_white                   00000B67
LOGO_green_blink_on               00000B57
LOGO_load_leds                    00000BF7
LOGO_not_quest                    00000B6F
LOGO_not_quest_con_on             00000B7B
LOGO_not_quest_update             00000B8B
LOGO_not_seq0                     00000B93
LOGO_not_seq1                     00000B9C
LOGO_not_seq2                     00000BA5
LOGO_not_seq3                     00000BAE
LOGO_not_seq4                     00000BB7
LOGO_not_seq5                     00000BC0
LOGO_not_seq6                     00000BC9
LOGO_not_seq7                     00000BD2
LOGO_not_seq8                     00000BDB
LOGO_not_seq9                     00000BE4
LOGO_not_seqA                     00000BED
LOGO_not_seqB                     00000BF6
LOGO_quest                        00000B5B
LOGO_quest_done                   00000B4C
LOGO_skip_white                   00000B6E
LOGO_update_done                  00000C0D
LOGO_update_loop1                 00000BFE
LSAC0                             00000002
LSAC1                             00000003
LSBD0                             00000004
LSBD1                             00000005
LWLO                              00000005
MAINLOOP                          00000655
MAINLOOP2                         00000ADE
MAINLOOP2_DEEP_SLEEP              00000DA7
MAINLOOP2_active                  00000D45
MAINLOOP2_active_sick             00000D32
MAINLOOP2_dead_led_skip           00000CC0
MAINLOOP2_die                     00000D4C
MAINLOOP2_egg_down                00000B22
MAINLOOP2_egg_ready               00000B29
MAINLOOP2_egg_up                  00000B1B
MAINLOOP2_heart_off               00000AFE
MAINLOOP2_heart_on                00000B05
MAINLOOP2_mode_shift              00000CFD
MAINLOOP2_no_counter_active       00000CE0
MAINLOOP2_no_counter_egg          00000CCA
MAINLOOP2_no_counter_hyper        00000CEB
MAINLOOP2_no_counter_sleep        00000CD5
MAINLOOP2_no_counter_update       00000CEB
MAINLOOP2_no_egg                  00000B30
MAINLOOP2_no_egg_update           00000B39
MAINLOOP2_no_food_warn            00000CAB
MAINLOOP2_no_force_poo            00000C82
MAINLOOP2_no_force_stomach        00000C79
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 163


SYMBOL TABLE
  LABEL                             VALUE 

MAINLOOP2_no_heart                00000B0B
MAINLOOP2_no_mode_shift           00000D14
MAINLOOP2_no_poo_warn             00000CC0
MAINLOOP2_no_tick                 00000D7C
MAINLOOP2_not_sick                00000D39
MAINLOOP2_poo_off                 00000CB9
MAINLOOP2_poop_chk                00000D6F
MAINLOOP2_postcon                 00000A97
MAINLOOP2_postcon_cycle_oLED      00000A9A
MAINLOOP2_postcon_no_quest        00000AD6
MAINLOOP2_postcon_skip_chks       00000C96
MAINLOOP2_return_2_MAINLOOP       00000DA5
MAINLOOP2_shift_sleep             00000D0A
MAINLOOP2_stomach_off             00000CA4
MAINLOOP3                         000019C8
MAINLOOP3_not_oneshot_start       000019D5
MAINLOOP3_oLED_done               00001A55
MAINLOOP3_oLED_get_next           00001A06
MAINLOOP3_oLED_read_row           00001A16
MAINLOOP3_oLED_row_loop           00001A07
MAINLOOP3_oLED_set_loop           000019E6
MAINLOOP3_oLED_set_loop_skip      000019ED
MAINLOOP3_oLED_write_row          00001A2C
MAINLOOP3_oneshot_done            000019DA
MAINLOOP3_return                  00000AE0
MAINLOOP_no_flash_update          0000065C
MC1OUT                            00000000
MC2OUT                            00000001
MFOEN                             00000005
MFOR                              00000005
MLC1OUT                           00000000
MLC2OUT                           00000001
MLC3OUT                           00000002
MLC4OUT                           00000003
MODE0                             00000000
MODE1                             00000001
MODE2                             00000002
MODE3                             00000003
MODE4                             00000004
MSK0                              00000000
MSK1                              00000001
MSK2                              00000002
MSK3                              00000003
MSK4                              00000004
MSK5                              00000005
MSK6                              00000006
MSK7                              00000007
MSSP1MD                           00000004
N1CKS0                            00000000
N1CKS1                            00000001
N1CKS2                            00000002
N1CKS3                            00000003
N1EN                              00000007
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 164


SYMBOL TABLE
  LABEL                             VALUE 

N1OUT                             00000005
N1PFM                             00000000
N1POL                             00000004
N1PWS0                            00000005
N1PWS1                            00000006
N1PWS2                            00000007
NCH0                              00000000
NCH1                              00000001
NCH2                              00000002
NCO1ACC                           0000058C
NCO1ACC0                          00000000
NCO1ACC1                          00000001
NCO1ACC10                         00000002
NCO1ACC11                         00000003
NCO1ACC12                         00000004
NCO1ACC13                         00000005
NCO1ACC14                         00000006
NCO1ACC15                         00000007
NCO1ACC16                         00000000
NCO1ACC17                         00000001
NCO1ACC18                         00000002
NCO1ACC19                         00000003
NCO1ACC2                          00000002
NCO1ACC3                          00000003
NCO1ACC4                          00000004
NCO1ACC5                          00000005
NCO1ACC6                          00000006
NCO1ACC7                          00000007
NCO1ACC8                          00000000
NCO1ACC9                          00000001
NCO1ACCH                          0000058D
NCO1ACCL                          0000058C
NCO1ACCU                          0000058E
NCO1CLK                           00000593
NCO1CON                           00000592
NCO1IE                            00000004
NCO1IF                            00000004
NCO1INC                           0000058F
NCO1INC0                          00000000
NCO1INC1                          00000001
NCO1INC10                         00000002
NCO1INC11                         00000003
NCO1INC12                         00000004
NCO1INC13                         00000005
NCO1INC14                         00000006
NCO1INC15                         00000007
NCO1INC16                         00000000
NCO1INC17                         00000001
NCO1INC18                         00000002
NCO1INC19                         00000003
NCO1INC2                          00000002
NCO1INC3                          00000003
NCO1INC4                          00000004
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 165


SYMBOL TABLE
  LABEL                             VALUE 

NCO1INC5                          00000005
NCO1INC6                          00000006
NCO1INC7                          00000007
NCO1INC8                          00000000
NCO1INC9                          00000001
NCO1INCH                          00000590
NCO1INCL                          0000058F
NCO1INCU                          00000591
NCOIE                             00000004
NCOIF                             00000004
NCOMD                             00000007
NDIV0                             00000000
NDIV1                             00000001
NDIV2                             00000002
NDIV3                             00000003
NOSC0                             00000004
NOSC1                             00000005
NOSC2                             00000006
NOSCR                             00000003
NOT_A                             00000005
NOT_ADDRESS                       00000005
NOT_BOR                           00000000
NOT_MEMV                          00000001
NOT_PD                            00000003
NOT_POR                           00000001
NOT_RI                            00000002
NOT_RMCLR                         00000003
NOT_RWDT                          00000004
NOT_SYNC                          00000002
NOT_T1SYNC                        00000002
NOT_TO                            00000004
NOT_W                             00000002
NOT_WDTWV                         00000005
NOT_WRITE                         00000002
NSS                               00000000
NVMADR                            0000081A
NVMADRH                           0000081B
NVMADRH0                          00000000
NVMADRH1                          00000001
NVMADRH2                          00000002
NVMADRH3                          00000003
NVMADRH4                          00000004
NVMADRH5                          00000005
NVMADRH6                          00000006
NVMADRL                           0000081A
NVMADRL0                          00000000
NVMADRL1                          00000001
NVMADRL2                          00000002
NVMADRL3                          00000003
NVMADRL4                          00000004
NVMADRL5                          00000005
NVMADRL6                          00000006
NVMADRL7                          00000007
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 166


SYMBOL TABLE
  LABEL                             VALUE 

NVMCON1                           0000081E
NVMCON2                           0000081F
NVMDAT                            0000081C
NVMDATH                           0000081D
NVMDATH0                          00000000
NVMDATH1                          00000001
NVMDATH2                          00000002
NVMDATH3                          00000003
NVMDATH4                          00000004
NVMDATH5                          00000005
NVMDATL                           0000081C
NVMDATL0                          00000000
NVMDATL1                          00000001
NVMDATL2                          00000002
NVMDATL3                          00000003
NVMDATL4                          00000004
NVMDATL5                          00000005
NVMDATL6                          00000006
NVMDATL7                          00000007
NVMIE                             00000005
NVMIF                             00000005
NVMMD                             00000002
NVMREGS                           00000006
ODCA0                             00000000
ODCA1                             00000001
ODCA2                             00000002
ODCA4                             00000004
ODCA5                             00000005
ODCB4                             00000004
ODCB5                             00000005
ODCB6                             00000006
ODCB7                             00000007
ODCC0                             00000000
ODCC1                             00000001
ODCC2                             00000002
ODCC3                             00000003
ODCC4                             00000004
ODCC5                             00000005
ODCC6                             00000006
ODCC7                             00000007
ODCONA                            00001F3A
ODCONB                            00001F45
ODCONC                            00001F50
OE1                               00000005
OE2                               00000004
OERR                              00000001
ON_T1CON                          00000000
ON_T2CON                          00000007
ORDY                              00000004
OSCCON1                           0000088D
OSCCON2                           0000088E
OSCCON3                           0000088F
OSCEN                             00000891
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 167


SYMBOL TABLE
  LABEL                             VALUE 

OSCFRQ                            00000893
OSCSTAT                           00000890
OSCTUNE                           00000892
OSFIE                             00000007
OSFIF                             00000007
OUTPS0                            00000000
OUTPS1                            00000001
OUTPS2                            00000002
OUTPS3                            00000003
OUT_CCP1CON                       00000005
OUT_CCP2CON                       00000005
OUT_CLC1CON                       00000005
OUT_CLC2CON                       00000005
OUT_CLC3CON                       00000005
OUT_CLC4CON                       00000005
OUT_CM1CON0                       00000006
OUT_CM2CON0                       00000006
OUT_PWM3CON                       00000005
OUT_PWM4CON                       00000005
OUT_PWM5CON                       00000005
OUT_PWM6CON                       00000005
OVRA                              00000004
OVRB                              00000005
OVRC                              00000006
OVRD                              00000007
P                                 00000004
PCH0                              00000000
PCH1                              00000001
PCH2                              00000002
PCIE                              00000006
PCL                               00000002
PCLATH                            0000000A
PCLATH_SHAD                       00001FE7
PCON0                             00000813
PCON1                             00000814
PEIE                              00000006
PEN                               00000002
PIE0                              00000716
PIE1                              00000717
PIE2                              00000718
PIE3                              00000719
PIE4                              0000071A
PIE5                              0000071B
PIE6                              0000071C
PIE7                              0000071D
PIR0                              0000070C
PIR1                              0000070D
PIR2                              0000070E
PIR3                              0000070F
PIR4                              00000710
PIR5                              00000711
PIR6                              00000712
PIR7                              00000713
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 168


SYMBOL TABLE
  LABEL                             VALUE 

PLLR                              00000000
PMD0                              00000796
PMD1                              00000797
PMD2                              00000798
PMD3                              00000799
PMD4                              0000079A
PMD5                              0000079B
POLA                              00000000
POLB                              00000001
POLC                              00000002
POLD                              00000003
POL_CLC1POL                       00000007
POL_CLC2POL                       00000007
POL_CLC3POL                       00000007
POL_CLC4POL                       00000007
POL_CM1CON0                       00000004
POL_CM2CON0                       00000004
POL_PWM3CON                       00000004
POL_PWM4CON                       00000004
POL_PWM5CON                       00000004
POL_PWM6CON                       00000004
PORTA                             0000000C
PORTB                             0000000D
PORTC                             0000000E
POSTCON_MODE_TIME                 000000FF
PPSLOCK                           00001E8F
PPSLOCKED                         00000000
PR0                               0000059D
PR1                               0000020F
PR2                               0000028D
PROGRAM_LED_STOP                  00000654
PSCNT0                            00000000
PSCNT1                            00000001
PSCNT10                           00000002
PSCNT11                           00000003
PSCNT12                           00000004
PSCNT13                           00000005
PSCNT14                           00000006
PSCNT15                           00000007
PSCNT16                           00000000
PSCNT17                           00000001
PSCNT2                            00000002
PSCNT3                            00000003
PSCNT4                            00000004
PSCNT5                            00000005
PSCNT6                            00000006
PSCNT7                            00000007
PSCNT8                            00000000
PSCNT9                            00000001
PSS0                              00000002
PSS1                              00000003
PSYNC                             00000007
PWM3CON                           00000316
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 169


SYMBOL TABLE
  LABEL                             VALUE 

PWM3DC                            00000314
PWM3DC0                           00000006
PWM3DC1                           00000007
PWM3DC2                           00000000
PWM3DC3                           00000001
PWM3DC4                           00000002
PWM3DC5                           00000003
PWM3DC6                           00000004
PWM3DC7                           00000005
PWM3DC8                           00000006
PWM3DC9                           00000007
PWM3DCH                           00000315
PWM3DCL                           00000314
PWM3EN                            00000007
PWM3MD                            00000002
PWM3OUT                           00000005
PWM3POL                           00000004
PWM4CON                           0000031A
PWM4DC                            00000318
PWM4DC0                           00000006
PWM4DC1                           00000007
PWM4DC2                           00000000
PWM4DC3                           00000001
PWM4DC4                           00000002
PWM4DC5                           00000003
PWM4DC6                           00000004
PWM4DC7                           00000005
PWM4DC8                           00000006
PWM4DC9                           00000007
PWM4DCH                           00000319
PWM4DCL                           00000318
PWM4EN                            00000007
PWM4MD                            00000003
PWM4OUT                           00000005
PWM4POL                           00000004
PWM5CON                           0000031E
PWM5DC                            0000031C
PWM5DC0                           00000006
PWM5DC1                           00000007
PWM5DC2                           00000000
PWM5DC3                           00000001
PWM5DC4                           00000002
PWM5DC5                           00000003
PWM5DC6                           00000004
PWM5DC7                           00000005
PWM5DC8                           00000006
PWM5DC9                           00000007
PWM5DCH                           0000031D
PWM5DCL                           0000031C
PWM5EN                            00000007
PWM5MD                            00000004
PWM5OUT                           00000005
PWM5POL                           00000004
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 170


SYMBOL TABLE
  LABEL                             VALUE 

PWM6CON                           0000038E
PWM6DC                            0000038C
PWM6DC0                           00000006
PWM6DC1                           00000007
PWM6DC2                           00000000
PWM6DC3                           00000001
PWM6DC4                           00000002
PWM6DC5                           00000003
PWM6DC6                           00000004
PWM6DC7                           00000005
PWM6DC8                           00000006
PWM6DC9                           00000007
PWM6DCH                           0000038D
PWM6DCL                           0000038C
PWM6EN                            00000007
PWM6MD                            00000005
PWM6OUT                           00000005
PWM6POL                           00000004
PWMPW0                            00000006
PWMPW1                            00000007
PWMPW2                            00000000
PWMPW3                            00000001
PWMPW4                            00000002
PWMPW5                            00000003
PWMPW6                            00000004
PWMPW7                            00000005
PWMPW8                            00000006
PWMPW9                            00000007
RA0                               00000000
RA0PPS                            00001F10
RA0PPS0                           00000000
RA0PPS1                           00000001
RA0PPS2                           00000002
RA0PPS3                           00000003
RA0PPS4                           00000004
RA1                               00000001
RA1PPS                            00001F11
RA1PPS0                           00000000
RA1PPS1                           00000001
RA1PPS2                           00000002
RA1PPS3                           00000003
RA1PPS4                           00000004
RA2                               00000002
RA2PPS                            00001F12
RA2PPS0                           00000000
RA2PPS1                           00000001
RA2PPS2                           00000002
RA2PPS3                           00000003
RA2PPS4                           00000004
RA3                               00000003
RA3PPS                            00001F13
RA3PPS0                           00000000
RA3PPS1                           00000001
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 171


SYMBOL TABLE
  LABEL                             VALUE 

RA3PPS2                           00000002
RA3PPS3                           00000003
RA3PPS4                           00000004
RA4                               00000004
RA4PPS                            00001F14
RA4PPS0                           00000000
RA4PPS1                           00000001
RA4PPS2                           00000002
RA4PPS3                           00000003
RA4PPS4                           00000004
RA5                               00000005
RA5PPS                            00001F15
RA5PPS0                           00000000
RA5PPS1                           00000001
RA5PPS2                           00000002
RA5PPS3                           00000003
RA5PPS4                           00000004
RB4                               00000004
RB4PPS                            00001F1C
RB4PPS0                           00000000
RB4PPS1                           00000001
RB4PPS2                           00000002
RB4PPS3                           00000003
RB4PPS4                           00000004
RB5                               00000005
RB5PPS                            00001F1D
RB5PPS0                           00000000
RB5PPS1                           00000001
RB5PPS2                           00000002
RB5PPS3                           00000003
RB5PPS4                           00000004
RB6                               00000006
RB6PPS                            00001F1E
RB6PPS0                           00000000
RB6PPS1                           00000001
RB6PPS2                           00000002
RB6PPS3                           00000003
RB6PPS4                           00000004
RB7                               00000007
RB7PPS                            00001F1F
RB7PPS0                           00000000
RB7PPS1                           00000001
RB7PPS2                           00000002
RB7PPS3                           00000003
RB7PPS4                           00000004
RC0                               00000000
RC0PPS                            00001F20
RC0PPS0                           00000000
RC0PPS1                           00000001
RC0PPS2                           00000002
RC0PPS3                           00000003
RC0PPS4                           00000004
RC1                               00000001
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 172


SYMBOL TABLE
  LABEL                             VALUE 

RC1IE                             00000005
RC1IF                             00000005
RC1PPS                            00001F21
RC1PPS0                           00000000
RC1PPS1                           00000001
RC1PPS2                           00000002
RC1PPS3                           00000003
RC1PPS4                           00000004
RC1REG                            00000119
RC1STA                            0000011D
RC2                               00000002
RC2IE                             00000007
RC2IF                             00000007
RC2PPS                            00001F22
RC2PPS0                           00000000
RC2PPS1                           00000001
RC2PPS2                           00000002
RC2PPS3                           00000003
RC2PPS4                           00000004
RC2REG                            00000A19
RC2STA                            00000A1D
RC3                               00000003
RC3PPS                            00001F23
RC3PPS0                           00000000
RC3PPS1                           00000001
RC3PPS2                           00000002
RC3PPS3                           00000003
RC3PPS4                           00000004
RC4                               00000004
RC4PPS                            00001F24
RC4PPS0                           00000000
RC4PPS1                           00000001
RC4PPS2                           00000002
RC4PPS3                           00000003
RC4PPS4                           00000004
RC5                               00000005
RC5PPS                            00001F25
RC5PPS0                           00000000
RC5PPS1                           00000001
RC5PPS2                           00000002
RC5PPS3                           00000003
RC5PPS4                           00000004
RC6                               00000006
RC6PPS                            00001F26
RC6PPS0                           00000000
RC6PPS1                           00000001
RC6PPS2                           00000002
RC6PPS3                           00000003
RC6PPS4                           00000004
RC7                               00000007
RC7PPS                            00001F27
RC7PPS0                           00000000
RC7PPS1                           00000001
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 173


SYMBOL TABLE
  LABEL                             VALUE 

RC7PPS2                           00000002
RC7PPS3                           00000003
RC7PPS4                           00000004
RCEN                              00000003
RCIDL                             00000006
RCREG                             00000119
RCREG1                            00000119
RCREG2                            00000A19
RCSTA                             0000011D
RCSTA1                            0000011D
RCSTA2                            00000A1D
RD                                00000000
RD16                              00000001
READ_WRITE                        00000002
REN                               00000006
RETURN_TO_IRQ_RX1_not_type3       00001348
ROI                               00000005
RSEL0                             00000000
RSEL1                             00000001
RSEL2                             00000002
RSEL3                             00000003
RSEN                              00000001
RX1DTPPS                          00001ECB
RX1DTPPS0                         00000000
RX1DTPPS1                         00000001
RX1DTPPS2                         00000002
RX1DTPPS3                         00000003
RX1DTPPS4                         00000004
RX1DTPPS5                         00000005
RX2DTPPS                          00001ECD
RX2DTPPS0                         00000000
RX2DTPPS1                         00000001
RX2DTPPS2                         00000002
RX2DTPPS3                         00000003
RX2DTPPS4                         00000004
RX2DTPPS5                         00000005
RX9                               00000006
RX9D                              00000000
R_NOT_W                           00000002
R_W                               00000002
S                                 00000003
SBCDE                             00000002
SBOREN                            00000007
SCIE                              00000005
SCKP                              00000004
SDAHT                             00000003
SEN                               00000000
SENDB                             00000003
SHUTDOWN                          00000007
SLRA0                             00000000
SLRA1                             00000001
SLRA2                             00000002
SLRA4                             00000004
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 174


SYMBOL TABLE
  LABEL                             VALUE 

SLRA5                             00000005
SLRB4                             00000004
SLRB5                             00000005
SLRB6                             00000006
SLRB7                             00000007
SLRC0                             00000000
SLRC1                             00000001
SLRC2                             00000002
SLRC3                             00000003
SLRC4                             00000004
SLRC5                             00000005
SLRC6                             00000006
SLRC7                             00000007
SLRCONA                           00001F3B
SLRCONB                           00001F46
SLRCONC                           00001F51
SMP                               00000007
SOR                               00000003
SOSCEN                            00000003
SOSCPWR                           00000006
SP1BRG                            0000011B
SP1BRGH                           0000011C
SP1BRGL                           0000011B
SP2BRG                            00000A1B
SP2BRGH                           00000A1C
SP2BRGL                           00000A1B
SPBRG                             0000011B
SPBRG1                            0000011B
SPBRG2                            00000A1B
SPBRGH                            0000011C
SPBRGH1                           0000011C
SPBRGH2                           00000A1C
SPBRGL                            0000011B
SPEN                              00000007
SREN                              00000005
SSP1ADD                           0000018D
SSP1BUF                           0000018C
SSP1CLKPPS                        00001EC5
SSP1CLKPPS0                       00000000
SSP1CLKPPS1                       00000001
SSP1CLKPPS2                       00000002
SSP1CLKPPS3                       00000003
SSP1CLKPPS4                       00000004
SSP1CLKPPS5                       00000005
SSP1CON1                          00000190
SSP1CON2                          00000191
SSP1CON3                          00000192
SSP1DATPPS                        00001EC6
SSP1DATPPS0                       00000000
SSP1DATPPS1                       00000001
SSP1DATPPS2                       00000002
SSP1DATPPS3                       00000003
SSP1DATPPS4                       00000004
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 175


SYMBOL TABLE
  LABEL                             VALUE 

SSP1DATPPS5                       00000005
SSP1IE                            00000000
SSP1IF                            00000000
SSP1MSK                           0000018E
SSP1SSPPS                         00001EC7
SSP1SSPPS0                        00000000
SSP1SSPPS1                        00000001
SSP1SSPPS2                        00000002
SSP1SSPPS3                        00000003
SSP1SSPPS4                        00000004
SSP1SSPPS5                        00000005
SSP1STAT                          0000018F
SSPEN                             00000005
SSPM0                             00000000
SSPM1                             00000001
SSPM2                             00000002
SSPM3                             00000003
SSPOV                             00000006
START                             000004E1
START_ID_UPDATE_DONE              0000054E
START_skip_status                 0000056B
START_undead_chk_done             00000577
START_undead_founder              00000576
STATE                             00000002
STATUS                            00000003
STATUS_SHAD                       00001FE4
STATUS_SHAD0                      00000000
STATUS_SHAD1                      00000001
STATUS_SHAD2                      00000002
STKOVF                            00000007
STKPTR                            00001FED
STKPTR0                           00000000
STKPTR1                           00000001
STKPTR2                           00000002
STKPTR3                           00000003
STKPTR4                           00000004
STKUNF                            00000006
STRA                              00000000
STRB                              00000001
STRC                              00000002
STRD                              00000003
SWDTEN                            00000000
SYNC_CM1CON0                      00000000
SYNC_CM2CON0                      00000000
SYNC_TX1STA                       00000004
SYNC_TX2STA                       00000004
SYNC_TXSTA                        00000004
SYNC_TXSTA1                       00000004
SYNC_TXSTA2                       00000004
SYSCMD                            00000007
T016BIT                           00000004
T0ASYNC                           00000004
T0CKIPPS                          00001E91
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 176


SYMBOL TABLE
  LABEL                             VALUE 

T0CKIPPS0                         00000000
T0CKIPPS1                         00000001
T0CKIPPS2                         00000002
T0CKIPPS3                         00000003
T0CKIPPS4                         00000004
T0CKIPPS5                         00000005
T0CKPS0                           00000000
T0CKPS1                           00000001
T0CKPS2                           00000002
T0CKPS3                           00000003
T0CON0                            0000059E
T0CON1                            0000059F
T0CS0                             00000005
T0CS1                             00000006
T0CS2                             00000007
T0EN                              00000007
T0OUT                             00000005
T0OUTPS0                          00000000
T0OUTPS1                          00000001
T0OUTPS2                          00000002
T0OUTPS3                          00000003
T0PR0                             00000000
T0PR1                             00000001
T0PR2                             00000002
T0PR3                             00000003
T0PR4                             00000004
T0PR5                             00000005
T0PR6                             00000006
T0PR7                             00000007
T0PS0                             00000000
T0PS1                             00000001
T0PS2                             00000002
T0PS3                             00000003
T1CKIPPS                          00001E92
T1CKIPPS0                         00000000
T1CKIPPS1                         00000001
T1CKIPPS2                         00000002
T1CKIPPS3                         00000003
T1CKIPPS4                         00000004
T1CKIPPS5                         00000005
T1CKPS0                           00000004
T1CKPS1                           00000005
T1CLK                             00000211
T1CON                             0000020E
T1CS0                             00000000
T1CS1                             00000001
T1CS2                             00000002
T1CS3                             00000003
T1GATE                            00000210
T1GCON                            0000020F
T1GE                              00000007
T1GGO                             00000003
T1GGO_NOT_DONE                    00000003
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 177


SYMBOL TABLE
  LABEL                             VALUE 

T1GPOL                            00000006
T1GPPS                            00001E93
T1GPPS0                           00000000
T1GPPS1                           00000001
T1GPPS2                           00000002
T1GPPS3                           00000003
T1GPPS4                           00000004
T1GPPS5                           00000005
T1GSPM                            00000004
T1GSS0                            00000000
T1GSS1                            00000001
T1GSS2                            00000002
T1GSS3                            00000003
T1GSS4                            00000004
T1GTM                             00000005
T1GVAL                            00000002
T1RD16                            00000001
T2CKPOL                           00000006
T2CKPS0                           00000004
T2CKPS1                           00000005
T2CKPS2                           00000006
T2CKSYNC                          00000005
T2CLKCON                          00000290
T2CON                             0000028E
T2CS0                             00000000
T2CS1                             00000001
T2CS2                             00000002
T2CS3                             00000003
T2HLT                             0000028F
T2INPPS                           00001E9C
T2INPPS0                          00000000
T2INPPS1                          00000001
T2INPPS2                          00000002
T2INPPS3                          00000003
T2INPPS4                          00000004
T2INPPS5                          00000005
T2MODE0                           00000000
T2MODE1                           00000001
T2MODE2                           00000002
T2MODE3                           00000003
T2MODE4                           00000004
T2ON                              00000007
T2OUTPS0                          00000000
T2OUTPS1                          00000001
T2OUTPS2                          00000002
T2OUTPS3                          00000003
T2PR                              0000028D
T2PSYNC                           00000007
T2RSEL0                           00000000
T2RSEL1                           00000001
T2RSEL2                           00000002
T2RSEL3                           00000003
T2RST                             00000291
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 178


SYMBOL TABLE
  LABEL                             VALUE 

T2TMR                             0000028C
TMR0                              0000059C
TMR0H                             0000059D
TMR0H0                            00000000
TMR0H1                            00000001
TMR0H2                            00000002
TMR0H3                            00000003
TMR0H4                            00000004
TMR0H5                            00000005
TMR0H6                            00000006
TMR0H7                            00000007
TMR0IE                            00000005
TMR0IF                            00000005
TMR0L                             0000059C
TMR0L0                            00000000
TMR0L1                            00000001
TMR0L2                            00000002
TMR0L3                            00000003
TMR0L4                            00000004
TMR0L5                            00000005
TMR0L6                            00000006
TMR0L7                            00000007
TMR0MD                            00000000
TMR1                              0000020C
TMR10                             00000000
TMR11                             00000001
TMR110                            00000002
TMR111                            00000003
TMR112                            00000004
TMR113                            00000005
TMR114                            00000006
TMR115                            00000007
TMR12                             00000002
TMR13                             00000003
TMR14                             00000004
TMR15                             00000005
TMR16                             00000006
TMR17                             00000007
TMR18                             00000000
TMR19                             00000001
TMR1CLK                           00000211
TMR1GATE                          00000210
TMR1GIE                           00000000
TMR1GIF                           00000000
TMR1H                             0000020D
TMR1H0                            00000000
TMR1H1                            00000001
TMR1H2                            00000002
TMR1H3                            00000003
TMR1H4                            00000004
TMR1H5                            00000005
TMR1H6                            00000006
TMR1H7                            00000007
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 179


SYMBOL TABLE
  LABEL                             VALUE 

TMR1IE                            00000000
TMR1IF                            00000000
TMR1L                             0000020C
TMR1L0                            00000000
TMR1L1                            00000001
TMR1L2                            00000002
TMR1L3                            00000003
TMR1L4                            00000004
TMR1L5                            00000005
TMR1L6                            00000006
TMR1L7                            00000007
TMR1MD                            00000001
TMR1ON                            00000000
TMR2                              0000028C
TMR2IE                            00000001
TMR2IF                            00000001
TMR2MD                            00000002
TMR2ON                            00000007
TOSH                              00001FEF
TOSH0                             00000000
TOSH1                             00000001
TOSH2                             00000002
TOSH3                             00000003
TOSH4                             00000004
TOSH5                             00000005
TOSH6                             00000006
TOSH7                             00000007
TOSL                              00001FEE
TOSL0                             00000000
TOSL1                             00000001
TOSL2                             00000002
TOSL3                             00000003
TOSL4                             00000004
TOSL5                             00000005
TOSL6                             00000006
TOSL7                             00000007
TRISA                             00000012
TRISA0                            00000000
TRISA1                            00000001
TRISA2                            00000002
TRISA4                            00000004
TRISA5                            00000005
TRISB                             00000013
TRISB4                            00000004
TRISB5                            00000005
TRISB6                            00000006
TRISB7                            00000007
TRISC                             00000014
TRISC0                            00000000
TRISC1                            00000001
TRISC2                            00000002
TRISC3                            00000003
TRISC4                            00000004
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 180


SYMBOL TABLE
  LABEL                             VALUE 

TRISC5                            00000005
TRISC6                            00000006
TRISC7                            00000007
TRMT                              00000001
TSEN                              00000005
TSRNG                             00000004
TX1CKPPS                          00001ECC
TX1CKPPS0                         00000000
TX1CKPPS1                         00000001
TX1CKPPS2                         00000002
TX1CKPPS3                         00000003
TX1CKPPS4                         00000004
TX1CKPPS5                         00000005
TX1IE                             00000004
TX1IF                             00000004
TX1REG                            0000011A
TX1STA                            0000011E
TX2CKPPS                          00001ECE
TX2CKPPS0                         00000000
TX2CKPPS1                         00000001
TX2CKPPS2                         00000002
TX2CKPPS3                         00000003
TX2CKPPS4                         00000004
TX2CKPPS5                         00000005
TX2IE                             00000006
TX2IF                             00000006
TX2REG                            00000A1A
TX2STA                            00000A1E
TX9                               00000006
TX9D                              00000000
TXEN                              00000005
TXREG                             0000011A
TXREG1                            0000011A
TXREG2                            00000A1A
TXSTA                             0000011E
TXSTA1                            0000011E
TXSTA2                            00000A1E
UA                                00000001
UART1MD                           00000006
UART2MD                           00000007
UPDATE_BODY                       00000C0D
UPDATE_BODY_not_quest             00000C2D
UPDATE_BODY_not_uber              00000C32
UPDATE_BODY_quest_done            00000C2A
UPDATE_BODY_uber                  00000C30
UPDATE_LOGO                       00000B39
VREGCON                           00000812
VREGPM                            00000001
W                                 00000000
WCOL                              00000007
WDTCON0                           0000080C
WDTCON1                           0000080D
WDTCS0                            00000004
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 181


SYMBOL TABLE
  LABEL                             VALUE 

WDTCS1                            00000005
WDTCS2                            00000006
WDTPS0                            00000001
WDTPS1                            00000002
WDTPS2                            00000003
WDTPS3                            00000004
WDTPS4                            00000005
WDTPSCNT0                         00000000
WDTPSCNT1                         00000001
WDTPSCNT10                        00000002
WDTPSCNT11                        00000003
WDTPSCNT12                        00000004
WDTPSCNT13                        00000005
WDTPSCNT14                        00000006
WDTPSCNT15                        00000007
WDTPSCNT16                        00000000
WDTPSCNT17                        00000001
WDTPSCNT2                         00000002
WDTPSCNT3                         00000003
WDTPSCNT4                         00000004
WDTPSCNT5                         00000005
WDTPSCNT6                         00000006
WDTPSCNT7                         00000007
WDTPSCNT8                         00000000
WDTPSCNT9                         00000001
WDTPSH                            0000080F
WDTPSL                            0000080E
WDTSEN                            00000000
WDTSTATE                          00000002
WDTTMR                            00000810
WDTTMR0                           00000003
WDTTMR1                           00000004
WDTTMR2                           00000005
WDTTMR3                           00000006
WDTTMR4                           00000007
WDTWINDOW0                        00000000
WDTWINDOW1                        00000001
WDTWINDOW2                        00000002
WINDOW0                           00000000
WINDOW1                           00000001
WINDOW2                           00000002
WPUA                              00001F39
WPUA0                             00000000
WPUA1                             00000001
WPUA2                             00000002
WPUA3                             00000003
WPUA4                             00000004
WPUA5                             00000005
WPUB                              00001F44
WPUB4                             00000004
WPUB5                             00000005
WPUB6                             00000006
WPUB7                             00000007
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 182


SYMBOL TABLE
  LABEL                             VALUE 

WPUC                              00001F4F
WPUC0                             00000000
WPUC1                             00000001
WPUC2                             00000002
WPUC3                             00000003
WPUC4                             00000004
WPUC5                             00000005
WPUC6                             00000006
WPUC7                             00000007
WR                                00000001
WREG                              00000009
WREG_SHAD                         00001FE5
WREN                              00000002
WRERR                             00000003
WUE                               00000001
Z                                 00000002
ZCDCON                            0000091F
ZCDIE                             00000006
ZCDIF                             00000006
ZCDINTN                           00000000
ZCDINTP                           00000001
ZCDMD                             00000000
ZCDOUT                            00000005
ZCDPOL                            00000004
ZCDSEN                            00000007
_2BYTE_DEC_N_STOP                 0000065E
_2BYTE_SUB_N_STOP_not_zero        00000664
_2_2BYTE_DEC_N_STOP               000009CC
_2_3BYTE_SUB_N_STOP               000009D0
_2_CYCLE_LFSR                     000009F2
_2_CYCLE_LFSR16                   000009EF
_2_I2C_START                      000009B0
_2_I2C_STOP                       000009B8
_2_LED_SET_1                      000009BC
_2_LED_SET_2                      000009C0
_2_LED_ST_LUT1                    000008D8
_2_LED_ST_LUT1_0                  000008F2
_2_LED_ST_LUT1_1                  00000918
_2_LED_ST_LUT1_2                  0000093E
_2_LED_ST_LUT1_3                  00000964
_2_LED_ST_LUT1_4                  0000098A
_2_LED_ST_LUT2                    00000800
_2_LED_ST_LUT2_0                  0000081A
_2_LED_ST_LUT2_1                  00000840
_2_LED_ST_LUT2_2                  00000866
_2_LED_ST_LUT2_3                  0000088C
_2_LED_ST_LUT2_4                  000008B2
_2_LED_WRITE_1                    000009C8
_2_LED_WRITE_2                    000009C4
_2_SELECT_HEART                   00000A38
_2_SELECT_PINK                    00000A08
_2_SEND_W_I2C                     000009B4
_2_set_oLED_mode                  00000A3F
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 183


SYMBOL TABLE
  LABEL                             VALUE 

_2_set_oLED_mode_one_shot         00000A4F
_3BYTE_SUB_N_STOP_not_zero1       000009DB
_3BYTE_SUB_N_STOP_not_zero2       000009DC
_3_CYCLE_LFSR                     00001000
_4_ADDRESS_oLED                   00001836
_4_CFG_I2C                        00001804
_4_CFG_SPI                        00001808
_4_CYCLE_LFSR                     00001800
_4_SEND_RCV_W_SPI                 00001822
_BBEN_OFF                         00003FFF
_BBEN_ON                          00003FF7
_BBSIZE_BB16K                     00003FFA
_BBSIZE_BB1K                      00003FFE
_BBSIZE_BB2K                      00003FFD
_BBSIZE_BB32K                     00003FF9
_BBSIZE_BB4K                      00003FFC
_BBSIZE_BB512                     00003FFF
_BBSIZE_BB64K                     00003FF8
_BBSIZE_BB8K                      00003FFB
_BOREN_NSLEEP                     00003FBF
_BOREN_OFF                        00003F3F
_BOREN_ON                         00003FFF
_BOREN_SBOREN                     00003F7F
_BORV_HI                          00003DFF
_BORV_LO                          00003FFF
_CFG_I2C                          000006AC
_CLKOUTEN_OFF                     00003FFF
_CLKOUTEN_ON                      00003EFF
_CONFIG1                          00008007
_CONFIG2                          00008008
_CONFIG3                          00008009
_CONFIG4                          0000800A
_CONFIG5                          0000800B
_CP_OFF                           00003FFF
_CP_ON                            00003FFE
_CSWEN_OFF                        000037FF
_CSWEN_ON                         00003FFF
_CYCLE_LFSR16                     0000070C
_DEVID1                           00008006
_FCMEN_OFF                        00001FFF
_FCMEN_ON                         00003FFF
_FEXTOSC_ECH                      00003FFF
_FEXTOSC_ECL                      00003FFD
_FEXTOSC_ECM                      00003FFE
_FEXTOSC_HS                       00003FFA
_FEXTOSC_LP                       00003FF8
_FEXTOSC_OFF                      00003FFC
_FEXTOSC_Reserved                 00003FFB
_FEXTOSC_XT                       00003FF9
_I2C_START                        000006EF
_I2C_STOP                         000006E4
_IDLOC0                           00008000
_IDLOC1                           00008001
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 184


SYMBOL TABLE
  LABEL                             VALUE 

_IDLOC2                           00008002
_IDLOC3                           00008003
_LED_SET_1                        000006CD
_LED_SET_2                        000006C8
_LED_WRITE_1                      000006DB
_LED_WRITE_2                      000006D2
_LPBOREN_OFF                      00003FFF
_LPBOREN_ON                       00003FDF
_LVP_OFF                          00001FFF
_LVP_ON                           00003FFF
_MCLRE_OFF                        00003FFE
_MCLRE_ON                         00003FFF
_PPS1WAY_OFF                      000037FF
_PPS1WAY_ON                       00003FFF
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FFD
_RSTOSC_EXT1X                     00003FFF
_RSTOSC_EXT4X                     00003FAF
_RSTOSC_HFINT1                    00003FEF
_RSTOSC_HFINT32                   00003F8F
_RSTOSC_HFINTPLL                  00003F9F
_RSTOSC_LFINT                     00003FDF
_RSTOSC_Reserved                  00003FBF
_RSTOSC_SOSC                      00003FCF
_SAFEN_OFF                        00003FFF
_SAFEN_ON                         00003FEF
_SEND_W_I2C                       000006FC
_STVREN_OFF                       00002FFF
_STVREN_ON                        00003FFF
_UNLOCK_NVM                       000006A4
_UPDATE_FLASH                     00000671
_UPDATE_FLASH_load_loop           0000068C
_UPDATE_FLASH_loop                00000675
_UPDATE_FLASH_write               00000698
_WDTCCS_HFINTOSC                  00000FFF
_WDTCCS_LFINTOSC                  000007FF
_WDTCCS_SC                        00003FFF
_WDTCCS_SOSC                      000017FF
_WDTCPS_WDTCPS_0                  00003FE0
_WDTCPS_WDTCPS_1                  00003FE1
_WDTCPS_WDTCPS_10                 00003FEA
_WDTCPS_WDTCPS_11                 00003FEB
_WDTCPS_WDTCPS_12                 00003FEC
_WDTCPS_WDTCPS_13                 00003FED
_WDTCPS_WDTCPS_14                 00003FEE
_WDTCPS_WDTCPS_15                 00003FEF
_WDTCPS_WDTCPS_16                 00003FF0
_WDTCPS_WDTCPS_17                 00003FF1
_WDTCPS_WDTCPS_18                 00003FF2
_WDTCPS_WDTCPS_19                 00003FF3
_WDTCPS_WDTCPS_2                  00003FE2
_WDTCPS_WDTCPS_20                 00003FF4
_WDTCPS_WDTCPS_21                 00003FF5
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 185


SYMBOL TABLE
  LABEL                             VALUE 

_WDTCPS_WDTCPS_22                 00003FF6
_WDTCPS_WDTCPS_23                 00003FF7
_WDTCPS_WDTCPS_24                 00003FF8
_WDTCPS_WDTCPS_25                 00003FF9
_WDTCPS_WDTCPS_26                 00003FFA
_WDTCPS_WDTCPS_27                 00003FFB
_WDTCPS_WDTCPS_28                 00003FFC
_WDTCPS_WDTCPS_29                 00003FFD
_WDTCPS_WDTCPS_3                  00003FE3
_WDTCPS_WDTCPS_30                 00003FFE
_WDTCPS_WDTCPS_31                 00003FFF
_WDTCPS_WDTCPS_4                  00003FE4
_WDTCPS_WDTCPS_5                  00003FE5
_WDTCPS_WDTCPS_6                  00003FE6
_WDTCPS_WDTCPS_7                  00003FE7
_WDTCPS_WDTCPS_8                  00003FE8
_WDTCPS_WDTCPS_9                  00003FE9
_WDTCWS_WDTCWS_0                  000038FF
_WDTCWS_WDTCWS_1                  000039FF
_WDTCWS_WDTCWS_2                  00003AFF
_WDTCWS_WDTCWS_3                  00003BFF
_WDTCWS_WDTCWS_4                  00003CFF
_WDTCWS_WDTCWS_5                  00003DFF
_WDTCWS_WDTCWS_6                  00003EFF
_WDTCWS_WDTCWS_7                  00003FFF
_WDTE_NSLEEP                      00003FDF
_WDTE_OFF                         00003F9F
_WDTE_ON                          00003FFF
_WDTE_SWDTEN                      00003FBF
_WRTAPP_OFF                       00003FFF
_WRTAPP_ON                        00003F7F
_WRTB_OFF                         00003FFF
_WRTB_ON                          00003EFF
_WRTC_OFF                         00003FFF
_WRTC_ON                          00003DFF
_WRTSAF_OFF                       00003FFF
_WRTSAF_ON                        000037FF
_ZCD_OFF                          00003FFF
_ZCD_ON                           00003BFF
__16F15345                        00000001
__WAIT_BYTE_DONE                  00000706
__WAIT_PEN                        000006EA
__WAIT_SEN                        000006F7
__WAIT_SPI_BYTE_DONE              0000182C
ac                                0000013C
ac1                               0000013D
ac2                               0000013E
ac3                               0000013F
active_to_sleep                   00000258
ak                                00000138
ak1                               00000139
ak2                               0000013A
ak3                               0000013B
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 186


SYMBOL TABLE
  LABEL                             VALUE 

badge_ctrl                        00000039
badge_idH                         0000012C
badge_idL                         0000012B
badge_status                      0000002C
buffer_length                     00000080
button_up                         0000003A
c0                                00000137
countH                            00000027
countL                            00000026
count_bits_loop                   00000554
count_bits_shift_loop             00000558
count_bits_skip                   0000055E
crypt_cnt                         00000136
crypto_bbytes                     0000000A
crypto_rounds                     0000001A
crypto_wbytes                     00000005
current_bsr                       00000072
cycle_lfsr_loop                   000009F4
deepsleep_button_chk              00000DB0
deepsleep_button_chk_done         00000DB9
delay_cnt                         00000073
delay_downH                       00000029
delay_downL                       0000002A
egg_breath                        0000004B
egg_delay                         0000004C
food2poop                         00000003
food_active                       00000001
food_active_sick                  00000002
food_cnt                          0000003B
food_hyper                        00000004
food_hyper_sick                   00000006
food_startup                      000000FF
food_warn                         00000051
founder_badge                     00000240
g_flags                           00000071
g_temp                            00000070
game_tick                         0000003D
game_tick_time                    0000002D
heart_led_active                  0000000F
heart_led_hyper                   00000004
heart_led_sleep                   0000001F
heart_seq                         0000002D
hyper_to_active                   0000012C
i2c_dat0                          00000023
i2c_off                           00000022
icon_pwms                         000000FF
init_bank0_loop                   000004F4
init_bank2_loop                   000004FE
ir_offset                         0000012D
ir_rx_chksum                      00000121
ir_rx_seq                         00000120
ir_temp                           0000012E
ir_temp1                          0000012F
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 187


SYMBOL TABLE
  LABEL                             VALUE 

ir_tx_chksum                      00000128
ir_tx_seq                         00000127
k0                                00000134
load_loop                         0000050C
logo_a                            00000031
logo_b                            00000030
logo_cntH                         0000003F
logo_cntL                         0000003E
logo_g                            0000002F
logo_r                            0000002E
logo_seq                          0000004D
loop_i                            00000133
loop_j                            00000135
mainloop_button_chk               00000D85
mainloop_button_chk_done          00000DA4
necrollamacon                     000002E0
oLED_EEPROM_INIT                  00001983
oLED_EEPROM_INIT_return           0000062F
oLED_INIT                         00001850
oLED_INIT_DELAY                   00001854
oLED_INIT_return                  00000627
oLED_SELFTEST_chk_fail            000019C6
oLED_SKIP_EEPROM_CHK              000019C4
oLED_ctrl                         00000049
oLED_delay                        00000042
oLED_dt                           00000044
oLED_last                         0000004A
oLED_phase                        00000041
oLED_seq_addr0                    00000046
oLED_seq_addr1                    00000047
oLED_seq_addr2                    00000048
oLED_seq_cnt                      00000045
oLED_set                          00000043
objs_length                       00000060
offset                            00000025
onceH                             0000014A
onceL                             0000014B
outhouse                          000002A0
pink_eye_limit                    00000032
poo_cnt                           0000003C
poo_startup                       00000000
poo_temp                          00000040
poo_warn                          00000080
ram_active                        0000237D
ram_button                        00002377
ram_died                          00002386
ram_eggID                         00002375
ram_food                          00002388
ram_hyper                         00002380
ram_knocked                       0000238C
ram_poops                         0000238A
ram_prego                         00002383
ram_questID                       0000238E
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 188


SYMBOL TABLE
  LABEL                             VALUE 

ram_sickID                        00002373
ram_sleep                         0000237A
ram_spent                         00002371
ram_status                        00002370
rx_data_seq                       00000124
rx_idH                            00000125
rx_idL                            00000126
rx_status                         00000122
rx_type                           00000123
seq_cnt                           00000024
snake_oil                         000002C0
sparkle_last                      00000037
sparkle_skip                      00000038
speaker_badge                     00000200
standard_badge                    00000000
start_buffer                      00002370
start_buffer_objs                 00002390
start_button                      000002EF
start_eeprom                      00009F80
start_eeprom_p                    00001F80
start_key                         00009F70
start_rx_buffer                   00002320
start_spi_buffer                  000022D0
temp                              00000020
temp1                             00000021
temp_crypt0                       00000150
temp_crypt1                       00000151
temp_crypt2                       00000152
temp_crypt3                       00000153
temp_crypt4                       00000154
temp_crypt5                       00000155
temp_crypt6                       00000156
temp_crypt7                       00000157
temp_crypt8                       00000158
temp_crypt9                       00000159
temp_key0                         00000140
temp_key1                         00000141
temp_key2                         00000142
temp_key3                         00000143
temp_key4                         00000144
temp_key5                         00000145
temp_key6                         00000146
temp_key7                         00000147
temp_key8                         00000148
temp_key9                         00000149
test_loop                         000018C5
test_loop1                        000018D6
test_loop2                        000018E7
test_loop2a                       000018FF
test_loop3                        00001910
test_loop3a                       00001938
test_loop4                        00001949
test_loop4a                       00001969
MPASM 5.87   TYMKRS_CYPHERCON_2020_BADGE.ASM   4-17-2022  1:48:59         PAGE 189


SYMBOL TABLE
  LABEL                             VALUE 

test_loop5                        0000197A
time_passed                       0000002B
time_phase                        00000028
tx_data                           00000130
tx_delay                          00000131
tx_delay2                         00000132
tx_status                         00000129
tx_type                           0000012A
vendo                             000002FF
vendor_badge                      00000280
ver                               00000000

Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     0 reported,   695 suppressed

